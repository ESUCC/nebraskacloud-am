<?php
/**
 * SectionAttendanceTakenEventsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * SectionAttendanceTakenEventsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SectionAttendanceTakenEventsApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://api.ed-fi.org/api/api/v2.0/2015');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return SectionAttendanceTakenEventsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * deleteSectionAttendanceTakenEventById
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param string $id A resource identifier specifying the resource to be deleted. (required)
     * @param string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteSectionAttendanceTakenEventById($id, $if_match = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteSectionAttendanceTakenEventByIdWithHttpInfo ($id, $if_match);
        return $response; 
    }


    /**
     * deleteSectionAttendanceTakenEventByIdWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param string $id A resource identifier specifying the resource to be deleted. (required)
     * @param string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteSectionAttendanceTakenEventByIdWithHttpInfo($id, $if_match = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteSectionAttendanceTakenEventById');
        }
  
        // parse inputs
        $resourcePath = "/sectionAttendanceTakenEvents/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 500:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\WebServiceError', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getSectionAttendanceTakenEventByKey
     *
     * Retrieves a specific resource using the values of the resource's natural key (using the \"Get By Key\" pattern).
     *
     * @param int $school_id School Identity Column (required)
     * @param string $class_period_name An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period (required)
     * @param string $classroom_identification_code A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity. (required)
     * @param string $local_course_code The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students. (required)
     * @param string $term_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (required)
     * @param int $school_year The identifier for the school year. (required)
     * @param string $unique_section_code A unique identifier for the Section, that is defined by the classroom, the subjects taught, and the instructors that are assigned. (required)
     * @param int $sequence_of_course When a Section is part of a sequence of parts for a course, the number if the sequence. If the course has only one part, the value of this Section attribute should be 1. (required)
     * @param \Swagger\Client\Model\Object $date The month, day, and year of the CalendarDate. (required)
     * @param string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return \Swagger\Client\Model\SectionAttendanceTakenEvent
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSectionAttendanceTakenEventByKey($school_id, $class_period_name, $classroom_identification_code, $local_course_code, $term_descriptor, $school_year, $unique_section_code, $sequence_of_course, $date, $if_none_match = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getSectionAttendanceTakenEventByKeyWithHttpInfo ($school_id, $class_period_name, $classroom_identification_code, $local_course_code, $term_descriptor, $school_year, $unique_section_code, $sequence_of_course, $date, $if_none_match);
        return $response; 
    }


    /**
     * getSectionAttendanceTakenEventByKeyWithHttpInfo
     *
     * Retrieves a specific resource using the values of the resource's natural key (using the \"Get By Key\" pattern).
     *
     * @param int $school_id School Identity Column (required)
     * @param string $class_period_name An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period (required)
     * @param string $classroom_identification_code A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity. (required)
     * @param string $local_course_code The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students. (required)
     * @param string $term_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (required)
     * @param int $school_year The identifier for the school year. (required)
     * @param string $unique_section_code A unique identifier for the Section, that is defined by the classroom, the subjects taught, and the instructors that are assigned. (required)
     * @param int $sequence_of_course When a Section is part of a sequence of parts for a course, the number if the sequence. If the course has only one part, the value of this Section attribute should be 1. (required)
     * @param \Swagger\Client\Model\Object $date The month, day, and year of the CalendarDate. (required)
     * @param string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return Array of \Swagger\Client\Model\SectionAttendanceTakenEvent, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSectionAttendanceTakenEventByKeyWithHttpInfo($school_id, $class_period_name, $classroom_identification_code, $local_course_code, $term_descriptor, $school_year, $unique_section_code, $sequence_of_course, $date, $if_none_match = null)
    {
        
        // verify the required parameter 'school_id' is set
        if ($school_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $school_id when calling getSectionAttendanceTakenEventByKey');
        }
        // verify the required parameter 'class_period_name' is set
        if ($class_period_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class_period_name when calling getSectionAttendanceTakenEventByKey');
        }
        // verify the required parameter 'classroom_identification_code' is set
        if ($classroom_identification_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $classroom_identification_code when calling getSectionAttendanceTakenEventByKey');
        }
        // verify the required parameter 'local_course_code' is set
        if ($local_course_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $local_course_code when calling getSectionAttendanceTakenEventByKey');
        }
        // verify the required parameter 'term_descriptor' is set
        if ($term_descriptor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $term_descriptor when calling getSectionAttendanceTakenEventByKey');
        }
        // verify the required parameter 'school_year' is set
        if ($school_year === null) {
            throw new \InvalidArgumentException('Missing the required parameter $school_year when calling getSectionAttendanceTakenEventByKey');
        }
        // verify the required parameter 'unique_section_code' is set
        if ($unique_section_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $unique_section_code when calling getSectionAttendanceTakenEventByKey');
        }
        // verify the required parameter 'sequence_of_course' is set
        if ($sequence_of_course === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequence_of_course when calling getSectionAttendanceTakenEventByKey');
        }
        // verify the required parameter 'date' is set
        if ($date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $date when calling getSectionAttendanceTakenEventByKey');
        }
  
        // parse inputs
        $resourcePath = "/sectionAttendanceTakenEvents";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($school_id !== null) {
            $queryParams['schoolId'] = $this->apiClient->getSerializer()->toQueryValue($school_id);
        }// query params
        
        if ($class_period_name !== null) {
            $queryParams['classPeriodName'] = $this->apiClient->getSerializer()->toQueryValue($class_period_name);
        }// query params
        
        if ($classroom_identification_code !== null) {
            $queryParams['classroomIdentificationCode'] = $this->apiClient->getSerializer()->toQueryValue($classroom_identification_code);
        }// query params
        
        if ($local_course_code !== null) {
            $queryParams['localCourseCode'] = $this->apiClient->getSerializer()->toQueryValue($local_course_code);
        }// query params
        
        if ($term_descriptor !== null) {
            $queryParams['termDescriptor'] = $this->apiClient->getSerializer()->toQueryValue($term_descriptor);
        }// query params
        
        if ($school_year !== null) {
            $queryParams['schoolYear'] = $this->apiClient->getSerializer()->toQueryValue($school_year);
        }// query params
        
        if ($unique_section_code !== null) {
            $queryParams['uniqueSectionCode'] = $this->apiClient->getSerializer()->toQueryValue($unique_section_code);
        }// query params
        
        if ($sequence_of_course !== null) {
            $queryParams['sequenceOfCourse'] = $this->apiClient->getSerializer()->toQueryValue($sequence_of_course);
        }// query params
        
        if ($date !== null) {
            $queryParams['date'] = $this->apiClient->getSerializer()->toQueryValue($date);
        }
        // header params
        
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\SectionAttendanceTakenEvent'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\SectionAttendanceTakenEvent', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\SectionAttendanceTakenEvent', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\WebServiceError', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getSectionAttendanceTakenEventsById
     *
     * Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).
     *
     * @param string $id A resource identifier specifying the resource to be retrieved. (required)
     * @param string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return \Swagger\Client\Model\SectionAttendanceTakenEvent
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSectionAttendanceTakenEventsById($id, $if_none_match = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getSectionAttendanceTakenEventsByIdWithHttpInfo ($id, $if_none_match);
        return $response; 
    }


    /**
     * getSectionAttendanceTakenEventsByIdWithHttpInfo
     *
     * Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).
     *
     * @param string $id A resource identifier specifying the resource to be retrieved. (required)
     * @param string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return Array of \Swagger\Client\Model\SectionAttendanceTakenEvent, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSectionAttendanceTakenEventsByIdWithHttpInfo($id, $if_none_match = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getSectionAttendanceTakenEventsById');
        }
  
        // parse inputs
        $resourcePath = "/sectionAttendanceTakenEvents/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_none_match);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\SectionAttendanceTakenEvent'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\SectionAttendanceTakenEvent', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\SectionAttendanceTakenEvent', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\WebServiceError', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * postSectionAttendanceTakenEvents
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param \Swagger\Client\Model\SectionAttendanceTakenEvent $section_attendance_taken_event The JSON representation of the \&quot;sectionAttendanceTakenEvent\&quot; resource to be created or updated. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postSectionAttendanceTakenEvents($section_attendance_taken_event)
    {
        list($response, $statusCode, $httpHeader) = $this->postSectionAttendanceTakenEventsWithHttpInfo ($section_attendance_taken_event);
        return $response; 
    }


    /**
     * postSectionAttendanceTakenEventsWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param \Swagger\Client\Model\SectionAttendanceTakenEvent $section_attendance_taken_event The JSON representation of the \&quot;sectionAttendanceTakenEvent\&quot; resource to be created or updated. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postSectionAttendanceTakenEventsWithHttpInfo($section_attendance_taken_event)
    {
        
        // verify the required parameter 'section_attendance_taken_event' is set
        if ($section_attendance_taken_event === null) {
            throw new \InvalidArgumentException('Missing the required parameter $section_attendance_taken_event when calling postSectionAttendanceTakenEvents');
        }
  
        // parse inputs
        $resourcePath = "/sectionAttendanceTakenEvents";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($section_attendance_taken_event)) {
            $_tempBody = $section_attendance_taken_event;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 500:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\WebServiceError', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * putSectionAttendanceTakenEvent
     *
     * Updates or creates a resource based on the resource identifier.
     *
     * @param string $id A resource identifier specifying the resource to be updated. (required)
     * @param \Swagger\Client\Model\SectionAttendanceTakenEvent $section_attendance_taken_event The JSON representation of the \&quot;sectionAttendanceTakenEvent\&quot; resource to be updated. (required)
     * @param string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function putSectionAttendanceTakenEvent($id, $section_attendance_taken_event, $if_match = null)
    {
        list($response, $statusCode, $httpHeader) = $this->putSectionAttendanceTakenEventWithHttpInfo ($id, $section_attendance_taken_event, $if_match);
        return $response; 
    }


    /**
     * putSectionAttendanceTakenEventWithHttpInfo
     *
     * Updates or creates a resource based on the resource identifier.
     *
     * @param string $id A resource identifier specifying the resource to be updated. (required)
     * @param \Swagger\Client\Model\SectionAttendanceTakenEvent $section_attendance_taken_event The JSON representation of the \&quot;sectionAttendanceTakenEvent\&quot; resource to be updated. (required)
     * @param string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function putSectionAttendanceTakenEventWithHttpInfo($id, $section_attendance_taken_event, $if_match = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling putSectionAttendanceTakenEvent');
        }
        // verify the required parameter 'section_attendance_taken_event' is set
        if ($section_attendance_taken_event === null) {
            throw new \InvalidArgumentException('Missing the required parameter $section_attendance_taken_event when calling putSectionAttendanceTakenEvent');
        }
  
        // parse inputs
        $resourcePath = "/sectionAttendanceTakenEvents/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        
        if ($if_match !== null) {
            $headerParams['If-Match'] = $this->apiClient->getSerializer()->toHeaderValue($if_match);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($section_attendance_taken_event)) {
            $_tempBody = $section_attendance_taken_event;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 500:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\WebServiceError', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
