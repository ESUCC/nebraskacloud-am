<?php
/**
 * LeaveEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * LeaveEvent Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LeaveEvent implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'staff_reference' => '\Swagger\Client\Model\StaffReference',
        'event_date' => '\\DateTime',
        'category_type' => 'string',
        'reason' => 'string',
        'hours_on_leave' => 'Number',
        'substitute_assigned' => 'bool',
        '_etag' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'staff_reference' => 'staffReference',
        'event_date' => 'eventDate',
        'category_type' => 'categoryType',
        'reason' => 'reason',
        'hours_on_leave' => 'hoursOnLeave',
        'substitute_assigned' => 'substituteAssigned',
        '_etag' => '_etag'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'staff_reference' => 'setStaffReference',
        'event_date' => 'setEventDate',
        'category_type' => 'setCategoryType',
        'reason' => 'setReason',
        'hours_on_leave' => 'setHoursOnLeave',
        'substitute_assigned' => 'setSubstituteAssigned',
        '_etag' => 'setEtag'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'staff_reference' => 'getStaffReference',
        'event_date' => 'getEventDate',
        'category_type' => 'getCategoryType',
        'reason' => 'getReason',
        'hours_on_leave' => 'getHoursOnLeave',
        'substitute_assigned' => 'getSubstituteAssigned',
        '_etag' => 'getEtag'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $staff_reference A reference to the related Staff resource.
      * @var \Swagger\Client\Model\StaffReference
      */
    protected $staff_reference;
    
    /**
      * $event_date Date for this leave event.
      * @var \\DateTime
      */
    protected $event_date;
    
    /**
      * $category_type The code describing the type of leave taken, for example:  Sick  Personal  Vacation
      * @var string
      */
    protected $category_type;
    
    /**
      * $reason Expanded reason for the staff leave.
      * @var string
      */
    protected $reason;
    
    /**
      * $hours_on_leave The hours the staff was absent, if not the entire working day.
      * @var Number
      */
    protected $hours_on_leave;
    
    /**
      * $substitute_assigned Indicator of whether a substitute was assigned during the period of staff leave.
      * @var bool
      */
    protected $substitute_assigned;
    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->staff_reference = $data["staff_reference"];
            $this->event_date = $data["event_date"];
            $this->category_type = $data["category_type"];
            $this->reason = $data["reason"];
            $this->hours_on_leave = $data["hours_on_leave"];
            $this->substitute_assigned = $data["substitute_assigned"];
            $this->_etag = $data["_etag"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets staff_reference
     * @return \Swagger\Client\Model\StaffReference
     */
    public function getStaffReference()
    {
        return $this->staff_reference;
    }
  
    /**
     * Sets staff_reference
     * @param \Swagger\Client\Model\StaffReference $staff_reference A reference to the related Staff resource.
     * @return $this
     */
    public function setStaffReference($staff_reference)
    {
        
        $this->staff_reference = $staff_reference;
        return $this;
    }
    
    /**
     * Gets event_date
     * @return \\DateTime
     */
    public function getEventDate()
    {
        return $this->event_date;
    }
  
    /**
     * Sets event_date
     * @param \\DateTime $event_date Date for this leave event.
     * @return $this
     */
    public function setEventDate($event_date)
    {
        
        $this->event_date = $event_date;
        return $this;
    }
    
    /**
     * Gets category_type
     * @return string
     */
    public function getCategoryType()
    {
        return $this->category_type;
    }
  
    /**
     * Sets category_type
     * @param string $category_type The code describing the type of leave taken, for example:  Sick  Personal  Vacation
     * @return $this
     */
    public function setCategoryType($category_type)
    {
        
        $this->category_type = $category_type;
        return $this;
    }
    
    /**
     * Gets reason
     * @return string
     */
    public function getReason()
    {
        return $this->reason;
    }
  
    /**
     * Sets reason
     * @param string $reason Expanded reason for the staff leave.
     * @return $this
     */
    public function setReason($reason)
    {
        
        $this->reason = $reason;
        return $this;
    }
    
    /**
     * Gets hours_on_leave
     * @return Number
     */
    public function getHoursOnLeave()
    {
        return $this->hours_on_leave;
    }
  
    /**
     * Sets hours_on_leave
     * @param Number $hours_on_leave The hours the staff was absent, if not the entire working day.
     * @return $this
     */
    public function setHoursOnLeave($hours_on_leave)
    {
        
        $this->hours_on_leave = $hours_on_leave;
        return $this;
    }
    
    /**
     * Gets substitute_assigned
     * @return bool
     */
    public function getSubstituteAssigned()
    {
        return $this->substitute_assigned;
    }
  
    /**
     * Sets substitute_assigned
     * @param bool $substitute_assigned Indicator of whether a substitute was assigned during the period of staff leave.
     * @return $this
     */
    public function setSubstituteAssigned($substitute_assigned)
    {
        
        $this->substitute_assigned = $substitute_assigned;
        return $this;
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
