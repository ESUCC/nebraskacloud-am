<?php
/**
 * StaffCredential
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * StaffCredential Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StaffCredential implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'credential_field_descriptor' => 'string',
        'credential_type' => 'string',
        'level_descriptor' => 'string',
        'teaching_credential_descriptor' => 'string',
        'credential_issuance_date' => '\\DateTime',
        'credential_expiration_date' => '\\DateTime',
        'teaching_credential_basis_type' => 'string',
        'state_of_issue_state_abbreviation_type' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'credential_field_descriptor' => 'credentialFieldDescriptor',
        'credential_type' => 'credentialType',
        'level_descriptor' => 'levelDescriptor',
        'teaching_credential_descriptor' => 'teachingCredentialDescriptor',
        'credential_issuance_date' => 'credentialIssuanceDate',
        'credential_expiration_date' => 'credentialExpirationDate',
        'teaching_credential_basis_type' => 'teachingCredentialBasisType',
        'state_of_issue_state_abbreviation_type' => 'stateOfIssueStateAbbreviationType'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'credential_field_descriptor' => 'setCredentialFieldDescriptor',
        'credential_type' => 'setCredentialType',
        'level_descriptor' => 'setLevelDescriptor',
        'teaching_credential_descriptor' => 'setTeachingCredentialDescriptor',
        'credential_issuance_date' => 'setCredentialIssuanceDate',
        'credential_expiration_date' => 'setCredentialExpirationDate',
        'teaching_credential_basis_type' => 'setTeachingCredentialBasisType',
        'state_of_issue_state_abbreviation_type' => 'setStateOfIssueStateAbbreviationType'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'credential_field_descriptor' => 'getCredentialFieldDescriptor',
        'credential_type' => 'getCredentialType',
        'level_descriptor' => 'getLevelDescriptor',
        'teaching_credential_descriptor' => 'getTeachingCredentialDescriptor',
        'credential_issuance_date' => 'getCredentialIssuanceDate',
        'credential_expiration_date' => 'getCredentialExpirationDate',
        'teaching_credential_basis_type' => 'getTeachingCredentialBasisType',
        'state_of_issue_state_abbreviation_type' => 'getStateOfIssueStateAbbreviationType'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $credential_field_descriptor The field of certification for the certificate (e.g., Mathematics, Music)
      * @var string
      */
    protected $credential_field_descriptor;
    
    /**
      * $credential_type An indication of the category of credential an individual holds.
      * @var string
      */
    protected $credential_type;
    
    /**
      * $level_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $level_descriptor;
    
    /**
      * $teaching_credential_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $teaching_credential_descriptor;
    
    /**
      * $credential_issuance_date The month, day, and year on which an active credential was issued to an individual.
      * @var \\DateTime
      */
    protected $credential_issuance_date;
    
    /**
      * $credential_expiration_date The month, day, and year on which an active credential held by an individual will expire.
      * @var \\DateTime
      */
    protected $credential_expiration_date;
    
    /**
      * $teaching_credential_basis_type An indication of the pre-determined criteria for granting the teaching credential that an individual holds.
      * @var string
      */
    protected $teaching_credential_basis_type;
    
    /**
      * $state_of_issue_state_abbreviation_type Key for StateAbbreviationType
      * @var string
      */
    protected $state_of_issue_state_abbreviation_type;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->credential_field_descriptor = $data["credential_field_descriptor"];
            $this->credential_type = $data["credential_type"];
            $this->level_descriptor = $data["level_descriptor"];
            $this->teaching_credential_descriptor = $data["teaching_credential_descriptor"];
            $this->credential_issuance_date = $data["credential_issuance_date"];
            $this->credential_expiration_date = $data["credential_expiration_date"];
            $this->teaching_credential_basis_type = $data["teaching_credential_basis_type"];
            $this->state_of_issue_state_abbreviation_type = $data["state_of_issue_state_abbreviation_type"];
        }
    }
    
    /**
     * Gets credential_field_descriptor
     * @return string
     */
    public function getCredentialFieldDescriptor()
    {
        return $this->credential_field_descriptor;
    }
  
    /**
     * Sets credential_field_descriptor
     * @param string $credential_field_descriptor The field of certification for the certificate (e.g., Mathematics, Music)
     * @return $this
     */
    public function setCredentialFieldDescriptor($credential_field_descriptor)
    {
        
        $this->credential_field_descriptor = $credential_field_descriptor;
        return $this;
    }
    
    /**
     * Gets credential_type
     * @return string
     */
    public function getCredentialType()
    {
        return $this->credential_type;
    }
  
    /**
     * Sets credential_type
     * @param string $credential_type An indication of the category of credential an individual holds.
     * @return $this
     */
    public function setCredentialType($credential_type)
    {
        
        $this->credential_type = $credential_type;
        return $this;
    }
    
    /**
     * Gets level_descriptor
     * @return string
     */
    public function getLevelDescriptor()
    {
        return $this->level_descriptor;
    }
  
    /**
     * Sets level_descriptor
     * @param string $level_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setLevelDescriptor($level_descriptor)
    {
        
        $this->level_descriptor = $level_descriptor;
        return $this;
    }
    
    /**
     * Gets teaching_credential_descriptor
     * @return string
     */
    public function getTeachingCredentialDescriptor()
    {
        return $this->teaching_credential_descriptor;
    }
  
    /**
     * Sets teaching_credential_descriptor
     * @param string $teaching_credential_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setTeachingCredentialDescriptor($teaching_credential_descriptor)
    {
        
        $this->teaching_credential_descriptor = $teaching_credential_descriptor;
        return $this;
    }
    
    /**
     * Gets credential_issuance_date
     * @return \\DateTime
     */
    public function getCredentialIssuanceDate()
    {
        return $this->credential_issuance_date;
    }
  
    /**
     * Sets credential_issuance_date
     * @param \\DateTime $credential_issuance_date The month, day, and year on which an active credential was issued to an individual.
     * @return $this
     */
    public function setCredentialIssuanceDate($credential_issuance_date)
    {
        
        $this->credential_issuance_date = $credential_issuance_date;
        return $this;
    }
    
    /**
     * Gets credential_expiration_date
     * @return \\DateTime
     */
    public function getCredentialExpirationDate()
    {
        return $this->credential_expiration_date;
    }
  
    /**
     * Sets credential_expiration_date
     * @param \\DateTime $credential_expiration_date The month, day, and year on which an active credential held by an individual will expire.
     * @return $this
     */
    public function setCredentialExpirationDate($credential_expiration_date)
    {
        
        $this->credential_expiration_date = $credential_expiration_date;
        return $this;
    }
    
    /**
     * Gets teaching_credential_basis_type
     * @return string
     */
    public function getTeachingCredentialBasisType()
    {
        return $this->teaching_credential_basis_type;
    }
  
    /**
     * Sets teaching_credential_basis_type
     * @param string $teaching_credential_basis_type An indication of the pre-determined criteria for granting the teaching credential that an individual holds.
     * @return $this
     */
    public function setTeachingCredentialBasisType($teaching_credential_basis_type)
    {
        
        $this->teaching_credential_basis_type = $teaching_credential_basis_type;
        return $this;
    }
    
    /**
     * Gets state_of_issue_state_abbreviation_type
     * @return string
     */
    public function getStateOfIssueStateAbbreviationType()
    {
        return $this->state_of_issue_state_abbreviation_type;
    }
  
    /**
     * Sets state_of_issue_state_abbreviation_type
     * @param string $state_of_issue_state_abbreviation_type Key for StateAbbreviationType
     * @return $this
     */
    public function setStateOfIssueStateAbbreviationType($state_of_issue_state_abbreviation_type)
    {
        
        $this->state_of_issue_state_abbreviation_type = $state_of_issue_state_abbreviation_type;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
