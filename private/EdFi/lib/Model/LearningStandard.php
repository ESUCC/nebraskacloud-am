<?php
/**
 * LearningStandard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * LearningStandard Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearningStandard implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'parent_learning_standard_reference' => '\Swagger\Client\Model\LearningStandardReference',
        'learning_standard_id' => 'string',
        'description' => 'string',
        'item_code' => 'string',
        'uri' => 'string',
        'academic_subject_descriptor' => 'string',
        'course_title' => 'string',
        'success_criteria' => 'string',
        'namespace' => 'string',
        'content_standard' => '\Swagger\Client\Model\LearningStandardContentStandard',
        'grade_levels' => '\Swagger\Client\Model\LearningStandardGradeLevel[]',
        'identification_codes' => '\Swagger\Client\Model\LearningStandardIdentificationCode[]',
        'prerequisite_learning_standards' => '\Swagger\Client\Model\LearningStandardPrerequisiteLearningStandard[]',
        '_etag' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'parent_learning_standard_reference' => 'parentLearningStandardReference',
        'learning_standard_id' => 'learningStandardId',
        'description' => 'description',
        'item_code' => 'itemCode',
        'uri' => 'uri',
        'academic_subject_descriptor' => 'academicSubjectDescriptor',
        'course_title' => 'courseTitle',
        'success_criteria' => 'successCriteria',
        'namespace' => 'namespace',
        'content_standard' => 'contentStandard',
        'grade_levels' => 'gradeLevels',
        'identification_codes' => 'identificationCodes',
        'prerequisite_learning_standards' => 'prerequisiteLearningStandards',
        '_etag' => '_etag'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'parent_learning_standard_reference' => 'setParentLearningStandardReference',
        'learning_standard_id' => 'setLearningStandardId',
        'description' => 'setDescription',
        'item_code' => 'setItemCode',
        'uri' => 'setUri',
        'academic_subject_descriptor' => 'setAcademicSubjectDescriptor',
        'course_title' => 'setCourseTitle',
        'success_criteria' => 'setSuccessCriteria',
        'namespace' => 'setNamespace',
        'content_standard' => 'setContentStandard',
        'grade_levels' => 'setGradeLevels',
        'identification_codes' => 'setIdentificationCodes',
        'prerequisite_learning_standards' => 'setPrerequisiteLearningStandards',
        '_etag' => 'setEtag'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'parent_learning_standard_reference' => 'getParentLearningStandardReference',
        'learning_standard_id' => 'getLearningStandardId',
        'description' => 'getDescription',
        'item_code' => 'getItemCode',
        'uri' => 'getUri',
        'academic_subject_descriptor' => 'getAcademicSubjectDescriptor',
        'course_title' => 'getCourseTitle',
        'success_criteria' => 'getSuccessCriteria',
        'namespace' => 'getNamespace',
        'content_standard' => 'getContentStandard',
        'grade_levels' => 'getGradeLevels',
        'identification_codes' => 'getIdentificationCodes',
        'prerequisite_learning_standards' => 'getPrerequisiteLearningStandards',
        '_etag' => 'getEtag'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $parent_learning_standard_reference A reference to the related LearningStandard resource.
      * @var \Swagger\Client\Model\LearningStandardReference
      */
    protected $parent_learning_standard_reference;
    
    /**
      * $learning_standard_id A unique number or alphanumeric code assigned to a Learning Standard.
      * @var string
      */
    protected $learning_standard_id;
    
    /**
      * $description A detailed description of the entity.
      * @var string
      */
    protected $description;
    
    /**
      * $item_code A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).
      * @var string
      */
    protected $item_code;
    
    /**
      * $uri The public web site address (URL), file, or ftp locator.
      * @var string
      */
    protected $uri;
    
    /**
      * $academic_subject_descriptor Subject area for the learning standard.
      * @var string
      */
    protected $academic_subject_descriptor;
    
    /**
      * $course_title The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
      * @var string
      */
    protected $course_title;
    
    /**
      * $success_criteria One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard.
      * @var string
      */
    protected $success_criteria;
    
    /**
      * $namespace Namespace for the LearningStandard.
      * @var string
      */
    protected $namespace;
    
    /**
      * $content_standard The Content Standard from which the Learning Standard was derived.
      * @var \Swagger\Client\Model\LearningStandardContentStandard
      */
    protected $content_standard;
    
    /**
      * $grade_levels An unordered collection of learningStandardGradeLevels.  
      * @var \Swagger\Client\Model\LearningStandardGradeLevel[]
      */
    protected $grade_levels;
    
    /**
      * $identification_codes An unordered collection of learningStandardIdentificationCodes.  A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning Standard.
      * @var \Swagger\Client\Model\LearningStandardIdentificationCode[]
      */
    protected $identification_codes;
    
    /**
      * $prerequisite_learning_standards An unordered collection of learningStandardPrerequisiteLearningStandards.  
      * @var \Swagger\Client\Model\LearningStandardPrerequisiteLearningStandard[]
      */
    protected $prerequisite_learning_standards;
    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->parent_learning_standard_reference = $data["parent_learning_standard_reference"];
            $this->learning_standard_id = $data["learning_standard_id"];
            $this->description = $data["description"];
            $this->item_code = $data["item_code"];
            $this->uri = $data["uri"];
            $this->academic_subject_descriptor = $data["academic_subject_descriptor"];
            $this->course_title = $data["course_title"];
            $this->success_criteria = $data["success_criteria"];
            $this->namespace = $data["namespace"];
            $this->content_standard = $data["content_standard"];
            $this->grade_levels = $data["grade_levels"];
            $this->identification_codes = $data["identification_codes"];
            $this->prerequisite_learning_standards = $data["prerequisite_learning_standards"];
            $this->_etag = $data["_etag"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets parent_learning_standard_reference
     * @return \Swagger\Client\Model\LearningStandardReference
     */
    public function getParentLearningStandardReference()
    {
        return $this->parent_learning_standard_reference;
    }
  
    /**
     * Sets parent_learning_standard_reference
     * @param \Swagger\Client\Model\LearningStandardReference $parent_learning_standard_reference A reference to the related LearningStandard resource.
     * @return $this
     */
    public function setParentLearningStandardReference($parent_learning_standard_reference)
    {
        
        $this->parent_learning_standard_reference = $parent_learning_standard_reference;
        return $this;
    }
    
    /**
     * Gets learning_standard_id
     * @return string
     */
    public function getLearningStandardId()
    {
        return $this->learning_standard_id;
    }
  
    /**
     * Sets learning_standard_id
     * @param string $learning_standard_id A unique number or alphanumeric code assigned to a Learning Standard.
     * @return $this
     */
    public function setLearningStandardId($learning_standard_id)
    {
        
        $this->learning_standard_id = $learning_standard_id;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description A detailed description of the entity.
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets item_code
     * @return string
     */
    public function getItemCode()
    {
        return $this->item_code;
    }
  
    /**
     * Sets item_code
     * @param string $item_code A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).
     * @return $this
     */
    public function setItemCode($item_code)
    {
        
        $this->item_code = $item_code;
        return $this;
    }
    
    /**
     * Gets uri
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }
  
    /**
     * Sets uri
     * @param string $uri The public web site address (URL), file, or ftp locator.
     * @return $this
     */
    public function setUri($uri)
    {
        
        $this->uri = $uri;
        return $this;
    }
    
    /**
     * Gets academic_subject_descriptor
     * @return string
     */
    public function getAcademicSubjectDescriptor()
    {
        return $this->academic_subject_descriptor;
    }
  
    /**
     * Sets academic_subject_descriptor
     * @param string $academic_subject_descriptor Subject area for the learning standard.
     * @return $this
     */
    public function setAcademicSubjectDescriptor($academic_subject_descriptor)
    {
        
        $this->academic_subject_descriptor = $academic_subject_descriptor;
        return $this;
    }
    
    /**
     * Gets course_title
     * @return string
     */
    public function getCourseTitle()
    {
        return $this->course_title;
    }
  
    /**
     * Sets course_title
     * @param string $course_title The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
     * @return $this
     */
    public function setCourseTitle($course_title)
    {
        
        $this->course_title = $course_title;
        return $this;
    }
    
    /**
     * Gets success_criteria
     * @return string
     */
    public function getSuccessCriteria()
    {
        return $this->success_criteria;
    }
  
    /**
     * Sets success_criteria
     * @param string $success_criteria One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard.
     * @return $this
     */
    public function setSuccessCriteria($success_criteria)
    {
        
        $this->success_criteria = $success_criteria;
        return $this;
    }
    
    /**
     * Gets namespace
     * @return string
     */
    public function getNamespace()
    {
        return $this->namespace;
    }
  
    /**
     * Sets namespace
     * @param string $namespace Namespace for the LearningStandard.
     * @return $this
     */
    public function setNamespace($namespace)
    {
        
        $this->namespace = $namespace;
        return $this;
    }
    
    /**
     * Gets content_standard
     * @return \Swagger\Client\Model\LearningStandardContentStandard
     */
    public function getContentStandard()
    {
        return $this->content_standard;
    }
  
    /**
     * Sets content_standard
     * @param \Swagger\Client\Model\LearningStandardContentStandard $content_standard The Content Standard from which the Learning Standard was derived.
     * @return $this
     */
    public function setContentStandard($content_standard)
    {
        
        $this->content_standard = $content_standard;
        return $this;
    }
    
    /**
     * Gets grade_levels
     * @return \Swagger\Client\Model\LearningStandardGradeLevel[]
     */
    public function getGradeLevels()
    {
        return $this->grade_levels;
    }
  
    /**
     * Sets grade_levels
     * @param \Swagger\Client\Model\LearningStandardGradeLevel[] $grade_levels An unordered collection of learningStandardGradeLevels.  
     * @return $this
     */
    public function setGradeLevels($grade_levels)
    {
        
        $this->grade_levels = $grade_levels;
        return $this;
    }
    
    /**
     * Gets identification_codes
     * @return \Swagger\Client\Model\LearningStandardIdentificationCode[]
     */
    public function getIdentificationCodes()
    {
        return $this->identification_codes;
    }
  
    /**
     * Sets identification_codes
     * @param \Swagger\Client\Model\LearningStandardIdentificationCode[] $identification_codes An unordered collection of learningStandardIdentificationCodes.  A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning Standard.
     * @return $this
     */
    public function setIdentificationCodes($identification_codes)
    {
        
        $this->identification_codes = $identification_codes;
        return $this;
    }
    
    /**
     * Gets prerequisite_learning_standards
     * @return \Swagger\Client\Model\LearningStandardPrerequisiteLearningStandard[]
     */
    public function getPrerequisiteLearningStandards()
    {
        return $this->prerequisite_learning_standards;
    }
  
    /**
     * Sets prerequisite_learning_standards
     * @param \Swagger\Client\Model\LearningStandardPrerequisiteLearningStandard[] $prerequisite_learning_standards An unordered collection of learningStandardPrerequisiteLearningStandards.  
     * @return $this
     */
    public function setPrerequisiteLearningStandards($prerequisite_learning_standards)
    {
        
        $this->prerequisite_learning_standards = $prerequisite_learning_standards;
        return $this;
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
