<?php
/**
 * GraduationPlanCreditsByCourse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * GraduationPlanCreditsByCourse Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GraduationPlanCreditsByCourse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'course_set_name' => 'string',
        'credits' => 'Number',
        'credit_type' => 'string',
        'credit_conversion' => 'Number',
        'when_taken_grade_level_descriptor' => 'string',
        'courses' => '\Swagger\Client\Model\GraduationPlanCreditsByCourseCourse[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'course_set_name' => 'courseSetName',
        'credits' => 'credits',
        'credit_type' => 'creditType',
        'credit_conversion' => 'creditConversion',
        'when_taken_grade_level_descriptor' => 'whenTakenGradeLevelDescriptor',
        'courses' => 'courses'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'course_set_name' => 'setCourseSetName',
        'credits' => 'setCredits',
        'credit_type' => 'setCreditType',
        'credit_conversion' => 'setCreditConversion',
        'when_taken_grade_level_descriptor' => 'setWhenTakenGradeLevelDescriptor',
        'courses' => 'setCourses'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'course_set_name' => 'getCourseSetName',
        'credits' => 'getCredits',
        'credit_type' => 'getCreditType',
        'credit_conversion' => 'getCreditConversion',
        'when_taken_grade_level_descriptor' => 'getWhenTakenGradeLevelDescriptor',
        'courses' => 'getCourses'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $course_set_name Identifying name given to a collection of courses.
      * @var string
      */
    protected $course_set_name;
    
    /**
      * $credits The value of credits or units of value awarded for the completion of a course.
      * @var Number
      */
    protected $credits;
    
    /**
      * $credit_type Key for Credit
      * @var string
      */
    protected $credit_type;
    
    /**
      * $credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
      * @var Number
      */
    protected $credit_conversion;
    
    /**
      * $when_taken_grade_level_descriptor The grade level when the student is planned to take the course.
      * @var string
      */
    protected $when_taken_grade_level_descriptor;
    
    /**
      * $courses An unordered collection of graduationPlanCreditsByCourseCourses.  
      * @var \Swagger\Client\Model\GraduationPlanCreditsByCourseCourse[]
      */
    protected $courses;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->course_set_name = $data["course_set_name"];
            $this->credits = $data["credits"];
            $this->credit_type = $data["credit_type"];
            $this->credit_conversion = $data["credit_conversion"];
            $this->when_taken_grade_level_descriptor = $data["when_taken_grade_level_descriptor"];
            $this->courses = $data["courses"];
        }
    }
    
    /**
     * Gets course_set_name
     * @return string
     */
    public function getCourseSetName()
    {
        return $this->course_set_name;
    }
  
    /**
     * Sets course_set_name
     * @param string $course_set_name Identifying name given to a collection of courses.
     * @return $this
     */
    public function setCourseSetName($course_set_name)
    {
        
        $this->course_set_name = $course_set_name;
        return $this;
    }
    
    /**
     * Gets credits
     * @return Number
     */
    public function getCredits()
    {
        return $this->credits;
    }
  
    /**
     * Sets credits
     * @param Number $credits The value of credits or units of value awarded for the completion of a course.
     * @return $this
     */
    public function setCredits($credits)
    {
        
        $this->credits = $credits;
        return $this;
    }
    
    /**
     * Gets credit_type
     * @return string
     */
    public function getCreditType()
    {
        return $this->credit_type;
    }
  
    /**
     * Sets credit_type
     * @param string $credit_type Key for Credit
     * @return $this
     */
    public function setCreditType($credit_type)
    {
        
        $this->credit_type = $credit_type;
        return $this;
    }
    
    /**
     * Gets credit_conversion
     * @return Number
     */
    public function getCreditConversion()
    {
        return $this->credit_conversion;
    }
  
    /**
     * Sets credit_conversion
     * @param Number $credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     * @return $this
     */
    public function setCreditConversion($credit_conversion)
    {
        
        $this->credit_conversion = $credit_conversion;
        return $this;
    }
    
    /**
     * Gets when_taken_grade_level_descriptor
     * @return string
     */
    public function getWhenTakenGradeLevelDescriptor()
    {
        return $this->when_taken_grade_level_descriptor;
    }
  
    /**
     * Sets when_taken_grade_level_descriptor
     * @param string $when_taken_grade_level_descriptor The grade level when the student is planned to take the course.
     * @return $this
     */
    public function setWhenTakenGradeLevelDescriptor($when_taken_grade_level_descriptor)
    {
        
        $this->when_taken_grade_level_descriptor = $when_taken_grade_level_descriptor;
        return $this;
    }
    
    /**
     * Gets courses
     * @return \Swagger\Client\Model\GraduationPlanCreditsByCourseCourse[]
     */
    public function getCourses()
    {
        return $this->courses;
    }
  
    /**
     * Sets courses
     * @param \Swagger\Client\Model\GraduationPlanCreditsByCourseCourse[] $courses An unordered collection of graduationPlanCreditsByCourseCourses.  
     * @return $this
     */
    public function setCourses($courses)
    {
        
        $this->courses = $courses;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
