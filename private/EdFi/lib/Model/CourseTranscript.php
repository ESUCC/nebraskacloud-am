<?php
/**
 * CourseTranscript
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * CourseTranscript Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CourseTranscript implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'course_reference' => '\Swagger\Client\Model\CourseReference',
        'school_reference' => '\Swagger\Client\Model\SchoolReference',
        'student_academic_record_reference' => '\Swagger\Client\Model\StudentAcademicRecordReference',
        'course_attempt_result_type' => 'string',
        'attempted_credit_type' => 'string',
        'attempted_credit_conversion' => 'Number',
        'attempted_credits' => 'Number',
        'earned_credit_type' => 'string',
        'earned_credit_conversion' => 'Number',
        'earned_credits' => 'Number',
        'when_taken_grade_level_descriptor' => 'string',
        'method_credit_earned_type' => 'string',
        'final_letter_grade_earned' => 'string',
        'final_numeric_grade_earned' => 'Number',
        'course_repeat_code_type' => 'string',
        'course_title' => 'string',
        'alternative_course_title' => 'string',
        'alternative_course_code' => 'string',
        'earned_additional_credits' => '\Swagger\Client\Model\CourseTranscriptEarnedAdditionalCredits[]',
        '_etag' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'course_reference' => 'courseReference',
        'school_reference' => 'schoolReference',
        'student_academic_record_reference' => 'studentAcademicRecordReference',
        'course_attempt_result_type' => 'courseAttemptResultType',
        'attempted_credit_type' => 'attemptedCreditType',
        'attempted_credit_conversion' => 'attemptedCreditConversion',
        'attempted_credits' => 'attemptedCredits',
        'earned_credit_type' => 'earnedCreditType',
        'earned_credit_conversion' => 'earnedCreditConversion',
        'earned_credits' => 'earnedCredits',
        'when_taken_grade_level_descriptor' => 'whenTakenGradeLevelDescriptor',
        'method_credit_earned_type' => 'methodCreditEarnedType',
        'final_letter_grade_earned' => 'finalLetterGradeEarned',
        'final_numeric_grade_earned' => 'finalNumericGradeEarned',
        'course_repeat_code_type' => 'courseRepeatCodeType',
        'course_title' => 'courseTitle',
        'alternative_course_title' => 'alternativeCourseTitle',
        'alternative_course_code' => 'alternativeCourseCode',
        'earned_additional_credits' => 'earnedAdditionalCredits',
        '_etag' => '_etag'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'course_reference' => 'setCourseReference',
        'school_reference' => 'setSchoolReference',
        'student_academic_record_reference' => 'setStudentAcademicRecordReference',
        'course_attempt_result_type' => 'setCourseAttemptResultType',
        'attempted_credit_type' => 'setAttemptedCreditType',
        'attempted_credit_conversion' => 'setAttemptedCreditConversion',
        'attempted_credits' => 'setAttemptedCredits',
        'earned_credit_type' => 'setEarnedCreditType',
        'earned_credit_conversion' => 'setEarnedCreditConversion',
        'earned_credits' => 'setEarnedCredits',
        'when_taken_grade_level_descriptor' => 'setWhenTakenGradeLevelDescriptor',
        'method_credit_earned_type' => 'setMethodCreditEarnedType',
        'final_letter_grade_earned' => 'setFinalLetterGradeEarned',
        'final_numeric_grade_earned' => 'setFinalNumericGradeEarned',
        'course_repeat_code_type' => 'setCourseRepeatCodeType',
        'course_title' => 'setCourseTitle',
        'alternative_course_title' => 'setAlternativeCourseTitle',
        'alternative_course_code' => 'setAlternativeCourseCode',
        'earned_additional_credits' => 'setEarnedAdditionalCredits',
        '_etag' => 'setEtag'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'course_reference' => 'getCourseReference',
        'school_reference' => 'getSchoolReference',
        'student_academic_record_reference' => 'getStudentAcademicRecordReference',
        'course_attempt_result_type' => 'getCourseAttemptResultType',
        'attempted_credit_type' => 'getAttemptedCreditType',
        'attempted_credit_conversion' => 'getAttemptedCreditConversion',
        'attempted_credits' => 'getAttemptedCredits',
        'earned_credit_type' => 'getEarnedCreditType',
        'earned_credit_conversion' => 'getEarnedCreditConversion',
        'earned_credits' => 'getEarnedCredits',
        'when_taken_grade_level_descriptor' => 'getWhenTakenGradeLevelDescriptor',
        'method_credit_earned_type' => 'getMethodCreditEarnedType',
        'final_letter_grade_earned' => 'getFinalLetterGradeEarned',
        'final_numeric_grade_earned' => 'getFinalNumericGradeEarned',
        'course_repeat_code_type' => 'getCourseRepeatCodeType',
        'course_title' => 'getCourseTitle',
        'alternative_course_title' => 'getAlternativeCourseTitle',
        'alternative_course_code' => 'getAlternativeCourseCode',
        'earned_additional_credits' => 'getEarnedAdditionalCredits',
        '_etag' => 'getEtag'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $course_reference A reference to the related Course resource.
      * @var \Swagger\Client\Model\CourseReference
      */
    protected $course_reference;
    
    /**
      * $school_reference A reference to the related School resource.
      * @var \Swagger\Client\Model\SchoolReference
      */
    protected $school_reference;
    
    /**
      * $student_academic_record_reference A reference to the related StudentAcademicRecord resource.
      * @var \Swagger\Client\Model\StudentAcademicRecordReference
      */
    protected $student_academic_record_reference;
    
    /**
      * $course_attempt_result_type The result from the student''s attempt to take the course, for example:  Pass  Fail  Incomplete  Withdrawn  Expelled
      * @var string
      */
    protected $course_attempt_result_type;
    
    /**
      * $attempted_credit_type Key for Credit
      * @var string
      */
    protected $attempted_credit_type;
    
    /**
      * $attempted_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
      * @var Number
      */
    protected $attempted_credit_conversion;
    
    /**
      * $attempted_credits The number of credits attempted for a course.
      * @var Number
      */
    protected $attempted_credits;
    
    /**
      * $earned_credit_type Key for Credit
      * @var string
      */
    protected $earned_credit_type;
    
    /**
      * $earned_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
      * @var Number
      */
    protected $earned_credit_conversion;
    
    /**
      * $earned_credits The number of credits awarded or earned for the course.
      * @var Number
      */
    protected $earned_credits;
    
    /**
      * $when_taken_grade_level_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.  
      * @var string
      */
    protected $when_taken_grade_level_descriptor;
    
    /**
      * $method_credit_earned_type The method the credits were earned, for example:  Classroom, Examination, Transfer
      * @var string
      */
    protected $method_credit_earned_type;
    
    /**
      * $final_letter_grade_earned The final indicator of student performance in a class as submitted by the instructor.
      * @var string
      */
    protected $final_letter_grade_earned;
    
    /**
      * $final_numeric_grade_earned The final indicator of student performance in a class as submitted by the instructor.
      * @var Number
      */
    protected $final_numeric_grade_earned;
    
    /**
      * $course_repeat_code_type Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student''s academic grade average.
      * @var string
      */
    protected $course_repeat_code_type;
    
    /**
      * $course_title The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
      * @var string
      */
    protected $course_title;
    
    /**
      * $alternative_course_title The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
      * @var string
      */
    protected $alternative_course_title;
    
    /**
      * $alternative_course_code The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.
      * @var string
      */
    protected $alternative_course_code;
    
    /**
      * $earned_additional_credits An unordered collection of courseTranscriptEarnedAdditionalCredits.  Additional credits or units of value awarded for the completion of a course (e.g., AP, IB, Dual Credits).
      * @var \Swagger\Client\Model\CourseTranscriptEarnedAdditionalCredits[]
      */
    protected $earned_additional_credits;
    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->course_reference = $data["course_reference"];
            $this->school_reference = $data["school_reference"];
            $this->student_academic_record_reference = $data["student_academic_record_reference"];
            $this->course_attempt_result_type = $data["course_attempt_result_type"];
            $this->attempted_credit_type = $data["attempted_credit_type"];
            $this->attempted_credit_conversion = $data["attempted_credit_conversion"];
            $this->attempted_credits = $data["attempted_credits"];
            $this->earned_credit_type = $data["earned_credit_type"];
            $this->earned_credit_conversion = $data["earned_credit_conversion"];
            $this->earned_credits = $data["earned_credits"];
            $this->when_taken_grade_level_descriptor = $data["when_taken_grade_level_descriptor"];
            $this->method_credit_earned_type = $data["method_credit_earned_type"];
            $this->final_letter_grade_earned = $data["final_letter_grade_earned"];
            $this->final_numeric_grade_earned = $data["final_numeric_grade_earned"];
            $this->course_repeat_code_type = $data["course_repeat_code_type"];
            $this->course_title = $data["course_title"];
            $this->alternative_course_title = $data["alternative_course_title"];
            $this->alternative_course_code = $data["alternative_course_code"];
            $this->earned_additional_credits = $data["earned_additional_credits"];
            $this->_etag = $data["_etag"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets course_reference
     * @return \Swagger\Client\Model\CourseReference
     */
    public function getCourseReference()
    {
        return $this->course_reference;
    }
  
    /**
     * Sets course_reference
     * @param \Swagger\Client\Model\CourseReference $course_reference A reference to the related Course resource.
     * @return $this
     */
    public function setCourseReference($course_reference)
    {
        
        $this->course_reference = $course_reference;
        return $this;
    }
    
    /**
     * Gets school_reference
     * @return \Swagger\Client\Model\SchoolReference
     */
    public function getSchoolReference()
    {
        return $this->school_reference;
    }
  
    /**
     * Sets school_reference
     * @param \Swagger\Client\Model\SchoolReference $school_reference A reference to the related School resource.
     * @return $this
     */
    public function setSchoolReference($school_reference)
    {
        
        $this->school_reference = $school_reference;
        return $this;
    }
    
    /**
     * Gets student_academic_record_reference
     * @return \Swagger\Client\Model\StudentAcademicRecordReference
     */
    public function getStudentAcademicRecordReference()
    {
        return $this->student_academic_record_reference;
    }
  
    /**
     * Sets student_academic_record_reference
     * @param \Swagger\Client\Model\StudentAcademicRecordReference $student_academic_record_reference A reference to the related StudentAcademicRecord resource.
     * @return $this
     */
    public function setStudentAcademicRecordReference($student_academic_record_reference)
    {
        
        $this->student_academic_record_reference = $student_academic_record_reference;
        return $this;
    }
    
    /**
     * Gets course_attempt_result_type
     * @return string
     */
    public function getCourseAttemptResultType()
    {
        return $this->course_attempt_result_type;
    }
  
    /**
     * Sets course_attempt_result_type
     * @param string $course_attempt_result_type The result from the student''s attempt to take the course, for example:  Pass  Fail  Incomplete  Withdrawn  Expelled
     * @return $this
     */
    public function setCourseAttemptResultType($course_attempt_result_type)
    {
        
        $this->course_attempt_result_type = $course_attempt_result_type;
        return $this;
    }
    
    /**
     * Gets attempted_credit_type
     * @return string
     */
    public function getAttemptedCreditType()
    {
        return $this->attempted_credit_type;
    }
  
    /**
     * Sets attempted_credit_type
     * @param string $attempted_credit_type Key for Credit
     * @return $this
     */
    public function setAttemptedCreditType($attempted_credit_type)
    {
        
        $this->attempted_credit_type = $attempted_credit_type;
        return $this;
    }
    
    /**
     * Gets attempted_credit_conversion
     * @return Number
     */
    public function getAttemptedCreditConversion()
    {
        return $this->attempted_credit_conversion;
    }
  
    /**
     * Sets attempted_credit_conversion
     * @param Number $attempted_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     * @return $this
     */
    public function setAttemptedCreditConversion($attempted_credit_conversion)
    {
        
        $this->attempted_credit_conversion = $attempted_credit_conversion;
        return $this;
    }
    
    /**
     * Gets attempted_credits
     * @return Number
     */
    public function getAttemptedCredits()
    {
        return $this->attempted_credits;
    }
  
    /**
     * Sets attempted_credits
     * @param Number $attempted_credits The number of credits attempted for a course.
     * @return $this
     */
    public function setAttemptedCredits($attempted_credits)
    {
        
        $this->attempted_credits = $attempted_credits;
        return $this;
    }
    
    /**
     * Gets earned_credit_type
     * @return string
     */
    public function getEarnedCreditType()
    {
        return $this->earned_credit_type;
    }
  
    /**
     * Sets earned_credit_type
     * @param string $earned_credit_type Key for Credit
     * @return $this
     */
    public function setEarnedCreditType($earned_credit_type)
    {
        
        $this->earned_credit_type = $earned_credit_type;
        return $this;
    }
    
    /**
     * Gets earned_credit_conversion
     * @return Number
     */
    public function getEarnedCreditConversion()
    {
        return $this->earned_credit_conversion;
    }
  
    /**
     * Sets earned_credit_conversion
     * @param Number $earned_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     * @return $this
     */
    public function setEarnedCreditConversion($earned_credit_conversion)
    {
        
        $this->earned_credit_conversion = $earned_credit_conversion;
        return $this;
    }
    
    /**
     * Gets earned_credits
     * @return Number
     */
    public function getEarnedCredits()
    {
        return $this->earned_credits;
    }
  
    /**
     * Sets earned_credits
     * @param Number $earned_credits The number of credits awarded or earned for the course.
     * @return $this
     */
    public function setEarnedCredits($earned_credits)
    {
        
        $this->earned_credits = $earned_credits;
        return $this;
    }
    
    /**
     * Gets when_taken_grade_level_descriptor
     * @return string
     */
    public function getWhenTakenGradeLevelDescriptor()
    {
        return $this->when_taken_grade_level_descriptor;
    }
  
    /**
     * Sets when_taken_grade_level_descriptor
     * @param string $when_taken_grade_level_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.  
     * @return $this
     */
    public function setWhenTakenGradeLevelDescriptor($when_taken_grade_level_descriptor)
    {
        
        $this->when_taken_grade_level_descriptor = $when_taken_grade_level_descriptor;
        return $this;
    }
    
    /**
     * Gets method_credit_earned_type
     * @return string
     */
    public function getMethodCreditEarnedType()
    {
        return $this->method_credit_earned_type;
    }
  
    /**
     * Sets method_credit_earned_type
     * @param string $method_credit_earned_type The method the credits were earned, for example:  Classroom, Examination, Transfer
     * @return $this
     */
    public function setMethodCreditEarnedType($method_credit_earned_type)
    {
        
        $this->method_credit_earned_type = $method_credit_earned_type;
        return $this;
    }
    
    /**
     * Gets final_letter_grade_earned
     * @return string
     */
    public function getFinalLetterGradeEarned()
    {
        return $this->final_letter_grade_earned;
    }
  
    /**
     * Sets final_letter_grade_earned
     * @param string $final_letter_grade_earned The final indicator of student performance in a class as submitted by the instructor.
     * @return $this
     */
    public function setFinalLetterGradeEarned($final_letter_grade_earned)
    {
        
        $this->final_letter_grade_earned = $final_letter_grade_earned;
        return $this;
    }
    
    /**
     * Gets final_numeric_grade_earned
     * @return Number
     */
    public function getFinalNumericGradeEarned()
    {
        return $this->final_numeric_grade_earned;
    }
  
    /**
     * Sets final_numeric_grade_earned
     * @param Number $final_numeric_grade_earned The final indicator of student performance in a class as submitted by the instructor.
     * @return $this
     */
    public function setFinalNumericGradeEarned($final_numeric_grade_earned)
    {
        
        $this->final_numeric_grade_earned = $final_numeric_grade_earned;
        return $this;
    }
    
    /**
     * Gets course_repeat_code_type
     * @return string
     */
    public function getCourseRepeatCodeType()
    {
        return $this->course_repeat_code_type;
    }
  
    /**
     * Sets course_repeat_code_type
     * @param string $course_repeat_code_type Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student''s academic grade average.
     * @return $this
     */
    public function setCourseRepeatCodeType($course_repeat_code_type)
    {
        
        $this->course_repeat_code_type = $course_repeat_code_type;
        return $this;
    }
    
    /**
     * Gets course_title
     * @return string
     */
    public function getCourseTitle()
    {
        return $this->course_title;
    }
  
    /**
     * Sets course_title
     * @param string $course_title The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
     * @return $this
     */
    public function setCourseTitle($course_title)
    {
        
        $this->course_title = $course_title;
        return $this;
    }
    
    /**
     * Gets alternative_course_title
     * @return string
     */
    public function getAlternativeCourseTitle()
    {
        return $this->alternative_course_title;
    }
  
    /**
     * Sets alternative_course_title
     * @param string $alternative_course_title The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
     * @return $this
     */
    public function setAlternativeCourseTitle($alternative_course_title)
    {
        
        $this->alternative_course_title = $alternative_course_title;
        return $this;
    }
    
    /**
     * Gets alternative_course_code
     * @return string
     */
    public function getAlternativeCourseCode()
    {
        return $this->alternative_course_code;
    }
  
    /**
     * Sets alternative_course_code
     * @param string $alternative_course_code The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.
     * @return $this
     */
    public function setAlternativeCourseCode($alternative_course_code)
    {
        
        $this->alternative_course_code = $alternative_course_code;
        return $this;
    }
    
    /**
     * Gets earned_additional_credits
     * @return \Swagger\Client\Model\CourseTranscriptEarnedAdditionalCredits[]
     */
    public function getEarnedAdditionalCredits()
    {
        return $this->earned_additional_credits;
    }
  
    /**
     * Sets earned_additional_credits
     * @param \Swagger\Client\Model\CourseTranscriptEarnedAdditionalCredits[] $earned_additional_credits An unordered collection of courseTranscriptEarnedAdditionalCredits.  Additional credits or units of value awarded for the completion of a course (e.g., AP, IB, Dual Credits).
     * @return $this
     */
    public function setEarnedAdditionalCredits($earned_additional_credits)
    {
        
        $this->earned_additional_credits = $earned_additional_credits;
        return $this;
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
