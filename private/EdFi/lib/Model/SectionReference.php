<?php
/**
 * SectionReference
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * SectionReference Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SectionReference implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'school_id' => 'int',
        'class_period_name' => 'string',
        'classroom_identification_code' => 'string',
        'local_course_code' => 'string',
        'term_descriptor' => 'string',
        'school_year' => 'int',
        'unique_section_code' => 'string',
        'sequence_of_course' => 'int',
        'link' => '\Swagger\Client\Model\Link'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'school_id' => 'schoolId',
        'class_period_name' => 'classPeriodName',
        'classroom_identification_code' => 'classroomIdentificationCode',
        'local_course_code' => 'localCourseCode',
        'term_descriptor' => 'termDescriptor',
        'school_year' => 'schoolYear',
        'unique_section_code' => 'uniqueSectionCode',
        'sequence_of_course' => 'sequenceOfCourse',
        'link' => 'link'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'school_id' => 'setSchoolId',
        'class_period_name' => 'setClassPeriodName',
        'classroom_identification_code' => 'setClassroomIdentificationCode',
        'local_course_code' => 'setLocalCourseCode',
        'term_descriptor' => 'setTermDescriptor',
        'school_year' => 'setSchoolYear',
        'unique_section_code' => 'setUniqueSectionCode',
        'sequence_of_course' => 'setSequenceOfCourse',
        'link' => 'setLink'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'school_id' => 'getSchoolId',
        'class_period_name' => 'getClassPeriodName',
        'classroom_identification_code' => 'getClassroomIdentificationCode',
        'local_course_code' => 'getLocalCourseCode',
        'term_descriptor' => 'getTermDescriptor',
        'school_year' => 'getSchoolYear',
        'unique_section_code' => 'getUniqueSectionCode',
        'sequence_of_course' => 'getSequenceOfCourse',
        'link' => 'getLink'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $school_id School Identity Column
      * @var int
      */
    protected $school_id;
    
    /**
      * $class_period_name An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period
      * @var string
      */
    protected $class_period_name;
    
    /**
      * $classroom_identification_code A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
      * @var string
      */
    protected $classroom_identification_code;
    
    /**
      * $local_course_code The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
      * @var string
      */
    protected $local_course_code;
    
    /**
      * $term_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $term_descriptor;
    
    /**
      * $school_year The identifier for the school year.
      * @var int
      */
    protected $school_year;
    
    /**
      * $unique_section_code A unique identifier for the Section, that is defined by the classroom, the subjects taught, and the instructors that are assigned.
      * @var string
      */
    protected $unique_section_code;
    
    /**
      * $sequence_of_course When a Section is part of a sequence of parts for a course, the number if the sequence. If the course has only one part, the value of this Section attribute should be 1.
      * @var int
      */
    protected $sequence_of_course;
    
    /**
      * $link Represents a hyperlink to the related section resource.
      * @var \Swagger\Client\Model\Link
      */
    protected $link;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->school_id = $data["school_id"];
            $this->class_period_name = $data["class_period_name"];
            $this->classroom_identification_code = $data["classroom_identification_code"];
            $this->local_course_code = $data["local_course_code"];
            $this->term_descriptor = $data["term_descriptor"];
            $this->school_year = $data["school_year"];
            $this->unique_section_code = $data["unique_section_code"];
            $this->sequence_of_course = $data["sequence_of_course"];
            $this->link = $data["link"];
        }
    }
    
    /**
     * Gets school_id
     * @return int
     */
    public function getSchoolId()
    {
        return $this->school_id;
    }
  
    /**
     * Sets school_id
     * @param int $school_id School Identity Column
     * @return $this
     */
    public function setSchoolId($school_id)
    {
        
        $this->school_id = $school_id;
        return $this;
    }
    
    /**
     * Gets class_period_name
     * @return string
     */
    public function getClassPeriodName()
    {
        return $this->class_period_name;
    }
  
    /**
     * Sets class_period_name
     * @param string $class_period_name An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period
     * @return $this
     */
    public function setClassPeriodName($class_period_name)
    {
        
        $this->class_period_name = $class_period_name;
        return $this;
    }
    
    /**
     * Gets classroom_identification_code
     * @return string
     */
    public function getClassroomIdentificationCode()
    {
        return $this->classroom_identification_code;
    }
  
    /**
     * Sets classroom_identification_code
     * @param string $classroom_identification_code A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
     * @return $this
     */
    public function setClassroomIdentificationCode($classroom_identification_code)
    {
        
        $this->classroom_identification_code = $classroom_identification_code;
        return $this;
    }
    
    /**
     * Gets local_course_code
     * @return string
     */
    public function getLocalCourseCode()
    {
        return $this->local_course_code;
    }
  
    /**
     * Sets local_course_code
     * @param string $local_course_code The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
     * @return $this
     */
    public function setLocalCourseCode($local_course_code)
    {
        
        $this->local_course_code = $local_course_code;
        return $this;
    }
    
    /**
     * Gets term_descriptor
     * @return string
     */
    public function getTermDescriptor()
    {
        return $this->term_descriptor;
    }
  
    /**
     * Sets term_descriptor
     * @param string $term_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setTermDescriptor($term_descriptor)
    {
        
        $this->term_descriptor = $term_descriptor;
        return $this;
    }
    
    /**
     * Gets school_year
     * @return int
     */
    public function getSchoolYear()
    {
        return $this->school_year;
    }
  
    /**
     * Sets school_year
     * @param int $school_year The identifier for the school year.
     * @return $this
     */
    public function setSchoolYear($school_year)
    {
        
        $this->school_year = $school_year;
        return $this;
    }
    
    /**
     * Gets unique_section_code
     * @return string
     */
    public function getUniqueSectionCode()
    {
        return $this->unique_section_code;
    }
  
    /**
     * Sets unique_section_code
     * @param string $unique_section_code A unique identifier for the Section, that is defined by the classroom, the subjects taught, and the instructors that are assigned.
     * @return $this
     */
    public function setUniqueSectionCode($unique_section_code)
    {
        
        $this->unique_section_code = $unique_section_code;
        return $this;
    }
    
    /**
     * Gets sequence_of_course
     * @return int
     */
    public function getSequenceOfCourse()
    {
        return $this->sequence_of_course;
    }
  
    /**
     * Sets sequence_of_course
     * @param int $sequence_of_course When a Section is part of a sequence of parts for a course, the number if the sequence. If the course has only one part, the value of this Section attribute should be 1.
     * @return $this
     */
    public function setSequenceOfCourse($sequence_of_course)
    {
        
        $this->sequence_of_course = $sequence_of_course;
        return $this;
    }
    
    /**
     * Gets link
     * @return \Swagger\Client\Model\Link
     */
    public function getLink()
    {
        return $this->link;
    }
  
    /**
     * Sets link
     * @param \Swagger\Client\Model\Link $link Represents a hyperlink to the related section resource.
     * @return $this
     */
    public function setLink($link)
    {
        
        $this->link = $link;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
