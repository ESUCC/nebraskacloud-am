<?php
/**
 * StudentAssessmentItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * StudentAssessmentItem Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StudentAssessmentItem implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'assessment_item_reference' => '\Swagger\Client\Model\AssessmentItemReference',
        'assessment_response' => 'string',
        'response_indicator_type' => 'string',
        'assessment_item_result_type' => 'string',
        'raw_score_result' => 'int',
        'time_assessed' => 'string',
        'descriptive_feedback' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'assessment_item_reference' => 'assessmentItemReference',
        'assessment_response' => 'assessmentResponse',
        'response_indicator_type' => 'responseIndicatorType',
        'assessment_item_result_type' => 'assessmentItemResultType',
        'raw_score_result' => 'rawScoreResult',
        'time_assessed' => 'timeAssessed',
        'descriptive_feedback' => 'descriptiveFeedback'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'assessment_item_reference' => 'setAssessmentItemReference',
        'assessment_response' => 'setAssessmentResponse',
        'response_indicator_type' => 'setResponseIndicatorType',
        'assessment_item_result_type' => 'setAssessmentItemResultType',
        'raw_score_result' => 'setRawScoreResult',
        'time_assessed' => 'setTimeAssessed',
        'descriptive_feedback' => 'setDescriptiveFeedback'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'assessment_item_reference' => 'getAssessmentItemReference',
        'assessment_response' => 'getAssessmentResponse',
        'response_indicator_type' => 'getResponseIndicatorType',
        'assessment_item_result_type' => 'getAssessmentItemResultType',
        'raw_score_result' => 'getRawScoreResult',
        'time_assessed' => 'getTimeAssessed',
        'descriptive_feedback' => 'getDescriptiveFeedback'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $assessment_item_reference A reference to the related AssessmentItem resource.
      * @var \Swagger\Client\Model\AssessmentItemReference
      */
    protected $assessment_item_reference;
    
    /**
      * $assessment_response A student's response to a stimulus on a test.
      * @var string
      */
    protected $assessment_response;
    
    /**
      * $response_indicator_type Indicator of the response.  For example:  Nonscorable response  Ineffective response  Effective response  Partial response  ...
      * @var string
      */
    protected $response_indicator_type;
    
    /**
      * $assessment_item_result_type The analyzed result of a student''s response to an assessment item.. For example:  Correct  Incorrect  Met standard  ...
      * @var string
      */
    protected $assessment_item_result_type;
    
    /**
      * $raw_score_result A meaningful raw score of the performance of an individual on an assessment item.
      * @var int
      */
    protected $raw_score_result;
    
    /**
      * $time_assessed The overall time a student actually spent during the AssessmentItem.
      * @var string
      */
    protected $time_assessed;
    
    /**
      * $descriptive_feedback The formative descriptive feedback that was given to a learner in response to the results from a scored/evaluated assessment item.
      * @var string
      */
    protected $descriptive_feedback;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->assessment_item_reference = $data["assessment_item_reference"];
            $this->assessment_response = $data["assessment_response"];
            $this->response_indicator_type = $data["response_indicator_type"];
            $this->assessment_item_result_type = $data["assessment_item_result_type"];
            $this->raw_score_result = $data["raw_score_result"];
            $this->time_assessed = $data["time_assessed"];
            $this->descriptive_feedback = $data["descriptive_feedback"];
        }
    }
    
    /**
     * Gets assessment_item_reference
     * @return \Swagger\Client\Model\AssessmentItemReference
     */
    public function getAssessmentItemReference()
    {
        return $this->assessment_item_reference;
    }
  
    /**
     * Sets assessment_item_reference
     * @param \Swagger\Client\Model\AssessmentItemReference $assessment_item_reference A reference to the related AssessmentItem resource.
     * @return $this
     */
    public function setAssessmentItemReference($assessment_item_reference)
    {
        
        $this->assessment_item_reference = $assessment_item_reference;
        return $this;
    }
    
    /**
     * Gets assessment_response
     * @return string
     */
    public function getAssessmentResponse()
    {
        return $this->assessment_response;
    }
  
    /**
     * Sets assessment_response
     * @param string $assessment_response A student's response to a stimulus on a test.
     * @return $this
     */
    public function setAssessmentResponse($assessment_response)
    {
        
        $this->assessment_response = $assessment_response;
        return $this;
    }
    
    /**
     * Gets response_indicator_type
     * @return string
     */
    public function getResponseIndicatorType()
    {
        return $this->response_indicator_type;
    }
  
    /**
     * Sets response_indicator_type
     * @param string $response_indicator_type Indicator of the response.  For example:  Nonscorable response  Ineffective response  Effective response  Partial response  ...
     * @return $this
     */
    public function setResponseIndicatorType($response_indicator_type)
    {
        
        $this->response_indicator_type = $response_indicator_type;
        return $this;
    }
    
    /**
     * Gets assessment_item_result_type
     * @return string
     */
    public function getAssessmentItemResultType()
    {
        return $this->assessment_item_result_type;
    }
  
    /**
     * Sets assessment_item_result_type
     * @param string $assessment_item_result_type The analyzed result of a student''s response to an assessment item.. For example:  Correct  Incorrect  Met standard  ...
     * @return $this
     */
    public function setAssessmentItemResultType($assessment_item_result_type)
    {
        
        $this->assessment_item_result_type = $assessment_item_result_type;
        return $this;
    }
    
    /**
     * Gets raw_score_result
     * @return int
     */
    public function getRawScoreResult()
    {
        return $this->raw_score_result;
    }
  
    /**
     * Sets raw_score_result
     * @param int $raw_score_result A meaningful raw score of the performance of an individual on an assessment item.
     * @return $this
     */
    public function setRawScoreResult($raw_score_result)
    {
        
        $this->raw_score_result = $raw_score_result;
        return $this;
    }
    
    /**
     * Gets time_assessed
     * @return string
     */
    public function getTimeAssessed()
    {
        return $this->time_assessed;
    }
  
    /**
     * Sets time_assessed
     * @param string $time_assessed The overall time a student actually spent during the AssessmentItem.
     * @return $this
     */
    public function setTimeAssessed($time_assessed)
    {
        
        $this->time_assessed = $time_assessed;
        return $this;
    }
    
    /**
     * Gets descriptive_feedback
     * @return string
     */
    public function getDescriptiveFeedback()
    {
        return $this->descriptive_feedback;
    }
  
    /**
     * Sets descriptive_feedback
     * @param string $descriptive_feedback The formative descriptive feedback that was given to a learner in response to the results from a scored/evaluated assessment item.
     * @return $this
     */
    public function setDescriptiveFeedback($descriptive_feedback)
    {
        
        $this->descriptive_feedback = $descriptive_feedback;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
