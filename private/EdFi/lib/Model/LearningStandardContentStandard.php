<?php
/**
 * LearningStandardContentStandard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * LearningStandardContentStandard Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearningStandardContentStandard implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'mandating_education_organization_reference' => '\Swagger\Client\Model\EducationOrganizationReference',
        'title' => 'string',
        'version' => 'string',
        'uri' => 'string',
        'publication_date' => '\\DateTime',
        'publication_year' => 'int',
        'publication_status_type' => 'string',
        'begin_date' => '\\DateTime',
        'end_date' => '\\DateTime',
        'authors' => '\Swagger\Client\Model\LearningStandardContentStandardAuthor[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'mandating_education_organization_reference' => 'mandatingEducationOrganizationReference',
        'title' => 'title',
        'version' => 'version',
        'uri' => 'uri',
        'publication_date' => 'publicationDate',
        'publication_year' => 'publicationYear',
        'publication_status_type' => 'publicationStatusType',
        'begin_date' => 'beginDate',
        'end_date' => 'endDate',
        'authors' => 'authors'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'mandating_education_organization_reference' => 'setMandatingEducationOrganizationReference',
        'title' => 'setTitle',
        'version' => 'setVersion',
        'uri' => 'setUri',
        'publication_date' => 'setPublicationDate',
        'publication_year' => 'setPublicationYear',
        'publication_status_type' => 'setPublicationStatusType',
        'begin_date' => 'setBeginDate',
        'end_date' => 'setEndDate',
        'authors' => 'setAuthors'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'mandating_education_organization_reference' => 'getMandatingEducationOrganizationReference',
        'title' => 'getTitle',
        'version' => 'getVersion',
        'uri' => 'getUri',
        'publication_date' => 'getPublicationDate',
        'publication_year' => 'getPublicationYear',
        'publication_status_type' => 'getPublicationStatusType',
        'begin_date' => 'getBeginDate',
        'end_date' => 'getEndDate',
        'authors' => 'getAuthors'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $mandating_education_organization_reference A reference to the related EducationOrganization resource.
      * @var \Swagger\Client\Model\EducationOrganizationReference
      */
    protected $mandating_education_organization_reference;
    
    /**
      * $title The name of the content standard, for example Common Core.
      * @var string
      */
    protected $title;
    
    /**
      * $version The version identifier for the content.
      * @var string
      */
    protected $version;
    
    /**
      * $uri The public web site address (URL), file, or ftp locator.
      * @var string
      */
    protected $uri;
    
    /**
      * $publication_date The date on which this content was first published.
      * @var \\DateTime
      */
    protected $publication_date;
    
    /**
      * $publication_year The year at which this content was first published.
      * @var int
      */
    protected $publication_year;
    
    /**
      * $publication_status_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $publication_status_type;
    
    /**
      * $begin_date The beginning of the period during which this learning standard document is intended for use.
      * @var \\DateTime
      */
    protected $begin_date;
    
    /**
      * $end_date The end of the period during which this learning standard document is intended for use.
      * @var \\DateTime
      */
    protected $end_date;
    
    /**
      * $authors An unordered collection of learningStandardContentStandardAuthors.  The person or organization chiefly responsible for the intellectual content of the standard.
      * @var \Swagger\Client\Model\LearningStandardContentStandardAuthor[]
      */
    protected $authors;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->mandating_education_organization_reference = $data["mandating_education_organization_reference"];
            $this->title = $data["title"];
            $this->version = $data["version"];
            $this->uri = $data["uri"];
            $this->publication_date = $data["publication_date"];
            $this->publication_year = $data["publication_year"];
            $this->publication_status_type = $data["publication_status_type"];
            $this->begin_date = $data["begin_date"];
            $this->end_date = $data["end_date"];
            $this->authors = $data["authors"];
        }
    }
    
    /**
     * Gets mandating_education_organization_reference
     * @return \Swagger\Client\Model\EducationOrganizationReference
     */
    public function getMandatingEducationOrganizationReference()
    {
        return $this->mandating_education_organization_reference;
    }
  
    /**
     * Sets mandating_education_organization_reference
     * @param \Swagger\Client\Model\EducationOrganizationReference $mandating_education_organization_reference A reference to the related EducationOrganization resource.
     * @return $this
     */
    public function setMandatingEducationOrganizationReference($mandating_education_organization_reference)
    {
        
        $this->mandating_education_organization_reference = $mandating_education_organization_reference;
        return $this;
    }
    
    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
  
    /**
     * Sets title
     * @param string $title The name of the content standard, for example Common Core.
     * @return $this
     */
    public function setTitle($title)
    {
        
        $this->title = $title;
        return $this;
    }
    
    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->version;
    }
  
    /**
     * Sets version
     * @param string $version The version identifier for the content.
     * @return $this
     */
    public function setVersion($version)
    {
        
        $this->version = $version;
        return $this;
    }
    
    /**
     * Gets uri
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }
  
    /**
     * Sets uri
     * @param string $uri The public web site address (URL), file, or ftp locator.
     * @return $this
     */
    public function setUri($uri)
    {
        
        $this->uri = $uri;
        return $this;
    }
    
    /**
     * Gets publication_date
     * @return \\DateTime
     */
    public function getPublicationDate()
    {
        return $this->publication_date;
    }
  
    /**
     * Sets publication_date
     * @param \\DateTime $publication_date The date on which this content was first published.
     * @return $this
     */
    public function setPublicationDate($publication_date)
    {
        
        $this->publication_date = $publication_date;
        return $this;
    }
    
    /**
     * Gets publication_year
     * @return int
     */
    public function getPublicationYear()
    {
        return $this->publication_year;
    }
  
    /**
     * Sets publication_year
     * @param int $publication_year The year at which this content was first published.
     * @return $this
     */
    public function setPublicationYear($publication_year)
    {
        
        $this->publication_year = $publication_year;
        return $this;
    }
    
    /**
     * Gets publication_status_type
     * @return string
     */
    public function getPublicationStatusType()
    {
        return $this->publication_status_type;
    }
  
    /**
     * Sets publication_status_type
     * @param string $publication_status_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setPublicationStatusType($publication_status_type)
    {
        
        $this->publication_status_type = $publication_status_type;
        return $this;
    }
    
    /**
     * Gets begin_date
     * @return \\DateTime
     */
    public function getBeginDate()
    {
        return $this->begin_date;
    }
  
    /**
     * Sets begin_date
     * @param \\DateTime $begin_date The beginning of the period during which this learning standard document is intended for use.
     * @return $this
     */
    public function setBeginDate($begin_date)
    {
        
        $this->begin_date = $begin_date;
        return $this;
    }
    
    /**
     * Gets end_date
     * @return \\DateTime
     */
    public function getEndDate()
    {
        return $this->end_date;
    }
  
    /**
     * Sets end_date
     * @param \\DateTime $end_date The end of the period during which this learning standard document is intended for use.
     * @return $this
     */
    public function setEndDate($end_date)
    {
        
        $this->end_date = $end_date;
        return $this;
    }
    
    /**
     * Gets authors
     * @return \Swagger\Client\Model\LearningStandardContentStandardAuthor[]
     */
    public function getAuthors()
    {
        return $this->authors;
    }
  
    /**
     * Sets authors
     * @param \Swagger\Client\Model\LearningStandardContentStandardAuthor[] $authors An unordered collection of learningStandardContentStandardAuthors.  The person or organization chiefly responsible for the intellectual content of the standard.
     * @return $this
     */
    public function setAuthors($authors)
    {
        
        $this->authors = $authors;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
