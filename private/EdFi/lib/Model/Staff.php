<?php
/**
 * Staff
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Staff Class Doc Comment
 *
 * @category    Class
 * @description
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Staff implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'staff_unique_id' => 'string',
        'personal_title_prefix' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_surname' => 'string',
        'generation_code_suffix' => 'string',
        'maiden_name' => 'string',
        'sex_type' => 'string',
        'birth_date' => '\\DateTime',
        'hispanic_latino_ethnicity' => 'bool',
        'old_ethnicity_type' => 'string',
        'highest_completed_level_of_education_descriptor' => 'string',
        'years_of_prior_professional_experience' => 'int',
        'years_of_prior_teaching_experience' => 'int',
        'highly_qualified_teacher' => 'bool',
        'login_id' => 'string',
        'citizenship_status_type' => 'string',
        'addresses' => '\Swagger\Client\Model\StaffAddress[]',
        'credentials' => '\Swagger\Client\Model\StaffCredential[]',
        'electronic_mails' => '\Swagger\Client\Model\StaffElectronicMail[]',
        'identification_codes' => '\Swagger\Client\Model\StaffIdentificationCode[]',
        'identification_documents' => '\Swagger\Client\Model\StaffIdentificationDocument[]',
        'international_addresses' => '\Swagger\Client\Model\StaffInternationalAddress[]',
        'languages' => '\Swagger\Client\Model\StaffLanguage[]',
        'other_names' => '\Swagger\Client\Model\StaffOtherName[]',
        'races' => '\Swagger\Client\Model\StaffRace[]',
        'telephones' => '\Swagger\Client\Model\StaffTelephone[]',
        'visas' => '\Swagger\Client\Model\StaffVisa[]',
        '_etag' => 'string'
    );

    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[]
      */
    static $attributeMap = array(
        'id' => 'id',
        'staff_unique_id' => 'staffUniqueId',
        'personal_title_prefix' => 'personalTitlePrefix',
        'first_name' => 'firstName',
        'middle_name' => 'middleName',
        'last_surname' => 'lastSurname',
        'generation_code_suffix' => 'generationCodeSuffix',
        'maiden_name' => 'maidenName',
        'sex_type' => 'sexType',
        'birth_date' => 'birthDate',
        'hispanic_latino_ethnicity' => 'hispanicLatinoEthnicity',
        'old_ethnicity_type' => 'oldEthnicityType',
        'highest_completed_level_of_education_descriptor' => 'highestCompletedLevelOfEducationDescriptor',
        'years_of_prior_professional_experience' => 'yearsOfPriorProfessionalExperience',
        'years_of_prior_teaching_experience' => 'yearsOfPriorTeachingExperience',
        'highly_qualified_teacher' => 'highlyQualifiedTeacher',
        'login_id' => 'loginId',
        'citizenship_status_type' => 'citizenshipStatusType',
        'addresses' => 'addresses',
        'credentials' => 'credentials',
        'electronic_mails' => 'electronicMails',
        'identification_codes' => 'identificationCodes',
        'identification_documents' => 'identificationDocuments',
        'international_addresses' => 'internationalAddresses',
        'languages' => 'languages',
        'other_names' => 'otherNames',
        'races' => 'races',
        'telephones' => 'telephones',
        'visas' => 'visas',
        '_etag' => '_etag'
    );

    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'staff_unique_id' => 'setStaffUniqueId',
        'personal_title_prefix' => 'setPersonalTitlePrefix',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_surname' => 'setLastSurname',
        'generation_code_suffix' => 'setGenerationCodeSuffix',
        'maiden_name' => 'setMaidenName',
        'sex_type' => 'setSexType',
        'birth_date' => 'setBirthDate',
        'hispanic_latino_ethnicity' => 'setHispanicLatinoEthnicity',
        'old_ethnicity_type' => 'setOldEthnicityType',
        'highest_completed_level_of_education_descriptor' => 'setHighestCompletedLevelOfEducationDescriptor',
        'years_of_prior_professional_experience' => 'setYearsOfPriorProfessionalExperience',
        'years_of_prior_teaching_experience' => 'setYearsOfPriorTeachingExperience',
        'highly_qualified_teacher' => 'setHighlyQualifiedTeacher',
        'login_id' => 'setLoginId',
        'citizenship_status_type' => 'setCitizenshipStatusType',
        'addresses' => 'setAddresses',
        'credentials' => 'setCredentials',
        'electronic_mails' => 'setElectronicMails',
        'identification_codes' => 'setIdentificationCodes',
        'identification_documents' => 'setIdentificationDocuments',
        'international_addresses' => 'setInternationalAddresses',
        'languages' => 'setLanguages',
        'other_names' => 'setOtherNames',
        'races' => 'setRaces',
        'telephones' => 'setTelephones',
        'visas' => 'setVisas',
        '_etag' => 'setEtag'
    );

    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'staff_unique_id' => 'getStaffUniqueId',
        'personal_title_prefix' => 'getPersonalTitlePrefix',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_surname' => 'getLastSurname',
        'generation_code_suffix' => 'getGenerationCodeSuffix',
        'maiden_name' => 'getMaidenName',
        'sex_type' => 'getSexType',
        'birth_date' => 'getBirthDate',
        'hispanic_latino_ethnicity' => 'getHispanicLatinoEthnicity',
        'old_ethnicity_type' => 'getOldEthnicityType',
        'highest_completed_level_of_education_descriptor' => 'getHighestCompletedLevelOfEducationDescriptor',
        'years_of_prior_professional_experience' => 'getYearsOfPriorProfessionalExperience',
        'years_of_prior_teaching_experience' => 'getYearsOfPriorTeachingExperience',
        'highly_qualified_teacher' => 'getHighlyQualifiedTeacher',
        'login_id' => 'getLoginId',
        'citizenship_status_type' => 'getCitizenshipStatusType',
        'addresses' => 'getAddresses',
        'credentials' => 'getCredentials',
        'electronic_mails' => 'getElectronicMails',
        'identification_codes' => 'getIdentificationCodes',
        'identification_documents' => 'getIdentificationDocuments',
        'international_addresses' => 'getInternationalAddresses',
        'languages' => 'getLanguages',
        'other_names' => 'getOtherNames',
        'races' => 'getRaces',
        'telephones' => 'getTelephones',
        'visas' => 'getVisas',
        '_etag' => 'getEtag'
    );

    static function getters() {
        return self::$getters;
    }


    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;

    /**
      * $staff_unique_id A unique alphanumeric code assigned to a staff.
      * @var string
      */
    protected $staff_unique_id;

    /**
      * $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the person.
      * @var string
      */
    protected $personal_title_prefix;

    /**
      * $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
      * @var string
      */
    protected $first_name;

    /**
      * $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony.
      * @var string
      */
    protected $middle_name;

    /**
      * $last_surname The name borne in common by members of a family.
      * @var string
      */
    protected $last_surname;

    /**
      * $generation_code_suffix An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
      * @var string
      */
    protected $generation_code_suffix;

    /**
      * $maiden_name The person's maiden name.
      * @var string
      */
    protected $maiden_name;

    /**
      * $sex_type A person''s gender.
      * @var string
      */
    protected $sex_type;

    /**
      * $birth_date The month, day, and year on which an individual was born.
      * @var \\DateTime
      */
    protected $birth_date;

    /**
      * $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
      * @var bool
      */
    protected $hispanic_latino_ethnicity;

    /**
      * $old_ethnicity_type Previous definition of Ethnicity combining Hispanic/latino and race:  1 - American Indian or Alaskan Native  2 - Asian or Pacific Islander  3 - Black, not of Hispanic origin  4 - Hispanic  5 - White, not of Hispanic origin
      * @var string
      */
    protected $old_ethnicity_type;

    /**
      * $highest_completed_level_of_education_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $highest_completed_level_of_education_descriptor;

    /**
      * $years_of_prior_professional_experience The total number of years that an individual has previously held a similar professional position in one or more education institutions.
      * @var Number
      */
    protected $years_of_prior_professional_experience;

    /**
      * $years_of_prior_teaching_experience The total number of years that an individual has previously held a teaching position in one or more education institutions.
      * @var Number
      */
    protected $years_of_prior_teaching_experience;

    /**
      * $highly_qualified_teacher An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
      * @var bool
      */
    protected $highly_qualified_teacher;

    /**
      * $login_id The login ID for the user; used for security access control interface.
      * @var string
      */
    protected $login_id;

    /**
      * $citizenship_status_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $citizenship_status_type;

    /**
      * $addresses An unordered collection of staffAddresses.  The set of elements that describes an address, including the street address, city, state and ZIP code.
      * @var \Swagger\Client\Model\StaffAddress[]
      */
    protected $addresses;

    /**
      * $credentials An unordered collection of staffCredentials.  The legal document giving authorization to perform teaching assignment services.
      * @var \Swagger\Client\Model\StaffCredential[]
      */
    protected $credentials;

    /**
      * $electronic_mails An unordered collection of staffElectronicMails.  The numbers, letters and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
      * @var \Swagger\Client\Model\StaffElectronicMail[]
      */
    protected $electronic_mails;

    /**
      * $identification_codes An unordered collection of staffIdentificationCodes.  A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a staff member.
      * @var \Swagger\Client\Model\StaffIdentificationCode[]
      */
    protected $identification_codes;

    /**
      * $identification_documents An unordered collection of staffIdentificationDocuments.  Represents the valid document that a person uses for identification.
      * @var \Swagger\Client\Model\StaffIdentificationDocument[]
      */
    protected $identification_documents;

    /**
      * $international_addresses An unordered collection of staffInternationalAddresses.  The set of elements that describes an address, including the street address, city, state and ZIP code.
      * @var \Swagger\Client\Model\StaffInternationalAddress[]
      */
    protected $international_addresses;

    /**
      * $languages An unordered collection of staffLanguages.  Language(s) the individual uses to communicate.
      * @var \Swagger\Client\Model\StaffLanguage[]
      */
    protected $languages;

    /**
      * $other_names An unordered collection of staffOtherNames.  Other names (e.g., alias, nickname, previous legal name) associated with a person.
      * @var \Swagger\Client\Model\StaffOtherName[]
      */
    protected $other_names;

    /**
      * $races An unordered collection of staffRaces.  The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
      * @var \Swagger\Client\Model\StaffRace[]
      */
    protected $races;

    /**
      * $telephones An unordered collection of staffTelephones.  The 10-digit telephone number, including the area code, for the person.
      * @var \Swagger\Client\Model\StaffTelephone[]
      */
    protected $telephones;

    /**
      * $visas An unordered collection of staffVisas.  Describe the types of visa that a non-U.S. citizen staff member holds.
      * @var \Swagger\Client\Model\StaffVisa[]
      */
    protected $visas;

    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;


    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {

        if ($data != null) {
            $this->id = $data["id"];
            $this->staff_unique_id = $data["staff_unique_id"];
            $this->personal_title_prefix = $data["personal_title_prefix"];
            $this->first_name = $data["first_name"];
            $this->middle_name = $data["middle_name"];
            $this->last_surname = $data["last_surname"];
            $this->generation_code_suffix = $data["generation_code_suffix"];
            $this->maiden_name = $data["maiden_name"];
            $this->sex_type = $data["sex_type"];
            $this->birth_date = $data["birth_date"];
            $this->hispanic_latino_ethnicity = $data["hispanic_latino_ethnicity"];
            $this->old_ethnicity_type = $data["old_ethnicity_type"];
            $this->highest_completed_level_of_education_descriptor = $data["highest_completed_level_of_education_descriptor"];
            $this->years_of_prior_professional_experience = $data["years_of_prior_professional_experience"];
            $this->years_of_prior_teaching_experience = $data["years_of_prior_teaching_experience"];
            $this->highly_qualified_teacher = $data["highly_qualified_teacher"];
            $this->login_id = $data["login_id"];
            $this->citizenship_status_type = $data["citizenship_status_type"];
            $this->addresses = $data["addresses"];
            $this->credentials = $data["credentials"];
            $this->electronic_mails = $data["electronic_mails"];
            $this->identification_codes = $data["identification_codes"];
            $this->identification_documents = $data["identification_documents"];
            $this->international_addresses = $data["international_addresses"];
            $this->languages = $data["languages"];
            $this->other_names = $data["other_names"];
            $this->races = $data["races"];
            $this->telephones = $data["telephones"];
            $this->visas = $data["visas"];
            $this->_etag = $data["_etag"];
        }
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {

        $this->id = $id;
        return $this;
    }

    /**
     * Gets staff_unique_id
     * @return string
     */
    public function getStaffUniqueId()
    {
        return $this->staff_unique_id;
    }

    /**
     * Sets staff_unique_id
     * @param string $staff_unique_id A unique alphanumeric code assigned to a staff.
     * @return $this
     */
    public function setStaffUniqueId($staff_unique_id)
    {

        $this->staff_unique_id = $staff_unique_id;
        return $this;
    }

    /**
     * Gets personal_title_prefix
     * @return string
     */
    public function getPersonalTitlePrefix()
    {
        return $this->personal_title_prefix;
    }

    /**
     * Sets personal_title_prefix
     * @param string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the person.
     * @return $this
     */
    public function setPersonalTitlePrefix($personal_title_prefix)
    {

        $this->personal_title_prefix = $personal_title_prefix;
        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }

    /**
     * Sets first_name
     * @param string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
     * @return $this
     */
    public function setFirstName($first_name)
    {

        $this->first_name = $first_name;
        return $this;
    }

    /**
     * Gets middle_name
     * @return string
     */
    public function getMiddleName()
    {
        return $this->middle_name;
    }

    /**
     * Sets middle_name
     * @param string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony.
     * @return $this
     */
    public function setMiddleName($middle_name)
    {

        $this->middle_name = $middle_name;
        return $this;
    }

    /**
     * Gets last_surname
     * @return string
     */
    public function getLastSurname()
    {
        return $this->last_surname;
    }

    /**
     * Sets last_surname
     * @param string $last_surname The name borne in common by members of a family.
     * @return $this
     */
    public function setLastSurname($last_surname)
    {

        $this->last_surname = $last_surname;
        return $this;
    }

    /**
     * Gets generation_code_suffix
     * @return string
     */
    public function getGenerationCodeSuffix()
    {
        return $this->generation_code_suffix;
    }

    /**
     * Sets generation_code_suffix
     * @param string $generation_code_suffix An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
     * @return $this
     */
    public function setGenerationCodeSuffix($generation_code_suffix)
    {

        $this->generation_code_suffix = $generation_code_suffix;
        return $this;
    }

    /**
     * Gets maiden_name
     * @return string
     */
    public function getMaidenName()
    {
        return $this->maiden_name;
    }

    /**
     * Sets maiden_name
     * @param string $maiden_name The person's maiden name.
     * @return $this
     */
    public function setMaidenName($maiden_name)
    {

        $this->maiden_name = $maiden_name;
        return $this;
    }

    /**
     * Gets sex_type
     * @return string
     */
    public function getSexType()
    {
        return $this->sex_type;
    }

    /**
     * Sets sex_type
     * @param string $sex_type A person''s gender.
     * @return $this
     */
    public function setSexType($sex_type)
    {

        $this->sex_type = $sex_type;
        return $this;
    }

    /**
     * Gets birth_date
     * @return \\DateTime
     */
    public function getBirthDate()
    {
        return $this->birth_date;
    }

    /**
     * Sets birth_date
     * @param \\DateTime $birth_date The month, day, and year on which an individual was born.
     * @return $this
     */
    public function setBirthDate($birth_date)
    {

        $this->birth_date = $birth_date;
        return $this;
    }

    /**
     * Gets hispanic_latino_ethnicity
     * @return bool
     */
    public function getHispanicLatinoEthnicity()
    {
        return $this->hispanic_latino_ethnicity;
    }

    /**
     * Sets hispanic_latino_ethnicity
     * @param bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
     * @return $this
     */
    public function setHispanicLatinoEthnicity($hispanic_latino_ethnicity)
    {

        $this->hispanic_latino_ethnicity = $hispanic_latino_ethnicity;
        return $this;
    }

    /**
     * Gets old_ethnicity_type
     * @return string
     */
    public function getOldEthnicityType()
    {
        return $this->old_ethnicity_type;
    }

    /**
     * Sets old_ethnicity_type
     * @param string $old_ethnicity_type Previous definition of Ethnicity combining Hispanic/latino and race:  1 - American Indian or Alaskan Native  2 - Asian or Pacific Islander  3 - Black, not of Hispanic origin  4 - Hispanic  5 - White, not of Hispanic origin
     * @return $this
     */
    public function setOldEthnicityType($old_ethnicity_type)
    {

        $this->old_ethnicity_type = $old_ethnicity_type;
        return $this;
    }

    /**
     * Gets highest_completed_level_of_education_descriptor
     * @return string
     */
    public function getHighestCompletedLevelOfEducationDescriptor()
    {
        return $this->highest_completed_level_of_education_descriptor;
    }

    /**
     * Sets highest_completed_level_of_education_descriptor
     * @param string $highest_completed_level_of_education_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setHighestCompletedLevelOfEducationDescriptor($highest_completed_level_of_education_descriptor)
    {

        $this->highest_completed_level_of_education_descriptor = $highest_completed_level_of_education_descriptor;
        return $this;
    }

    /**
     * Gets years_of_prior_professional_experience
     * @return Number
     */
    public function getYearsOfPriorProfessionalExperience()
    {
        return $this->years_of_prior_professional_experience;
    }

    /**
     * Sets years_of_prior_professional_experience
     * @param Number $years_of_prior_professional_experience The total number of years that an individual has previously held a similar professional position in one or more education institutions.
     * @return $this
     */
    public function setYearsOfPriorProfessionalExperience($years_of_prior_professional_experience)
    {

        $this->years_of_prior_professional_experience = $years_of_prior_professional_experience;
        return $this;
    }

    /**
     * Gets years_of_prior_teaching_experience
     * @return Number
     */
    public function getYearsOfPriorTeachingExperience()
    {
        return $this->years_of_prior_teaching_experience;
    }

    /**
     * Sets years_of_prior_teaching_experience
     * @param Number $years_of_prior_teaching_experience The total number of years that an individual has previously held a teaching position in one or more education institutions.
     * @return $this
     */
    public function setYearsOfPriorTeachingExperience($years_of_prior_teaching_experience)
    {

        $this->years_of_prior_teaching_experience = $years_of_prior_teaching_experience;
        return $this;
    }

    /**
     * Gets highly_qualified_teacher
     * @return bool
     */
    public function getHighlyQualifiedTeacher()
    {
        return $this->highly_qualified_teacher;
    }

    /**
     * Sets highly_qualified_teacher
     * @param bool $highly_qualified_teacher An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
     * @return $this
     */
    public function setHighlyQualifiedTeacher($highly_qualified_teacher)
    {

        $this->highly_qualified_teacher = $highly_qualified_teacher;
        return $this;
    }

    /**
     * Gets login_id
     * @return string
     */
    public function getLoginId()
    {
        return $this->login_id;
    }

    /**
     * Sets login_id
     * @param string $login_id The login ID for the user; used for security access control interface.
     * @return $this
     */
    public function setLoginId($login_id)
    {

        $this->login_id = $login_id;
        return $this;
    }

    /**
     * Gets citizenship_status_type
     * @return string
     */
    public function getCitizenshipStatusType()
    {
        return $this->citizenship_status_type;
    }

    /**
     * Sets citizenship_status_type
     * @param string $citizenship_status_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setCitizenshipStatusType($citizenship_status_type)
    {

        $this->citizenship_status_type = $citizenship_status_type;
        return $this;
    }

    /**
     * Gets addresses
     * @return \Swagger\Client\Model\StaffAddress[]
     */
    public function getAddresses()
    {
        return $this->addresses;
    }

    /**
     * Sets addresses
     * @param \Swagger\Client\Model\StaffAddress[] $addresses An unordered collection of staffAddresses.  The set of elements that describes an address, including the street address, city, state and ZIP code.
     * @return $this
     */
    public function setAddresses($addresses)
    {

        $this->addresses = $addresses;
        return $this;
    }

    /**
     * Gets credentials
     * @return \Swagger\Client\Model\StaffCredential[]
     */
    public function getCredentials()
    {
        return $this->credentials;
    }

    /**
     * Sets credentials
     * @param \Swagger\Client\Model\StaffCredential[] $credentials An unordered collection of staffCredentials.  The legal document giving authorization to perform teaching assignment services.
     * @return $this
     */
    public function setCredentials($credentials)
    {

        $this->credentials = $credentials;
        return $this;
    }

    /**
     * Gets electronic_mails
     * @return \Swagger\Client\Model\StaffElectronicMail[]
     */
    public function getElectronicMails()
    {
        return $this->electronic_mails;
    }

    /**
     * Sets electronic_mails
     * @param \Swagger\Client\Model\StaffElectronicMail[] $electronic_mails An unordered collection of staffElectronicMails.  The numbers, letters and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
     * @return $this
     */
    public function setElectronicMails($electronic_mails)
    {

        $this->electronic_mails = $electronic_mails;
        return $this;
    }

    /**
     * Gets identification_codes
     * @return \Swagger\Client\Model\StaffIdentificationCode[]
     */
    public function getIdentificationCodes()
    {
        return $this->identification_codes;
    }

    /**
     * Sets identification_codes
     * @param \Swagger\Client\Model\StaffIdentificationCode[] $identification_codes An unordered collection of staffIdentificationCodes.  A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a staff member.
     * @return $this
     */
    public function setIdentificationCodes($identification_codes)
    {

        $this->identification_codes = $identification_codes;
        return $this;
    }

    /**
     * Gets identification_documents
     * @return \Swagger\Client\Model\StaffIdentificationDocument[]
     */
    public function getIdentificationDocuments()
    {
        return $this->identification_documents;
    }

    /**
     * Sets identification_documents
     * @param \Swagger\Client\Model\StaffIdentificationDocument[] $identification_documents An unordered collection of staffIdentificationDocuments.  Represents the valid document that a person uses for identification.
     * @return $this
     */
    public function setIdentificationDocuments($identification_documents)
    {

        $this->identification_documents = $identification_documents;
        return $this;
    }

    /**
     * Gets international_addresses
     * @return \Swagger\Client\Model\StaffInternationalAddress[]
     */
    public function getInternationalAddresses()
    {
        return $this->international_addresses;
    }

    /**
     * Sets international_addresses
     * @param \Swagger\Client\Model\StaffInternationalAddress[] $international_addresses An unordered collection of staffInternationalAddresses.  The set of elements that describes an address, including the street address, city, state and ZIP code.
     * @return $this
     */
    public function setInternationalAddresses($international_addresses)
    {

        $this->international_addresses = $international_addresses;
        return $this;
    }

    /**
     * Gets languages
     * @return \Swagger\Client\Model\StaffLanguage[]
     */
    public function getLanguages()
    {
        return $this->languages;
    }

    /**
     * Sets languages
     * @param \Swagger\Client\Model\StaffLanguage[] $languages An unordered collection of staffLanguages.  Language(s) the individual uses to communicate.
     * @return $this
     */
    public function setLanguages($languages)
    {

        $this->languages = $languages;
        return $this;
    }

    /**
     * Gets other_names
     * @return \Swagger\Client\Model\StaffOtherName[]
     */
    public function getOtherNames()
    {
        return $this->other_names;
    }

    /**
     * Sets other_names
     * @param \Swagger\Client\Model\StaffOtherName[] $other_names An unordered collection of staffOtherNames.  Other names (e.g., alias, nickname, previous legal name) associated with a person.
     * @return $this
     */
    public function setOtherNames($other_names)
    {

        $this->other_names = $other_names;
        return $this;
    }

    /**
     * Gets races
     * @return \Swagger\Client\Model\StaffRace[]
     */
    public function getRaces()
    {
        return $this->races;
    }

    /**
     * Sets races
     * @param \Swagger\Client\Model\StaffRace[] $races An unordered collection of staffRaces.  The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
     * @return $this
     */
    public function setRaces($races)
    {

        $this->races = $races;
        return $this;
    }

    /**
     * Gets telephones
     * @return \Swagger\Client\Model\StaffTelephone[]
     */
    public function getTelephones()
    {
        return $this->telephones;
    }

    /**
     * Sets telephones
     * @param \Swagger\Client\Model\StaffTelephone[] $telephones An unordered collection of staffTelephones.  The 10-digit telephone number, including the area code, for the person.
     * @return $this
     */
    public function setTelephones($telephones)
    {

        $this->telephones = $telephones;
        return $this;
    }

    /**
     * Gets visas
     * @return \Swagger\Client\Model\StaffVisa[]
     */
    public function getVisas()
    {
        return $this->visas;
    }

    /**
     * Sets visas
     * @param \Swagger\Client\Model\StaffVisa[] $visas An unordered collection of staffVisas.  Describe the types of visa that a non-U.S. citizen staff member holds.
     * @return $this
     */
    public function setVisas($visas)
    {

        $this->visas = $visas;
        return $this;
    }

    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }

    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {

        $this->_etag = $_etag;
        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
