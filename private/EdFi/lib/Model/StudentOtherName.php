<?php
/**
 * StudentOtherName
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * StudentOtherName Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StudentOtherName implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'other_name_type' => 'string',
        'personal_title_prefix' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_surname' => 'string',
        'generation_code_suffix' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'other_name_type' => 'otherNameType',
        'personal_title_prefix' => 'personalTitlePrefix',
        'first_name' => 'firstName',
        'middle_name' => 'middleName',
        'last_surname' => 'lastSurname',
        'generation_code_suffix' => 'generationCodeSuffix'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'other_name_type' => 'setOtherNameType',
        'personal_title_prefix' => 'setPersonalTitlePrefix',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_surname' => 'setLastSurname',
        'generation_code_suffix' => 'setGenerationCodeSuffix'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'other_name_type' => 'getOtherNameType',
        'personal_title_prefix' => 'getPersonalTitlePrefix',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_surname' => 'getLastSurname',
        'generation_code_suffix' => 'getGenerationCodeSuffix'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $other_name_type Key for OtherName
      * @var string
      */
    protected $other_name_type;
    
    /**
      * $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the person.
      * @var string
      */
    protected $personal_title_prefix;
    
    /**
      * $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
      * @var string
      */
    protected $first_name;
    
    /**
      * $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony.
      * @var string
      */
    protected $middle_name;
    
    /**
      * $last_surname The name borne in common by members of a family.
      * @var string
      */
    protected $last_surname;
    
    /**
      * $generation_code_suffix An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
      * @var string
      */
    protected $generation_code_suffix;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->other_name_type = $data["other_name_type"];
            $this->personal_title_prefix = $data["personal_title_prefix"];
            $this->first_name = $data["first_name"];
            $this->middle_name = $data["middle_name"];
            $this->last_surname = $data["last_surname"];
            $this->generation_code_suffix = $data["generation_code_suffix"];
        }
    }
    
    /**
     * Gets other_name_type
     * @return string
     */
    public function getOtherNameType()
    {
        return $this->other_name_type;
    }
  
    /**
     * Sets other_name_type
     * @param string $other_name_type Key for OtherName
     * @return $this
     */
    public function setOtherNameType($other_name_type)
    {
        
        $this->other_name_type = $other_name_type;
        return $this;
    }
    
    /**
     * Gets personal_title_prefix
     * @return string
     */
    public function getPersonalTitlePrefix()
    {
        return $this->personal_title_prefix;
    }
  
    /**
     * Sets personal_title_prefix
     * @param string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the person.
     * @return $this
     */
    public function setPersonalTitlePrefix($personal_title_prefix)
    {
        
        $this->personal_title_prefix = $personal_title_prefix;
        return $this;
    }
    
    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }
  
    /**
     * Sets first_name
     * @param string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
     * @return $this
     */
    public function setFirstName($first_name)
    {
        
        $this->first_name = $first_name;
        return $this;
    }
    
    /**
     * Gets middle_name
     * @return string
     */
    public function getMiddleName()
    {
        return $this->middle_name;
    }
  
    /**
     * Sets middle_name
     * @param string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony.
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        
        $this->middle_name = $middle_name;
        return $this;
    }
    
    /**
     * Gets last_surname
     * @return string
     */
    public function getLastSurname()
    {
        return $this->last_surname;
    }
  
    /**
     * Sets last_surname
     * @param string $last_surname The name borne in common by members of a family.
     * @return $this
     */
    public function setLastSurname($last_surname)
    {
        
        $this->last_surname = $last_surname;
        return $this;
    }
    
    /**
     * Gets generation_code_suffix
     * @return string
     */
    public function getGenerationCodeSuffix()
    {
        return $this->generation_code_suffix;
    }
  
    /**
     * Sets generation_code_suffix
     * @param string $generation_code_suffix An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
     * @return $this
     */
    public function setGenerationCodeSuffix($generation_code_suffix)
    {
        
        $this->generation_code_suffix = $generation_code_suffix;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
