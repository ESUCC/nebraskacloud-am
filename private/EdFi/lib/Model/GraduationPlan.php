<?php
/**
 * GraduationPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * GraduationPlan Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GraduationPlan implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'education_organization_reference' => '\Swagger\Client\Model\EducationOrganizationReference',
        'graduation_school_year_type_reference' => '\Swagger\Client\Model\SchoolYearTypeReference',
        'type_descriptor' => 'string',
        'individual_plan' => 'bool',
        'total_required_credits' => 'Number',
        'total_required_credit_type' => 'string',
        'total_required_credit_conversion' => 'Number',
        'credits_by_courses' => '\Swagger\Client\Model\GraduationPlanCreditsByCourse[]',
        'credits_by_subjects' => '\Swagger\Client\Model\GraduationPlanCreditsBySubject[]',
        'required_assessments' => '\Swagger\Client\Model\GraduationPlanRequiredAssessment[]',
        '_etag' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'education_organization_reference' => 'educationOrganizationReference',
        'graduation_school_year_type_reference' => 'graduationSchoolYearTypeReference',
        'type_descriptor' => 'typeDescriptor',
        'individual_plan' => 'individualPlan',
        'total_required_credits' => 'totalRequiredCredits',
        'total_required_credit_type' => 'totalRequiredCreditType',
        'total_required_credit_conversion' => 'totalRequiredCreditConversion',
        'credits_by_courses' => 'creditsByCourses',
        'credits_by_subjects' => 'creditsBySubjects',
        'required_assessments' => 'requiredAssessments',
        '_etag' => '_etag'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'graduation_school_year_type_reference' => 'setGraduationSchoolYearTypeReference',
        'type_descriptor' => 'setTypeDescriptor',
        'individual_plan' => 'setIndividualPlan',
        'total_required_credits' => 'setTotalRequiredCredits',
        'total_required_credit_type' => 'setTotalRequiredCreditType',
        'total_required_credit_conversion' => 'setTotalRequiredCreditConversion',
        'credits_by_courses' => 'setCreditsByCourses',
        'credits_by_subjects' => 'setCreditsBySubjects',
        'required_assessments' => 'setRequiredAssessments',
        '_etag' => 'setEtag'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'graduation_school_year_type_reference' => 'getGraduationSchoolYearTypeReference',
        'type_descriptor' => 'getTypeDescriptor',
        'individual_plan' => 'getIndividualPlan',
        'total_required_credits' => 'getTotalRequiredCredits',
        'total_required_credit_type' => 'getTotalRequiredCreditType',
        'total_required_credit_conversion' => 'getTotalRequiredCreditConversion',
        'credits_by_courses' => 'getCreditsByCourses',
        'credits_by_subjects' => 'getCreditsBySubjects',
        'required_assessments' => 'getRequiredAssessments',
        '_etag' => 'getEtag'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $education_organization_reference A reference to the related EducationOrganization resource.
      * @var \Swagger\Client\Model\EducationOrganizationReference
      */
    protected $education_organization_reference;
    
    /**
      * $graduation_school_year_type_reference A reference to the related SchoolYearType resource.
      * @var \Swagger\Client\Model\SchoolYearTypeReference
      */
    protected $graduation_school_year_type_reference;
    
    /**
      * $type_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $type_descriptor;
    
    /**
      * $individual_plan An indicator of whether the GraduationPlan is tailored for an individual.
      * @var bool
      */
    protected $individual_plan;
    
    /**
      * $total_required_credits The total number of credits required for graduation under this plan.
      * @var Number
      */
    protected $total_required_credits;
    
    /**
      * $total_required_credit_type Key for Credit
      * @var string
      */
    protected $total_required_credit_type;
    
    /**
      * $total_required_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
      * @var Number
      */
    protected $total_required_credit_conversion;
    
    /**
      * $credits_by_courses An unordered collection of graduationPlanCreditsByCourses.  The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.
      * @var \Swagger\Client\Model\GraduationPlanCreditsByCourse[]
      */
    protected $credits_by_courses;
    
    /**
      * $credits_by_subjects An unordered collection of graduationPlanCreditsBySubjects.  The total number of credits required in a subject to graduate.  Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.
      * @var \Swagger\Client\Model\GraduationPlanCreditsBySubject[]
      */
    protected $credits_by_subjects;
    
    /**
      * $required_assessments An unordered collection of graduationPlanRequiredAssessments.  The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.
      * @var \Swagger\Client\Model\GraduationPlanRequiredAssessment[]
      */
    protected $required_assessments;
    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->education_organization_reference = $data["education_organization_reference"];
            $this->graduation_school_year_type_reference = $data["graduation_school_year_type_reference"];
            $this->type_descriptor = $data["type_descriptor"];
            $this->individual_plan = $data["individual_plan"];
            $this->total_required_credits = $data["total_required_credits"];
            $this->total_required_credit_type = $data["total_required_credit_type"];
            $this->total_required_credit_conversion = $data["total_required_credit_conversion"];
            $this->credits_by_courses = $data["credits_by_courses"];
            $this->credits_by_subjects = $data["credits_by_subjects"];
            $this->required_assessments = $data["required_assessments"];
            $this->_etag = $data["_etag"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets education_organization_reference
     * @return \Swagger\Client\Model\EducationOrganizationReference
     */
    public function getEducationOrganizationReference()
    {
        return $this->education_organization_reference;
    }
  
    /**
     * Sets education_organization_reference
     * @param \Swagger\Client\Model\EducationOrganizationReference $education_organization_reference A reference to the related EducationOrganization resource.
     * @return $this
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        
        $this->education_organization_reference = $education_organization_reference;
        return $this;
    }
    
    /**
     * Gets graduation_school_year_type_reference
     * @return \Swagger\Client\Model\SchoolYearTypeReference
     */
    public function getGraduationSchoolYearTypeReference()
    {
        return $this->graduation_school_year_type_reference;
    }
  
    /**
     * Sets graduation_school_year_type_reference
     * @param \Swagger\Client\Model\SchoolYearTypeReference $graduation_school_year_type_reference A reference to the related SchoolYearType resource.
     * @return $this
     */
    public function setGraduationSchoolYearTypeReference($graduation_school_year_type_reference)
    {
        
        $this->graduation_school_year_type_reference = $graduation_school_year_type_reference;
        return $this;
    }
    
    /**
     * Gets type_descriptor
     * @return string
     */
    public function getTypeDescriptor()
    {
        return $this->type_descriptor;
    }
  
    /**
     * Sets type_descriptor
     * @param string $type_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setTypeDescriptor($type_descriptor)
    {
        
        $this->type_descriptor = $type_descriptor;
        return $this;
    }
    
    /**
     * Gets individual_plan
     * @return bool
     */
    public function getIndividualPlan()
    {
        return $this->individual_plan;
    }
  
    /**
     * Sets individual_plan
     * @param bool $individual_plan An indicator of whether the GraduationPlan is tailored for an individual.
     * @return $this
     */
    public function setIndividualPlan($individual_plan)
    {
        
        $this->individual_plan = $individual_plan;
        return $this;
    }
    
    /**
     * Gets total_required_credits
     * @return Number
     */
    public function getTotalRequiredCredits()
    {
        return $this->total_required_credits;
    }
  
    /**
     * Sets total_required_credits
     * @param Number $total_required_credits The total number of credits required for graduation under this plan.
     * @return $this
     */
    public function setTotalRequiredCredits($total_required_credits)
    {
        
        $this->total_required_credits = $total_required_credits;
        return $this;
    }
    
    /**
     * Gets total_required_credit_type
     * @return string
     */
    public function getTotalRequiredCreditType()
    {
        return $this->total_required_credit_type;
    }
  
    /**
     * Sets total_required_credit_type
     * @param string $total_required_credit_type Key for Credit
     * @return $this
     */
    public function setTotalRequiredCreditType($total_required_credit_type)
    {
        
        $this->total_required_credit_type = $total_required_credit_type;
        return $this;
    }
    
    /**
     * Gets total_required_credit_conversion
     * @return Number
     */
    public function getTotalRequiredCreditConversion()
    {
        return $this->total_required_credit_conversion;
    }
  
    /**
     * Sets total_required_credit_conversion
     * @param Number $total_required_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     * @return $this
     */
    public function setTotalRequiredCreditConversion($total_required_credit_conversion)
    {
        
        $this->total_required_credit_conversion = $total_required_credit_conversion;
        return $this;
    }
    
    /**
     * Gets credits_by_courses
     * @return \Swagger\Client\Model\GraduationPlanCreditsByCourse[]
     */
    public function getCreditsByCourses()
    {
        return $this->credits_by_courses;
    }
  
    /**
     * Sets credits_by_courses
     * @param \Swagger\Client\Model\GraduationPlanCreditsByCourse[] $credits_by_courses An unordered collection of graduationPlanCreditsByCourses.  The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.
     * @return $this
     */
    public function setCreditsByCourses($credits_by_courses)
    {
        
        $this->credits_by_courses = $credits_by_courses;
        return $this;
    }
    
    /**
     * Gets credits_by_subjects
     * @return \Swagger\Client\Model\GraduationPlanCreditsBySubject[]
     */
    public function getCreditsBySubjects()
    {
        return $this->credits_by_subjects;
    }
  
    /**
     * Sets credits_by_subjects
     * @param \Swagger\Client\Model\GraduationPlanCreditsBySubject[] $credits_by_subjects An unordered collection of graduationPlanCreditsBySubjects.  The total number of credits required in a subject to graduate.  Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.
     * @return $this
     */
    public function setCreditsBySubjects($credits_by_subjects)
    {
        
        $this->credits_by_subjects = $credits_by_subjects;
        return $this;
    }
    
    /**
     * Gets required_assessments
     * @return \Swagger\Client\Model\GraduationPlanRequiredAssessment[]
     */
    public function getRequiredAssessments()
    {
        return $this->required_assessments;
    }
  
    /**
     * Sets required_assessments
     * @param \Swagger\Client\Model\GraduationPlanRequiredAssessment[] $required_assessments An unordered collection of graduationPlanRequiredAssessments.  The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.
     * @return $this
     */
    public function setRequiredAssessments($required_assessments)
    {
        
        $this->required_assessments = $required_assessments;
        return $this;
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
