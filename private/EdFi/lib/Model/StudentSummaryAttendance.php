<?php
/**
 * StudentSummaryAttendance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * StudentSummaryAttendance Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StudentSummaryAttendance implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        '_etag' => 'string',
        'absent_days_total' => 'Number',
        'attendance_period_end_date' => '\DateTime',
        'attendance_period_start_date' => '\DateTime',
        'full_time_equivalency' => 'int',
        'id' => 'string',
        'present_days_total' => 'Number',
        'school_reference' => '\Swagger\Client\Model\SchoolReference',
        'school_year_type_reference' => '\Swagger\Client\Model\SchoolYearTypeReference',
        'student_reference' => '\Swagger\Client\Model\StudentReference'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        '_etag' => '_etag',
        'absent_days_total' => 'absentDaysTotal',
        'attendance_period_end_date' => 'attendancePeriodEndDate',
        'attendance_period_start_date' => 'attendancePeriodStartDate',
        'full_time_equivalency' => 'fullTimeEquivalency',
        'id' => 'id',
        'present_days_total' => 'presentDaysTotal',
        'school_reference' => 'schoolReference',
        'school_year_type_reference' => 'schoolYearTypeReference',
        'student_reference' => 'studentReference'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        '_etag' => 'setEtag',
        'absent_days_total' => 'setAbsentDaysTotal',
        'attendance_period_end_date' => 'setAttendancePeriodEndDate',
        'attendance_period_start_date' => 'setAttendancePeriodStartDate',
        'full_time_equivalency' => 'setFullTimeEquivalency',
        'id' => 'setId',
        'present_days_total' => 'setPresentDaysTotal',
        'school_reference' => 'setSchoolReference',
        'school_year_type_reference' => 'setSchoolYearTypeReference',
        'student_reference' => 'setStudentReference'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        '_etag' => 'getEtag',
        'absent_days_total' => 'getAbsentDaysTotal',
        'attendance_period_end_date' => 'getAttendancePeriodEndDate',
        'attendance_period_start_date' => 'getAttendancePeriodStartDate',
        'full_time_equivalency' => 'getFullTimeEquivalency',
        'id' => 'getId',
        'present_days_total' => 'getPresentDaysTotal',
        'school_reference' => 'getSchoolReference',
        'school_year_type_reference' => 'getSchoolYearTypeReference',
        'student_reference' => 'getStudentReference'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    
    /**
      * $absent_days_total The total number of days within the Reporting Period, which begins at the Period Start Date and ends at the Period End Date, that the student was marked as absent from the location/school.  This field should be used to summarize all absences - excused and unexcused.  Days Absent can store up to one decimal place to handle cases where Days Absent is defined in fractions of a full day, in which case the decimal point must be provided.
      * @var Number
      */
    protected $absent_days_total;
    
    /**
      * $attendance_period_end_date The ending date of the Reporting Period for the aggregated attendance and enrollment information in the ISO format YYYY-MM-DD
      * @var \DateTime
      */
    protected $attendance_period_end_date;
    
    /**
      * $attendance_period_start_date The beginning date of the Reporting Period for the aggregated attendance and enrollment information in the ISO format YYYY-MM-DD.
      * @var \DateTime
      */
    protected $attendance_period_start_date;
    
    /**
      * $full_time_equivalency The full-time equivalence (FTE) of student assignment to a public school or district for services or instruction. Determining FTE should be based on the student's program.
      * @var int
      */
    protected $full_time_equivalency;
    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $present_days_total The total number of days within the Reporting Period, which begins at the Period Start Date and ends at the Period End Date, that the student was marked as present at the location/school. Days Present can store up to one decimal place to handle cases where Days Persent is defined in fractions of a full day, in which case the decimal point must be provided.
      * @var Number
      */
    protected $present_days_total;
    
    /**
      * $school_reference A reference to the related School resource.
      * @var \Swagger\Client\Model\SchoolReference
      */
    protected $school_reference;
    
    /**
      * $school_year_type_reference A reference to the related SchoolYearType resource.
      * @var \Swagger\Client\Model\SchoolYearTypeReference
      */
    protected $school_year_type_reference;
    
    /**
      * $student_reference A reference to the related Student resource.
      * @var \Swagger\Client\Model\StudentReference
      */
    protected $student_reference;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->_etag = $data["_etag"];
            $this->absent_days_total = $data["absent_days_total"];
            $this->attendance_period_end_date = $data["attendance_period_end_date"];
            $this->attendance_period_start_date = $data["attendance_period_start_date"];
            $this->full_time_equivalency = $data["full_time_equivalency"];
            $this->id = $data["id"];
            $this->present_days_total = $data["present_days_total"];
            $this->school_reference = $data["school_reference"];
            $this->school_year_type_reference = $data["school_year_type_reference"];
            $this->student_reference = $data["student_reference"];
        }
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Gets absent_days_total
     * @return Number
     */
    public function getAbsentDaysTotal()
    {
        return $this->absent_days_total;
    }
  
    /**
     * Sets absent_days_total
     * @param Number $absent_days_total The total number of days within the Reporting Period, which begins at the Period Start Date and ends at the Period End Date, that the student was marked as absent from the location/school.  This field should be used to summarize all absences - excused and unexcused.  Days Absent can store up to one decimal place to handle cases where Days Absent is defined in fractions of a full day, in which case the decimal point must be provided.
     * @return $this
     */
    public function setAbsentDaysTotal($absent_days_total)
    {
        
        $this->absent_days_total = $absent_days_total;
        return $this;
    }
    
    /**
     * Gets attendance_period_end_date
     * @return \DateTime
     */
    public function getAttendancePeriodEndDate()
    {
        return $this->attendance_period_end_date;
    }
  
    /**
     * Sets attendance_period_end_date
     * @param \DateTime $attendance_period_end_date The ending date of the Reporting Period for the aggregated attendance and enrollment information in the ISO format YYYY-MM-DD
     * @return $this
     */
    public function setAttendancePeriodEndDate($attendance_period_end_date)
    {
        
        $this->attendance_period_end_date = $attendance_period_end_date;
        return $this;
    }
    
    /**
     * Gets attendance_period_start_date
     * @return \DateTime
     */
    public function getAttendancePeriodStartDate()
    {
        return $this->attendance_period_start_date;
    }
  
    /**
     * Sets attendance_period_start_date
     * @param \DateTime $attendance_period_start_date The beginning date of the Reporting Period for the aggregated attendance and enrollment information in the ISO format YYYY-MM-DD.
     * @return $this
     */
    public function setAttendancePeriodStartDate($attendance_period_start_date)
    {
        
        $this->attendance_period_start_date = $attendance_period_start_date;
        return $this;
    }
    
    /**
     * Gets full_time_equivalency
     * @return int
     */
    public function getFullTimeEquivalency()
    {
        return $this->full_time_equivalency;
    }
  
    /**
     * Sets full_time_equivalency
     * @param int $full_time_equivalency The full-time equivalence (FTE) of student assignment to a public school or district for services or instruction. Determining FTE should be based on the student's program.
     * @return $this
     */
    public function setFullTimeEquivalency($full_time_equivalency)
    {
        
        $this->full_time_equivalency = $full_time_equivalency;
        return $this;
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets present_days_total
     * @return Number
     */
    public function getPresentDaysTotal()
    {
        return $this->present_days_total;
    }
  
    /**
     * Sets present_days_total
     * @param Number $present_days_total The total number of days within the Reporting Period, which begins at the Period Start Date and ends at the Period End Date, that the student was marked as present at the location/school. Days Present can store up to one decimal place to handle cases where Days Persent is defined in fractions of a full day, in which case the decimal point must be provided.
     * @return $this
     */
    public function setPresentDaysTotal($present_days_total)
    {
        
        $this->present_days_total = $present_days_total;
        return $this;
    }
    
    /**
     * Gets school_reference
     * @return \Swagger\Client\Model\SchoolReference
     */
    public function getSchoolReference()
    {
        return $this->school_reference;
    }
  
    /**
     * Sets school_reference
     * @param \Swagger\Client\Model\SchoolReference $school_reference A reference to the related School resource.
     * @return $this
     */
    public function setSchoolReference($school_reference)
    {
        
        $this->school_reference = $school_reference;
        return $this;
    }
    
    /**
     * Gets school_year_type_reference
     * @return \Swagger\Client\Model\SchoolYearTypeReference
     */
    public function getSchoolYearTypeReference()
    {
        return $this->school_year_type_reference;
    }
  
    /**
     * Sets school_year_type_reference
     * @param \Swagger\Client\Model\SchoolYearTypeReference $school_year_type_reference A reference to the related SchoolYearType resource.
     * @return $this
     */
    public function setSchoolYearTypeReference($school_year_type_reference)
    {
        
        $this->school_year_type_reference = $school_year_type_reference;
        return $this;
    }
    
    /**
     * Gets student_reference
     * @return \Swagger\Client\Model\StudentReference
     */
    public function getStudentReference()
    {
        return $this->student_reference;
    }
  
    /**
     * Sets student_reference
     * @param \Swagger\Client\Model\StudentReference $student_reference A reference to the related Student resource.
     * @return $this
     */
    public function setStudentReference($student_reference)
    {
        
        $this->student_reference = $student_reference;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
