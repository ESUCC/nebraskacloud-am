<?php
/**
 * UploadsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * UploadsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UploadsApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://sandbox.nebraskacloud.org/api/api/v1.0');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return UploadsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * postChunk
     *
     * Allows for the upload of files parts of a larger upload file.
     *
     * @param string $upload_id uploadId (string): required The unique ID of the in-progress upload on the server. This value should be obtained from the operation created via the bulk operations API (required)
     * @param int $offset The byte offset of this chunk, relative to the beginning of the full file. This value will be used along with the total expected file size and the bytes value to validate the action. If the offset + bytes &gt; expected bytes or if the bytes received do not match the bytes expected (for the chunk) a 400 Bad Request response will be sent. (required)
     * @param int $size The total bytes for this chunk. This value cannot exceed 157286400. If compression is used this should be compressed bytes and not uncompressed bytes (required)
     * @param \Swagger\Client\Model\Object $upload The file upload object (required)
     * @return \Swagger\Client\Model\Upload
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postChunk($upload_id, $offset, $size, $upload)
    {
        list($response, $statusCode, $httpHeader) = $this->postChunkWithHttpInfo ($upload_id, $offset, $size, $upload);
        return $response; 
    }


    /**
     * postChunkWithHttpInfo
     *
     * Allows for the upload of files parts of a larger upload file.
     *
     * @param string $upload_id uploadId (string): required The unique ID of the in-progress upload on the server. This value should be obtained from the operation created via the bulk operations API (required)
     * @param int $offset The byte offset of this chunk, relative to the beginning of the full file. This value will be used along with the total expected file size and the bytes value to validate the action. If the offset + bytes &gt; expected bytes or if the bytes received do not match the bytes expected (for the chunk) a 400 Bad Request response will be sent. (required)
     * @param int $size The total bytes for this chunk. This value cannot exceed 157286400. If compression is used this should be compressed bytes and not uncompressed bytes (required)
     * @param \Swagger\Client\Model\Object $upload The file upload object (required)
     * @return Array of \Swagger\Client\Model\Upload, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postChunkWithHttpInfo($upload_id, $offset, $size, $upload)
    {
        
        // verify the required parameter 'upload_id' is set
        if ($upload_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $upload_id when calling postChunk');
        }
        // verify the required parameter 'offset' is set
        if ($offset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offset when calling postChunk');
        }
        // verify the required parameter 'size' is set
        if ($size === null) {
            throw new \InvalidArgumentException('Missing the required parameter $size when calling postChunk');
        }
        // verify the required parameter 'upload' is set
        if ($upload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $upload when calling postChunk');
        }
  
        // parse inputs
        $resourcePath = "/uploads/{uploadid}/chunk";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        
        // path params
        
        if ($upload_id !== null) {
            $resourcePath = str_replace(
                "{" . "uploadId" . "}",
                $this->apiClient->getSerializer()->toPathValue($upload_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($upload !== null) {
            
            
            $formParams['upload'] = $this->apiClient->getSerializer()->toFormValue($upload);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Upload'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\Upload', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Upload', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * postCommit
     *
     * Creates a Command to commit the uploaded chunks and validate the file appears composable.
     *
     * @param string $uploadid The id of the upload to commit to the bulk operation. (required)
     * @param \Swagger\Client\Model\Object $upload The file upload object (required)
     * @return \Swagger\Client\Model\Upload
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postCommit($uploadid, $upload)
    {
        list($response, $statusCode, $httpHeader) = $this->postCommitWithHttpInfo ($uploadid, $upload);
        return $response; 
    }


    /**
     * postCommitWithHttpInfo
     *
     * Creates a Command to commit the uploaded chunks and validate the file appears composable.
     *
     * @param string $uploadid The id of the upload to commit to the bulk operation. (required)
     * @param \Swagger\Client\Model\Object $upload The file upload object (required)
     * @return Array of \Swagger\Client\Model\Upload, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postCommitWithHttpInfo($uploadid, $upload)
    {
        
        // verify the required parameter 'uploadid' is set
        if ($uploadid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $uploadid when calling postCommit');
        }
        // verify the required parameter 'upload' is set
        if ($upload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $upload when calling postCommit');
        }
  
        // parse inputs
        $resourcePath = "/uploads/{uploadid}/commit";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($uploadid !== null) {
            $resourcePath = str_replace(
                "{" . "uploadid" . "}",
                $this->apiClient->getSerializer()->toPathValue($uploadid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($upload !== null) {
            
            
            $formParams['upload'] = $this->apiClient->getSerializer()->toFormValue($upload);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Upload'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\Upload', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Upload', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
