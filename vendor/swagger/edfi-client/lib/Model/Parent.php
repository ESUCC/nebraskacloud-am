<?php
/**
 * Parent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Parent Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Parent implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'parent_unique_id' => 'string',
        'personal_title_prefix' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_surname' => 'string',
        'generation_code_suffix' => 'string',
        'maiden_name' => 'string',
        'sex_type' => 'string',
        'login_id' => 'string',
        'addresses' => '\Swagger\Client\Model\ParentAddress[]',
        'electronic_mails' => '\Swagger\Client\Model\ParentElectronicMail[]',
        'identification_documents' => '\Swagger\Client\Model\ParentIdentificationDocument[]',
        'international_addresses' => '\Swagger\Client\Model\ParentInternationalAddress[]',
        'other_names' => '\Swagger\Client\Model\ParentOtherName[]',
        'telephones' => '\Swagger\Client\Model\ParentTelephone[]',
        '_etag' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'parent_unique_id' => 'parentUniqueId',
        'personal_title_prefix' => 'personalTitlePrefix',
        'first_name' => 'firstName',
        'middle_name' => 'middleName',
        'last_surname' => 'lastSurname',
        'generation_code_suffix' => 'generationCodeSuffix',
        'maiden_name' => 'maidenName',
        'sex_type' => 'sexType',
        'login_id' => 'loginId',
        'addresses' => 'addresses',
        'electronic_mails' => 'electronicMails',
        'identification_documents' => 'identificationDocuments',
        'international_addresses' => 'internationalAddresses',
        'other_names' => 'otherNames',
        'telephones' => 'telephones',
        '_etag' => '_etag'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'parent_unique_id' => 'setParentUniqueId',
        'personal_title_prefix' => 'setPersonalTitlePrefix',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_surname' => 'setLastSurname',
        'generation_code_suffix' => 'setGenerationCodeSuffix',
        'maiden_name' => 'setMaidenName',
        'sex_type' => 'setSexType',
        'login_id' => 'setLoginId',
        'addresses' => 'setAddresses',
        'electronic_mails' => 'setElectronicMails',
        'identification_documents' => 'setIdentificationDocuments',
        'international_addresses' => 'setInternationalAddresses',
        'other_names' => 'setOtherNames',
        'telephones' => 'setTelephones',
        '_etag' => 'setEtag'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'parent_unique_id' => 'getParentUniqueId',
        'personal_title_prefix' => 'getPersonalTitlePrefix',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_surname' => 'getLastSurname',
        'generation_code_suffix' => 'getGenerationCodeSuffix',
        'maiden_name' => 'getMaidenName',
        'sex_type' => 'getSexType',
        'login_id' => 'getLoginId',
        'addresses' => 'getAddresses',
        'electronic_mails' => 'getElectronicMails',
        'identification_documents' => 'getIdentificationDocuments',
        'international_addresses' => 'getInternationalAddresses',
        'other_names' => 'getOtherNames',
        'telephones' => 'getTelephones',
        '_etag' => 'getEtag'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $parent_unique_id A unique alphanumeric code assigned to a parent.
      * @var string
      */
    protected $parent_unique_id;
    
    /**
      * $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the person.
      * @var string
      */
    protected $personal_title_prefix;
    
    /**
      * $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
      * @var string
      */
    protected $first_name;
    
    /**
      * $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony.
      * @var string
      */
    protected $middle_name;
    
    /**
      * $last_surname The name borne in common by members of a family.
      * @var string
      */
    protected $last_surname;
    
    /**
      * $generation_code_suffix An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
      * @var string
      */
    protected $generation_code_suffix;
    
    /**
      * $maiden_name The person's maiden name.
      * @var string
      */
    protected $maiden_name;
    
    /**
      * $sex_type A person''s gender.
      * @var string
      */
    protected $sex_type;
    
    /**
      * $login_id The login ID for the user; used for security access control interface.
      * @var string
      */
    protected $login_id;
    
    /**
      * $addresses An unordered collection of parentAddresses.  Parent's address, if different from the student address.
      * @var \Swagger\Client\Model\ParentAddress[]
      */
    protected $addresses;
    
    /**
      * $electronic_mails An unordered collection of parentElectronicMails.  The numbers, letters and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
      * @var \Swagger\Client\Model\ParentElectronicMail[]
      */
    protected $electronic_mails;
    
    /**
      * $identification_documents An unordered collection of parentIdentificationDocuments.  This type represents the valid document that a person uses for identification.
      * @var \Swagger\Client\Model\ParentIdentificationDocument[]
      */
    protected $identification_documents;
    
    /**
      * $international_addresses An unordered collection of parentInternationalAddresses.  Parent's address, if different from the student address.
      * @var \Swagger\Client\Model\ParentInternationalAddress[]
      */
    protected $international_addresses;
    
    /**
      * $other_names An unordered collection of parentOtherNames.  Other names (e.g., alias, nickname, previous legal name) associated with a person.
      * @var \Swagger\Client\Model\ParentOtherName[]
      */
    protected $other_names;
    
    /**
      * $telephones An unordered collection of parentTelephones.  The 10-digit telephone number, including the area code, for the person.
      * @var \Swagger\Client\Model\ParentTelephone[]
      */
    protected $telephones;
    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->parent_unique_id = $data["parent_unique_id"];
            $this->personal_title_prefix = $data["personal_title_prefix"];
            $this->first_name = $data["first_name"];
            $this->middle_name = $data["middle_name"];
            $this->last_surname = $data["last_surname"];
            $this->generation_code_suffix = $data["generation_code_suffix"];
            $this->maiden_name = $data["maiden_name"];
            $this->sex_type = $data["sex_type"];
            $this->login_id = $data["login_id"];
            $this->addresses = $data["addresses"];
            $this->electronic_mails = $data["electronic_mails"];
            $this->identification_documents = $data["identification_documents"];
            $this->international_addresses = $data["international_addresses"];
            $this->other_names = $data["other_names"];
            $this->telephones = $data["telephones"];
            $this->_etag = $data["_etag"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets parent_unique_id
     * @return string
     */
    public function getParentUniqueId()
    {
        return $this->parent_unique_id;
    }
  
    /**
     * Sets parent_unique_id
     * @param string $parent_unique_id A unique alphanumeric code assigned to a parent.
     * @return $this
     */
    public function setParentUniqueId($parent_unique_id)
    {
        
        $this->parent_unique_id = $parent_unique_id;
        return $this;
    }
    
    /**
     * Gets personal_title_prefix
     * @return string
     */
    public function getPersonalTitlePrefix()
    {
        return $this->personal_title_prefix;
    }
  
    /**
     * Sets personal_title_prefix
     * @param string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the person.
     * @return $this
     */
    public function setPersonalTitlePrefix($personal_title_prefix)
    {
        
        $this->personal_title_prefix = $personal_title_prefix;
        return $this;
    }
    
    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }
  
    /**
     * Sets first_name
     * @param string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
     * @return $this
     */
    public function setFirstName($first_name)
    {
        
        $this->first_name = $first_name;
        return $this;
    }
    
    /**
     * Gets middle_name
     * @return string
     */
    public function getMiddleName()
    {
        return $this->middle_name;
    }
  
    /**
     * Sets middle_name
     * @param string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony.
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        
        $this->middle_name = $middle_name;
        return $this;
    }
    
    /**
     * Gets last_surname
     * @return string
     */
    public function getLastSurname()
    {
        return $this->last_surname;
    }
  
    /**
     * Sets last_surname
     * @param string $last_surname The name borne in common by members of a family.
     * @return $this
     */
    public function setLastSurname($last_surname)
    {
        
        $this->last_surname = $last_surname;
        return $this;
    }
    
    /**
     * Gets generation_code_suffix
     * @return string
     */
    public function getGenerationCodeSuffix()
    {
        return $this->generation_code_suffix;
    }
  
    /**
     * Sets generation_code_suffix
     * @param string $generation_code_suffix An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
     * @return $this
     */
    public function setGenerationCodeSuffix($generation_code_suffix)
    {
        
        $this->generation_code_suffix = $generation_code_suffix;
        return $this;
    }
    
    /**
     * Gets maiden_name
     * @return string
     */
    public function getMaidenName()
    {
        return $this->maiden_name;
    }
  
    /**
     * Sets maiden_name
     * @param string $maiden_name The person's maiden name.
     * @return $this
     */
    public function setMaidenName($maiden_name)
    {
        
        $this->maiden_name = $maiden_name;
        return $this;
    }
    
    /**
     * Gets sex_type
     * @return string
     */
    public function getSexType()
    {
        return $this->sex_type;
    }
  
    /**
     * Sets sex_type
     * @param string $sex_type A person''s gender.
     * @return $this
     */
    public function setSexType($sex_type)
    {
        
        $this->sex_type = $sex_type;
        return $this;
    }
    
    /**
     * Gets login_id
     * @return string
     */
    public function getLoginId()
    {
        return $this->login_id;
    }
  
    /**
     * Sets login_id
     * @param string $login_id The login ID for the user; used for security access control interface.
     * @return $this
     */
    public function setLoginId($login_id)
    {
        
        $this->login_id = $login_id;
        return $this;
    }
    
    /**
     * Gets addresses
     * @return \Swagger\Client\Model\ParentAddress[]
     */
    public function getAddresses()
    {
        return $this->addresses;
    }
  
    /**
     * Sets addresses
     * @param \Swagger\Client\Model\ParentAddress[] $addresses An unordered collection of parentAddresses.  Parent's address, if different from the student address.
     * @return $this
     */
    public function setAddresses($addresses)
    {
        
        $this->addresses = $addresses;
        return $this;
    }
    
    /**
     * Gets electronic_mails
     * @return \Swagger\Client\Model\ParentElectronicMail[]
     */
    public function getElectronicMails()
    {
        return $this->electronic_mails;
    }
  
    /**
     * Sets electronic_mails
     * @param \Swagger\Client\Model\ParentElectronicMail[] $electronic_mails An unordered collection of parentElectronicMails.  The numbers, letters and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
     * @return $this
     */
    public function setElectronicMails($electronic_mails)
    {
        
        $this->electronic_mails = $electronic_mails;
        return $this;
    }
    
    /**
     * Gets identification_documents
     * @return \Swagger\Client\Model\ParentIdentificationDocument[]
     */
    public function getIdentificationDocuments()
    {
        return $this->identification_documents;
    }
  
    /**
     * Sets identification_documents
     * @param \Swagger\Client\Model\ParentIdentificationDocument[] $identification_documents An unordered collection of parentIdentificationDocuments.  This type represents the valid document that a person uses for identification.
     * @return $this
     */
    public function setIdentificationDocuments($identification_documents)
    {
        
        $this->identification_documents = $identification_documents;
        return $this;
    }
    
    /**
     * Gets international_addresses
     * @return \Swagger\Client\Model\ParentInternationalAddress[]
     */
    public function getInternationalAddresses()
    {
        return $this->international_addresses;
    }
  
    /**
     * Sets international_addresses
     * @param \Swagger\Client\Model\ParentInternationalAddress[] $international_addresses An unordered collection of parentInternationalAddresses.  Parent's address, if different from the student address.
     * @return $this
     */
    public function setInternationalAddresses($international_addresses)
    {
        
        $this->international_addresses = $international_addresses;
        return $this;
    }
    
    /**
     * Gets other_names
     * @return \Swagger\Client\Model\ParentOtherName[]
     */
    public function getOtherNames()
    {
        return $this->other_names;
    }
  
    /**
     * Sets other_names
     * @param \Swagger\Client\Model\ParentOtherName[] $other_names An unordered collection of parentOtherNames.  Other names (e.g., alias, nickname, previous legal name) associated with a person.
     * @return $this
     */
    public function setOtherNames($other_names)
    {
        
        $this->other_names = $other_names;
        return $this;
    }
    
    /**
     * Gets telephones
     * @return \Swagger\Client\Model\ParentTelephone[]
     */
    public function getTelephones()
    {
        return $this->telephones;
    }
  
    /**
     * Sets telephones
     * @param \Swagger\Client\Model\ParentTelephone[] $telephones An unordered collection of parentTelephones.  The 10-digit telephone number, including the area code, for the person.
     * @return $this
     */
    public function setTelephones($telephones)
    {
        
        $this->telephones = $telephones;
        return $this;
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
