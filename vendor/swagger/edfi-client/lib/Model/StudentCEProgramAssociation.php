<?php
/**
 * StudentCEProgramAssociation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * StudentCEProgramAssociation Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StudentCEProgramAssociation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        '_etag' => 'string',
        'begin_date' => '\DateTime',
        'ce_programs' => '\Swagger\Client\Model\StudentCEProgramAssociationCEProgram[]',
        'education_organization_id' => 'int',
        'end_date' => '\DateTime',
        'id' => 'string',
        'program_education_organization_id' => 'int',
        'program_name' => 'string',
        'program_type' => 'string',
        'reason_exited_descriptor' => 'string',
        'served_outside_of_regular_session' => 'bool',
        'services' => '\Swagger\Client\Model\StudentProgramAssociationService[]',
        'student_unique_id' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        '_etag' => '_etag',
        'begin_date' => 'beginDate',
        'ce_programs' => 'cePrograms',
        'education_organization_id' => 'educationOrganizationId',
        'end_date' => 'endDate',
        'id' => 'id',
        'program_education_organization_id' => 'programEducationOrganizationId',
        'program_name' => 'programName',
        'program_type' => 'programType',
        'reason_exited_descriptor' => 'reasonExitedDescriptor',
        'served_outside_of_regular_session' => 'servedOutsideOfRegularSession',
        'services' => 'services',
        'student_unique_id' => 'studentUniqueId'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        '_etag' => 'setEtag',
        'begin_date' => 'setBeginDate',
        'ce_programs' => 'setCePrograms',
        'education_organization_id' => 'setEducationOrganizationId',
        'end_date' => 'setEndDate',
        'id' => 'setId',
        'program_education_organization_id' => 'setProgramEducationOrganizationId',
        'program_name' => 'setProgramName',
        'program_type' => 'setProgramType',
        'reason_exited_descriptor' => 'setReasonExitedDescriptor',
        'served_outside_of_regular_session' => 'setServedOutsideOfRegularSession',
        'services' => 'setServices',
        'student_unique_id' => 'setStudentUniqueId'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        '_etag' => 'getEtag',
        'begin_date' => 'getBeginDate',
        'ce_programs' => 'getCePrograms',
        'education_organization_id' => 'getEducationOrganizationId',
        'end_date' => 'getEndDate',
        'id' => 'getId',
        'program_education_organization_id' => 'getProgramEducationOrganizationId',
        'program_name' => 'getProgramName',
        'program_type' => 'getProgramType',
        'reason_exited_descriptor' => 'getReasonExitedDescriptor',
        'served_outside_of_regular_session' => 'getServedOutsideOfRegularSession',
        'services' => 'getServices',
        'student_unique_id' => 'getStudentUniqueId'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    
    /**
      * $begin_date The month, day, and year on which the student first received services.  NEDM: Beginning Date
      * @var \DateTime
      */
    protected $begin_date;
    
    /**
      * $ce_programs An unordered collection of studentCEProgramAssociationCEPrograms.  This association is an NDE extension of the StudentProgramAssociation core table for Career Education Programs.
      * @var \Swagger\Client\Model\StudentCEProgramAssociationCEProgram[]
      */
    protected $ce_programs;
    
    /**
      * $education_organization_id The education organization where the student is participating in or receiving the program services.
      * @var int
      */
    protected $education_organization_id;
    
    /**
      * $end_date The month, day, and year on which the student exited the program or stopped receiving services.  NEDM: Ending Date
      * @var \DateTime
      */
    protected $end_date;
    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $program_education_organization_id The education organization where the student is participating in or receiving the program services.
      * @var int
      */
    protected $program_education_organization_id;
    
    /**
      * $program_name The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.
      * @var string
      */
    protected $program_name;
    
    /**
      * $program_type The program associated with the student.
      * @var string
      */
    protected $program_type;
    
    /**
      * $reason_exited_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $reason_exited_descriptor;
    
    /**
      * $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions.
      * @var bool
      */
    protected $served_outside_of_regular_session;
    
    /**
      * $services An unordered collection of studentProgramAssociationServices.  This association is an NDE extension of the StudentProgramAssociation core table for Career Education Programs.
      * @var \Swagger\Client\Model\StudentProgramAssociationService[]
      */
    protected $services;
    
    /**
      * $student_unique_id A unique alpha-numeric code assigned to a student.
      * @var string
      */
    protected $student_unique_id;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->_etag = $data["_etag"];
            $this->begin_date = $data["begin_date"];
            $this->ce_programs = $data["ce_programs"];
            $this->education_organization_id = $data["education_organization_id"];
            $this->end_date = $data["end_date"];
            $this->id = $data["id"];
            $this->program_education_organization_id = $data["program_education_organization_id"];
            $this->program_name = $data["program_name"];
            $this->program_type = $data["program_type"];
            $this->reason_exited_descriptor = $data["reason_exited_descriptor"];
            $this->served_outside_of_regular_session = $data["served_outside_of_regular_session"];
            $this->services = $data["services"];
            $this->student_unique_id = $data["student_unique_id"];
        }
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Gets begin_date
     * @return \DateTime
     */
    public function getBeginDate()
    {
        return $this->begin_date;
    }
  
    /**
     * Sets begin_date
     * @param \DateTime $begin_date The month, day, and year on which the student first received services.  NEDM: Beginning Date
     * @return $this
     */
    public function setBeginDate($begin_date)
    {
        
        $this->begin_date = $begin_date;
        return $this;
    }
    
    /**
     * Gets ce_programs
     * @return \Swagger\Client\Model\StudentCEProgramAssociationCEProgram[]
     */
    public function getCePrograms()
    {
        return $this->ce_programs;
    }
  
    /**
     * Sets ce_programs
     * @param \Swagger\Client\Model\StudentCEProgramAssociationCEProgram[] $ce_programs An unordered collection of studentCEProgramAssociationCEPrograms.  This association is an NDE extension of the StudentProgramAssociation core table for Career Education Programs.
     * @return $this
     */
    public function setCePrograms($ce_programs)
    {
        
        $this->ce_programs = $ce_programs;
        return $this;
    }
    
    /**
     * Gets education_organization_id
     * @return int
     */
    public function getEducationOrganizationId()
    {
        return $this->education_organization_id;
    }
  
    /**
     * Sets education_organization_id
     * @param int $education_organization_id The education organization where the student is participating in or receiving the program services.
     * @return $this
     */
    public function setEducationOrganizationId($education_organization_id)
    {
        
        $this->education_organization_id = $education_organization_id;
        return $this;
    }
    
    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->end_date;
    }
  
    /**
     * Sets end_date
     * @param \DateTime $end_date The month, day, and year on which the student exited the program or stopped receiving services.  NEDM: Ending Date
     * @return $this
     */
    public function setEndDate($end_date)
    {
        
        $this->end_date = $end_date;
        return $this;
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets program_education_organization_id
     * @return int
     */
    public function getProgramEducationOrganizationId()
    {
        return $this->program_education_organization_id;
    }
  
    /**
     * Sets program_education_organization_id
     * @param int $program_education_organization_id The education organization where the student is participating in or receiving the program services.
     * @return $this
     */
    public function setProgramEducationOrganizationId($program_education_organization_id)
    {
        
        $this->program_education_organization_id = $program_education_organization_id;
        return $this;
    }
    
    /**
     * Gets program_name
     * @return string
     */
    public function getProgramName()
    {
        return $this->program_name;
    }
  
    /**
     * Sets program_name
     * @param string $program_name The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.
     * @return $this
     */
    public function setProgramName($program_name)
    {
        
        $this->program_name = $program_name;
        return $this;
    }
    
    /**
     * Gets program_type
     * @return string
     */
    public function getProgramType()
    {
        return $this->program_type;
    }
  
    /**
     * Sets program_type
     * @param string $program_type The program associated with the student.
     * @return $this
     */
    public function setProgramType($program_type)
    {
        
        $this->program_type = $program_type;
        return $this;
    }
    
    /**
     * Gets reason_exited_descriptor
     * @return string
     */
    public function getReasonExitedDescriptor()
    {
        return $this->reason_exited_descriptor;
    }
  
    /**
     * Sets reason_exited_descriptor
     * @param string $reason_exited_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setReasonExitedDescriptor($reason_exited_descriptor)
    {
        
        $this->reason_exited_descriptor = $reason_exited_descriptor;
        return $this;
    }
    
    /**
     * Gets served_outside_of_regular_session
     * @return bool
     */
    public function getServedOutsideOfRegularSession()
    {
        return $this->served_outside_of_regular_session;
    }
  
    /**
     * Sets served_outside_of_regular_session
     * @param bool $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions.
     * @return $this
     */
    public function setServedOutsideOfRegularSession($served_outside_of_regular_session)
    {
        
        $this->served_outside_of_regular_session = $served_outside_of_regular_session;
        return $this;
    }
    
    /**
     * Gets services
     * @return \Swagger\Client\Model\StudentProgramAssociationService[]
     */
    public function getServices()
    {
        return $this->services;
    }
  
    /**
     * Sets services
     * @param \Swagger\Client\Model\StudentProgramAssociationService[] $services An unordered collection of studentProgramAssociationServices.  This association is an NDE extension of the StudentProgramAssociation core table for Career Education Programs.
     * @return $this
     */
    public function setServices($services)
    {
        
        $this->services = $services;
        return $this;
    }
    
    /**
     * Gets student_unique_id
     * @return string
     */
    public function getStudentUniqueId()
    {
        return $this->student_unique_id;
    }
  
    /**
     * Sets student_unique_id
     * @param string $student_unique_id A unique alpha-numeric code assigned to a student.
     * @return $this
     */
    public function setStudentUniqueId($student_unique_id)
    {
        
        $this->student_unique_id = $student_unique_id;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
