<?php
/**
 * LearningObjective
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * LearningObjective Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearningObjective implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'parent_learning_objective_reference' => '\Swagger\Client\Model\LearningObjectiveReference',
        'objective' => 'string',
        'academic_subject_descriptor' => 'string',
        'objective_grade_level_descriptor' => 'string',
        'learning_objective_id' => 'string',
        'description' => 'string',
        'nomenclature' => 'string',
        'success_criteria' => 'string',
        'namespace' => 'string',
        'content_standard' => '\Swagger\Client\Model\LearningObjectiveContentStandard',
        'learning_standards' => '\Swagger\Client\Model\LearningObjectiveLearningStandard[]',
        '_etag' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'parent_learning_objective_reference' => 'parentLearningObjectiveReference',
        'objective' => 'objective',
        'academic_subject_descriptor' => 'academicSubjectDescriptor',
        'objective_grade_level_descriptor' => 'objectiveGradeLevelDescriptor',
        'learning_objective_id' => 'learningObjectiveId',
        'description' => 'description',
        'nomenclature' => 'nomenclature',
        'success_criteria' => 'successCriteria',
        'namespace' => 'namespace',
        'content_standard' => 'contentStandard',
        'learning_standards' => 'learningStandards',
        '_etag' => '_etag'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'parent_learning_objective_reference' => 'setParentLearningObjectiveReference',
        'objective' => 'setObjective',
        'academic_subject_descriptor' => 'setAcademicSubjectDescriptor',
        'objective_grade_level_descriptor' => 'setObjectiveGradeLevelDescriptor',
        'learning_objective_id' => 'setLearningObjectiveId',
        'description' => 'setDescription',
        'nomenclature' => 'setNomenclature',
        'success_criteria' => 'setSuccessCriteria',
        'namespace' => 'setNamespace',
        'content_standard' => 'setContentStandard',
        'learning_standards' => 'setLearningStandards',
        '_etag' => 'setEtag'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'parent_learning_objective_reference' => 'getParentLearningObjectiveReference',
        'objective' => 'getObjective',
        'academic_subject_descriptor' => 'getAcademicSubjectDescriptor',
        'objective_grade_level_descriptor' => 'getObjectiveGradeLevelDescriptor',
        'learning_objective_id' => 'getLearningObjectiveId',
        'description' => 'getDescription',
        'nomenclature' => 'getNomenclature',
        'success_criteria' => 'getSuccessCriteria',
        'namespace' => 'getNamespace',
        'content_standard' => 'getContentStandard',
        'learning_standards' => 'getLearningStandards',
        '_etag' => 'getEtag'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $parent_learning_objective_reference A reference to the related LearningObjective resource.
      * @var \Swagger\Client\Model\LearningObjectiveReference
      */
    protected $parent_learning_objective_reference;
    
    /**
      * $objective The designated title of the learning objective.
      * @var string
      */
    protected $objective;
    
    /**
      * $academic_subject_descriptor The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
      * @var string
      */
    protected $academic_subject_descriptor;
    
    /**
      * $objective_grade_level_descriptor The grade level for which the learning objective is targeted,
      * @var string
      */
    protected $objective_grade_level_descriptor;
    
    /**
      * $learning_objective_id The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
      * @var string
      */
    protected $learning_objective_id;
    
    /**
      * $description A detailed description of the entity.
      * @var string
      */
    protected $description;
    
    /**
      * $nomenclature Reflects the common nomenclature for an element.
      * @var string
      */
    protected $nomenclature;
    
    /**
      * $success_criteria One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.
      * @var string
      */
    protected $success_criteria;
    
    /**
      * $namespace Namespace for the LearningObjective.  
      * @var string
      */
    protected $namespace;
    
    /**
      * $content_standard This entity represents identified learning objectives for courses in specific grades.
      * @var \Swagger\Client\Model\LearningObjectiveContentStandard
      */
    protected $content_standard;
    
    /**
      * $learning_standards An unordered collection of learningObjectiveLearningStandards.  
      * @var \Swagger\Client\Model\LearningObjectiveLearningStandard[]
      */
    protected $learning_standards;
    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->parent_learning_objective_reference = $data["parent_learning_objective_reference"];
            $this->objective = $data["objective"];
            $this->academic_subject_descriptor = $data["academic_subject_descriptor"];
            $this->objective_grade_level_descriptor = $data["objective_grade_level_descriptor"];
            $this->learning_objective_id = $data["learning_objective_id"];
            $this->description = $data["description"];
            $this->nomenclature = $data["nomenclature"];
            $this->success_criteria = $data["success_criteria"];
            $this->namespace = $data["namespace"];
            $this->content_standard = $data["content_standard"];
            $this->learning_standards = $data["learning_standards"];
            $this->_etag = $data["_etag"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets parent_learning_objective_reference
     * @return \Swagger\Client\Model\LearningObjectiveReference
     */
    public function getParentLearningObjectiveReference()
    {
        return $this->parent_learning_objective_reference;
    }
  
    /**
     * Sets parent_learning_objective_reference
     * @param \Swagger\Client\Model\LearningObjectiveReference $parent_learning_objective_reference A reference to the related LearningObjective resource.
     * @return $this
     */
    public function setParentLearningObjectiveReference($parent_learning_objective_reference)
    {
        
        $this->parent_learning_objective_reference = $parent_learning_objective_reference;
        return $this;
    }
    
    /**
     * Gets objective
     * @return string
     */
    public function getObjective()
    {
        return $this->objective;
    }
  
    /**
     * Sets objective
     * @param string $objective The designated title of the learning objective.
     * @return $this
     */
    public function setObjective($objective)
    {
        
        $this->objective = $objective;
        return $this;
    }
    
    /**
     * Gets academic_subject_descriptor
     * @return string
     */
    public function getAcademicSubjectDescriptor()
    {
        return $this->academic_subject_descriptor;
    }
  
    /**
     * Sets academic_subject_descriptor
     * @param string $academic_subject_descriptor The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
     * @return $this
     */
    public function setAcademicSubjectDescriptor($academic_subject_descriptor)
    {
        
        $this->academic_subject_descriptor = $academic_subject_descriptor;
        return $this;
    }
    
    /**
     * Gets objective_grade_level_descriptor
     * @return string
     */
    public function getObjectiveGradeLevelDescriptor()
    {
        return $this->objective_grade_level_descriptor;
    }
  
    /**
     * Sets objective_grade_level_descriptor
     * @param string $objective_grade_level_descriptor The grade level for which the learning objective is targeted,
     * @return $this
     */
    public function setObjectiveGradeLevelDescriptor($objective_grade_level_descriptor)
    {
        
        $this->objective_grade_level_descriptor = $objective_grade_level_descriptor;
        return $this;
    }
    
    /**
     * Gets learning_objective_id
     * @return string
     */
    public function getLearningObjectiveId()
    {
        return $this->learning_objective_id;
    }
  
    /**
     * Sets learning_objective_id
     * @param string $learning_objective_id The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
     * @return $this
     */
    public function setLearningObjectiveId($learning_objective_id)
    {
        
        $this->learning_objective_id = $learning_objective_id;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description A detailed description of the entity.
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets nomenclature
     * @return string
     */
    public function getNomenclature()
    {
        return $this->nomenclature;
    }
  
    /**
     * Sets nomenclature
     * @param string $nomenclature Reflects the common nomenclature for an element.
     * @return $this
     */
    public function setNomenclature($nomenclature)
    {
        
        $this->nomenclature = $nomenclature;
        return $this;
    }
    
    /**
     * Gets success_criteria
     * @return string
     */
    public function getSuccessCriteria()
    {
        return $this->success_criteria;
    }
  
    /**
     * Sets success_criteria
     * @param string $success_criteria One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.
     * @return $this
     */
    public function setSuccessCriteria($success_criteria)
    {
        
        $this->success_criteria = $success_criteria;
        return $this;
    }
    
    /**
     * Gets namespace
     * @return string
     */
    public function getNamespace()
    {
        return $this->namespace;
    }
  
    /**
     * Sets namespace
     * @param string $namespace Namespace for the LearningObjective.  
     * @return $this
     */
    public function setNamespace($namespace)
    {
        
        $this->namespace = $namespace;
        return $this;
    }
    
    /**
     * Gets content_standard
     * @return \Swagger\Client\Model\LearningObjectiveContentStandard
     */
    public function getContentStandard()
    {
        return $this->content_standard;
    }
  
    /**
     * Sets content_standard
     * @param \Swagger\Client\Model\LearningObjectiveContentStandard $content_standard This entity represents identified learning objectives for courses in specific grades.
     * @return $this
     */
    public function setContentStandard($content_standard)
    {
        
        $this->content_standard = $content_standard;
        return $this;
    }
    
    /**
     * Gets learning_standards
     * @return \Swagger\Client\Model\LearningObjectiveLearningStandard[]
     */
    public function getLearningStandards()
    {
        return $this->learning_standards;
    }
  
    /**
     * Sets learning_standards
     * @param \Swagger\Client\Model\LearningObjectiveLearningStandard[] $learning_standards An unordered collection of learningObjectiveLearningStandards.  
     * @return $this
     */
    public function setLearningStandards($learning_standards)
    {
        
        $this->learning_standards = $learning_standards;
        return $this;
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
