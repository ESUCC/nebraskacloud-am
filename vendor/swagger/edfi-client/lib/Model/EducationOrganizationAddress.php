<?php
/**
 * EducationOrganizationAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * EducationOrganizationAddress Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EducationOrganizationAddress implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'address_type' => 'string',
        'street_number_name' => 'string',
        'apartment_room_suite_number' => 'string',
        'building_site_number' => 'string',
        'city' => 'string',
        'state_abbreviation_type' => 'string',
        'postal_code' => 'string',
        'name_of_county' => 'string',
        'county_fips_code' => 'string',
        'latitude' => 'string',
        'longitude' => 'string',
        'begin_date' => '\\DateTime',
        'end_date' => '\\DateTime'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'address_type' => 'addressType',
        'street_number_name' => 'streetNumberName',
        'apartment_room_suite_number' => 'apartmentRoomSuiteNumber',
        'building_site_number' => 'buildingSiteNumber',
        'city' => 'city',
        'state_abbreviation_type' => 'stateAbbreviationType',
        'postal_code' => 'postalCode',
        'name_of_county' => 'nameOfCounty',
        'county_fips_code' => 'countyFIPSCode',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'begin_date' => 'beginDate',
        'end_date' => 'endDate'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'address_type' => 'setAddressType',
        'street_number_name' => 'setStreetNumberName',
        'apartment_room_suite_number' => 'setApartmentRoomSuiteNumber',
        'building_site_number' => 'setBuildingSiteNumber',
        'city' => 'setCity',
        'state_abbreviation_type' => 'setStateAbbreviationType',
        'postal_code' => 'setPostalCode',
        'name_of_county' => 'setNameOfCounty',
        'county_fips_code' => 'setCountyFipsCode',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'begin_date' => 'setBeginDate',
        'end_date' => 'setEndDate'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'address_type' => 'getAddressType',
        'street_number_name' => 'getStreetNumberName',
        'apartment_room_suite_number' => 'getApartmentRoomSuiteNumber',
        'building_site_number' => 'getBuildingSiteNumber',
        'city' => 'getCity',
        'state_abbreviation_type' => 'getStateAbbreviationType',
        'postal_code' => 'getPostalCode',
        'name_of_county' => 'getNameOfCounty',
        'county_fips_code' => 'getCountyFipsCode',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'begin_date' => 'getBeginDate',
        'end_date' => 'getEndDate'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $address_type Key for Address
      * @var string
      */
    protected $address_type;
    
    /**
      * $street_number_name The street number and street name or post office box number of an address.
      * @var string
      */
    protected $street_number_name;
    
    /**
      * $apartment_room_suite_number The apartment, room, or suite number of an address.
      * @var string
      */
    protected $apartment_room_suite_number;
    
    /**
      * $building_site_number The number of the building on the site, if more than one building shares the same address.
      * @var string
      */
    protected $building_site_number;
    
    /**
      * $city The name of the city in which an address is located.
      * @var string
      */
    protected $city;
    
    /**
      * $state_abbreviation_type The abbreviation for the state (within the United States) or outlying area in which an address is located.
      * @var string
      */
    protected $state_abbreviation_type;
    
    /**
      * $postal_code The five or nine digit zip code or overseas postal code portion of an address.
      * @var string
      */
    protected $postal_code;
    
    /**
      * $name_of_county The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.
      * @var string
      */
    protected $name_of_county;
    
    /**
      * $county_fips_code Definition The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
      * @var string
      */
    protected $county_fips_code;
    
    /**
      * $latitude The geographic latitude of the physical address.
      * @var string
      */
    protected $latitude;
    
    /**
      * $longitude The geographic longitude of the physical address.
      * @var string
      */
    protected $longitude;
    
    /**
      * $begin_date The first date the address is valid. For physical addresses, the date the person moved to that address.
      * @var \\DateTime
      */
    protected $begin_date;
    
    /**
      * $end_date The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
      * @var \\DateTime
      */
    protected $end_date;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->address_type = $data["address_type"];
            $this->street_number_name = $data["street_number_name"];
            $this->apartment_room_suite_number = $data["apartment_room_suite_number"];
            $this->building_site_number = $data["building_site_number"];
            $this->city = $data["city"];
            $this->state_abbreviation_type = $data["state_abbreviation_type"];
            $this->postal_code = $data["postal_code"];
            $this->name_of_county = $data["name_of_county"];
            $this->county_fips_code = $data["county_fips_code"];
            $this->latitude = $data["latitude"];
            $this->longitude = $data["longitude"];
            $this->begin_date = $data["begin_date"];
            $this->end_date = $data["end_date"];
        }
    }
    
    /**
     * Gets address_type
     * @return string
     */
    public function getAddressType()
    {
        return $this->address_type;
    }
  
    /**
     * Sets address_type
     * @param string $address_type Key for Address
     * @return $this
     */
    public function setAddressType($address_type)
    {
        
        $this->address_type = $address_type;
        return $this;
    }
    
    /**
     * Gets street_number_name
     * @return string
     */
    public function getStreetNumberName()
    {
        return $this->street_number_name;
    }
  
    /**
     * Sets street_number_name
     * @param string $street_number_name The street number and street name or post office box number of an address.
     * @return $this
     */
    public function setStreetNumberName($street_number_name)
    {
        
        $this->street_number_name = $street_number_name;
        return $this;
    }
    
    /**
     * Gets apartment_room_suite_number
     * @return string
     */
    public function getApartmentRoomSuiteNumber()
    {
        return $this->apartment_room_suite_number;
    }
  
    /**
     * Sets apartment_room_suite_number
     * @param string $apartment_room_suite_number The apartment, room, or suite number of an address.
     * @return $this
     */
    public function setApartmentRoomSuiteNumber($apartment_room_suite_number)
    {
        
        $this->apartment_room_suite_number = $apartment_room_suite_number;
        return $this;
    }
    
    /**
     * Gets building_site_number
     * @return string
     */
    public function getBuildingSiteNumber()
    {
        return $this->building_site_number;
    }
  
    /**
     * Sets building_site_number
     * @param string $building_site_number The number of the building on the site, if more than one building shares the same address.
     * @return $this
     */
    public function setBuildingSiteNumber($building_site_number)
    {
        
        $this->building_site_number = $building_site_number;
        return $this;
    }
    
    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }
  
    /**
     * Sets city
     * @param string $city The name of the city in which an address is located.
     * @return $this
     */
    public function setCity($city)
    {
        
        $this->city = $city;
        return $this;
    }
    
    /**
     * Gets state_abbreviation_type
     * @return string
     */
    public function getStateAbbreviationType()
    {
        return $this->state_abbreviation_type;
    }
  
    /**
     * Sets state_abbreviation_type
     * @param string $state_abbreviation_type The abbreviation for the state (within the United States) or outlying area in which an address is located.
     * @return $this
     */
    public function setStateAbbreviationType($state_abbreviation_type)
    {
        
        $this->state_abbreviation_type = $state_abbreviation_type;
        return $this;
    }
    
    /**
     * Gets postal_code
     * @return string
     */
    public function getPostalCode()
    {
        return $this->postal_code;
    }
  
    /**
     * Sets postal_code
     * @param string $postal_code The five or nine digit zip code or overseas postal code portion of an address.
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        
        $this->postal_code = $postal_code;
        return $this;
    }
    
    /**
     * Gets name_of_county
     * @return string
     */
    public function getNameOfCounty()
    {
        return $this->name_of_county;
    }
  
    /**
     * Sets name_of_county
     * @param string $name_of_county The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.
     * @return $this
     */
    public function setNameOfCounty($name_of_county)
    {
        
        $this->name_of_county = $name_of_county;
        return $this;
    }
    
    /**
     * Gets county_fips_code
     * @return string
     */
    public function getCountyFipsCode()
    {
        return $this->county_fips_code;
    }
  
    /**
     * Sets county_fips_code
     * @param string $county_fips_code Definition The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
     * @return $this
     */
    public function setCountyFipsCode($county_fips_code)
    {
        
        $this->county_fips_code = $county_fips_code;
        return $this;
    }
    
    /**
     * Gets latitude
     * @return string
     */
    public function getLatitude()
    {
        return $this->latitude;
    }
  
    /**
     * Sets latitude
     * @param string $latitude The geographic latitude of the physical address.
     * @return $this
     */
    public function setLatitude($latitude)
    {
        
        $this->latitude = $latitude;
        return $this;
    }
    
    /**
     * Gets longitude
     * @return string
     */
    public function getLongitude()
    {
        return $this->longitude;
    }
  
    /**
     * Sets longitude
     * @param string $longitude The geographic longitude of the physical address.
     * @return $this
     */
    public function setLongitude($longitude)
    {
        
        $this->longitude = $longitude;
        return $this;
    }
    
    /**
     * Gets begin_date
     * @return \\DateTime
     */
    public function getBeginDate()
    {
        return $this->begin_date;
    }
  
    /**
     * Sets begin_date
     * @param \\DateTime $begin_date The first date the address is valid. For physical addresses, the date the person moved to that address.
     * @return $this
     */
    public function setBeginDate($begin_date)
    {
        
        $this->begin_date = $begin_date;
        return $this;
    }
    
    /**
     * Gets end_date
     * @return \\DateTime
     */
    public function getEndDate()
    {
        return $this->end_date;
    }
  
    /**
     * Sets end_date
     * @param \\DateTime $end_date The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
     * @return $this
     */
    public function setEndDate($end_date)
    {
        
        $this->end_date = $end_date;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
