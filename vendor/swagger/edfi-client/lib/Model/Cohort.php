<?php
/**
 * Cohort
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Cohort Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Cohort implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'education_organization_reference' => '\Swagger\Client\Model\EducationOrganizationReference',
        'identifier' => 'string',
        'description' => 'string',
        'type' => 'string',
        'scope_type' => 'string',
        'academic_subject_descriptor' => 'string',
        'programs' => '\Swagger\Client\Model\CohortProgram[]',
        '_etag' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'education_organization_reference' => 'educationOrganizationReference',
        'identifier' => 'identifier',
        'description' => 'description',
        'type' => 'type',
        'scope_type' => 'scopeType',
        'academic_subject_descriptor' => 'academicSubjectDescriptor',
        'programs' => 'programs',
        '_etag' => '_etag'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'identifier' => 'setIdentifier',
        'description' => 'setDescription',
        'type' => 'setType',
        'scope_type' => 'setScopeType',
        'academic_subject_descriptor' => 'setAcademicSubjectDescriptor',
        'programs' => 'setPrograms',
        '_etag' => 'setEtag'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'identifier' => 'getIdentifier',
        'description' => 'getDescription',
        'type' => 'getType',
        'scope_type' => 'getScopeType',
        'academic_subject_descriptor' => 'getAcademicSubjectDescriptor',
        'programs' => 'getPrograms',
        '_etag' => 'getEtag'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $education_organization_reference A reference to the related EducationOrganization resource.
      * @var \Swagger\Client\Model\EducationOrganizationReference
      */
    protected $education_organization_reference;
    
    /**
      * $identifier The name or ID for the cohort.
      * @var string
      */
    protected $identifier;
    
    /**
      * $description The description of he cohort and its purpose.
      * @var string
      */
    protected $description;
    
    /**
      * $type The type of the cohort (academic intervention, attendance intervention, discipline intervention, breakout session, etc.).
      * @var string
      */
    protected $type;
    
    /**
      * $scope_type The scope of cohort (e.g., campus, district, classroom).
      * @var string
      */
    protected $scope_type;
    
    /**
      * $academic_subject_descriptor The subject for an academic intervention (e.g., science, mathematics).
      * @var string
      */
    protected $academic_subject_descriptor;
    
    /**
      * $programs An unordered collection of cohortPrograms.  The optional program associated with this cohort (e.g., Special Education).
      * @var \Swagger\Client\Model\CohortProgram[]
      */
    protected $programs;
    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->education_organization_reference = $data["education_organization_reference"];
            $this->identifier = $data["identifier"];
            $this->description = $data["description"];
            $this->type = $data["type"];
            $this->scope_type = $data["scope_type"];
            $this->academic_subject_descriptor = $data["academic_subject_descriptor"];
            $this->programs = $data["programs"];
            $this->_etag = $data["_etag"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets education_organization_reference
     * @return \Swagger\Client\Model\EducationOrganizationReference
     */
    public function getEducationOrganizationReference()
    {
        return $this->education_organization_reference;
    }
  
    /**
     * Sets education_organization_reference
     * @param \Swagger\Client\Model\EducationOrganizationReference $education_organization_reference A reference to the related EducationOrganization resource.
     * @return $this
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        
        $this->education_organization_reference = $education_organization_reference;
        return $this;
    }
    
    /**
     * Gets identifier
     * @return string
     */
    public function getIdentifier()
    {
        return $this->identifier;
    }
  
    /**
     * Sets identifier
     * @param string $identifier The name or ID for the cohort.
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        
        $this->identifier = $identifier;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description The description of he cohort and its purpose.
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type The type of the cohort (academic intervention, attendance intervention, discipline intervention, breakout session, etc.).
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets scope_type
     * @return string
     */
    public function getScopeType()
    {
        return $this->scope_type;
    }
  
    /**
     * Sets scope_type
     * @param string $scope_type The scope of cohort (e.g., campus, district, classroom).
     * @return $this
     */
    public function setScopeType($scope_type)
    {
        
        $this->scope_type = $scope_type;
        return $this;
    }
    
    /**
     * Gets academic_subject_descriptor
     * @return string
     */
    public function getAcademicSubjectDescriptor()
    {
        return $this->academic_subject_descriptor;
    }
  
    /**
     * Sets academic_subject_descriptor
     * @param string $academic_subject_descriptor The subject for an academic intervention (e.g., science, mathematics).
     * @return $this
     */
    public function setAcademicSubjectDescriptor($academic_subject_descriptor)
    {
        
        $this->academic_subject_descriptor = $academic_subject_descriptor;
        return $this;
    }
    
    /**
     * Gets programs
     * @return \Swagger\Client\Model\CohortProgram[]
     */
    public function getPrograms()
    {
        return $this->programs;
    }
  
    /**
     * Sets programs
     * @param \Swagger\Client\Model\CohortProgram[] $programs An unordered collection of cohortPrograms.  The optional program associated with this cohort (e.g., Special Education).
     * @return $this
     */
    public function setPrograms($programs)
    {
        
        $this->programs = $programs;
        return $this;
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
