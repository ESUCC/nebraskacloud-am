<?php
/**
 * EducationOrganizationInternationalAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * EducationOrganizationInternationalAddress Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EducationOrganizationInternationalAddress implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'address_type' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'address_line3' => 'string',
        'address_line4' => 'string',
        'latitude' => 'string',
        'longitude' => 'string',
        'begin_date' => '\\DateTime',
        'end_date' => '\\DateTime',
        'country_descriptor' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'address_type' => 'addressType',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'address_line3' => 'addressLine3',
        'address_line4' => 'addressLine4',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'begin_date' => 'beginDate',
        'end_date' => 'endDate',
        'country_descriptor' => 'countryDescriptor'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'address_type' => 'setAddressType',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'address_line3' => 'setAddressLine3',
        'address_line4' => 'setAddressLine4',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'begin_date' => 'setBeginDate',
        'end_date' => 'setEndDate',
        'country_descriptor' => 'setCountryDescriptor'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'address_type' => 'getAddressType',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'address_line3' => 'getAddressLine3',
        'address_line4' => 'getAddressLine4',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'begin_date' => 'getBeginDate',
        'end_date' => 'getEndDate',
        'country_descriptor' => 'getCountryDescriptor'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $address_type Key for Address
      * @var string
      */
    protected $address_type;
    
    /**
      * $address_line1 The first line of the address.
      * @var string
      */
    protected $address_line1;
    
    /**
      * $address_line2 The second line of the address.
      * @var string
      */
    protected $address_line2;
    
    /**
      * $address_line3 The third line of the address.
      * @var string
      */
    protected $address_line3;
    
    /**
      * $address_line4 The fourth line of the address.
      * @var string
      */
    protected $address_line4;
    
    /**
      * $latitude The geographic latitude of the physical address.
      * @var string
      */
    protected $latitude;
    
    /**
      * $longitude The geographic longitude of the physical address.
      * @var string
      */
    protected $longitude;
    
    /**
      * $begin_date The first date the address is valid. For physical addresses, the date the person moved to that address.
      * @var \\DateTime
      */
    protected $begin_date;
    
    /**
      * $end_date The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
      * @var \\DateTime
      */
    protected $end_date;
    
    /**
      * $country_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $country_descriptor;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->address_type = $data["address_type"];
            $this->address_line1 = $data["address_line1"];
            $this->address_line2 = $data["address_line2"];
            $this->address_line3 = $data["address_line3"];
            $this->address_line4 = $data["address_line4"];
            $this->latitude = $data["latitude"];
            $this->longitude = $data["longitude"];
            $this->begin_date = $data["begin_date"];
            $this->end_date = $data["end_date"];
            $this->country_descriptor = $data["country_descriptor"];
        }
    }
    
    /**
     * Gets address_type
     * @return string
     */
    public function getAddressType()
    {
        return $this->address_type;
    }
  
    /**
     * Sets address_type
     * @param string $address_type Key for Address
     * @return $this
     */
    public function setAddressType($address_type)
    {
        
        $this->address_type = $address_type;
        return $this;
    }
    
    /**
     * Gets address_line1
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->address_line1;
    }
  
    /**
     * Sets address_line1
     * @param string $address_line1 The first line of the address.
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        
        $this->address_line1 = $address_line1;
        return $this;
    }
    
    /**
     * Gets address_line2
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->address_line2;
    }
  
    /**
     * Sets address_line2
     * @param string $address_line2 The second line of the address.
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        
        $this->address_line2 = $address_line2;
        return $this;
    }
    
    /**
     * Gets address_line3
     * @return string
     */
    public function getAddressLine3()
    {
        return $this->address_line3;
    }
  
    /**
     * Sets address_line3
     * @param string $address_line3 The third line of the address.
     * @return $this
     */
    public function setAddressLine3($address_line3)
    {
        
        $this->address_line3 = $address_line3;
        return $this;
    }
    
    /**
     * Gets address_line4
     * @return string
     */
    public function getAddressLine4()
    {
        return $this->address_line4;
    }
  
    /**
     * Sets address_line4
     * @param string $address_line4 The fourth line of the address.
     * @return $this
     */
    public function setAddressLine4($address_line4)
    {
        
        $this->address_line4 = $address_line4;
        return $this;
    }
    
    /**
     * Gets latitude
     * @return string
     */
    public function getLatitude()
    {
        return $this->latitude;
    }
  
    /**
     * Sets latitude
     * @param string $latitude The geographic latitude of the physical address.
     * @return $this
     */
    public function setLatitude($latitude)
    {
        
        $this->latitude = $latitude;
        return $this;
    }
    
    /**
     * Gets longitude
     * @return string
     */
    public function getLongitude()
    {
        return $this->longitude;
    }
  
    /**
     * Sets longitude
     * @param string $longitude The geographic longitude of the physical address.
     * @return $this
     */
    public function setLongitude($longitude)
    {
        
        $this->longitude = $longitude;
        return $this;
    }
    
    /**
     * Gets begin_date
     * @return \\DateTime
     */
    public function getBeginDate()
    {
        return $this->begin_date;
    }
  
    /**
     * Sets begin_date
     * @param \\DateTime $begin_date The first date the address is valid. For physical addresses, the date the person moved to that address.
     * @return $this
     */
    public function setBeginDate($begin_date)
    {
        
        $this->begin_date = $begin_date;
        return $this;
    }
    
    /**
     * Gets end_date
     * @return \\DateTime
     */
    public function getEndDate()
    {
        return $this->end_date;
    }
  
    /**
     * Sets end_date
     * @param \\DateTime $end_date The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
     * @return $this
     */
    public function setEndDate($end_date)
    {
        
        $this->end_date = $end_date;
        return $this;
    }
    
    /**
     * Gets country_descriptor
     * @return string
     */
    public function getCountryDescriptor()
    {
        return $this->country_descriptor;
    }
  
    /**
     * Sets country_descriptor
     * @param string $country_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setCountryDescriptor($country_descriptor)
    {
        
        $this->country_descriptor = $country_descriptor;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
