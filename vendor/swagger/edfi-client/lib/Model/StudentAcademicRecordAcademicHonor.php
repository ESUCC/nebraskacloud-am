<?php
/**
 * StudentAcademicRecordAcademicHonor
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * StudentAcademicRecordAcademicHonor Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StudentAcademicRecordAcademicHonor implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'academic_honor_category_type' => 'string',
        'honor_description' => 'string',
        'honor_award_date' => '\\DateTime',
        'honor_award_expires_date' => '\\DateTime',
        'achievement_title' => 'string',
        'achievement_category_descriptor' => 'string',
        'achievement_category_system' => 'string',
        'issuer_name' => 'string',
        'issuer_origin_url' => 'string',
        'criteria' => 'string',
        'criteria_url' => 'string',
        'evidence_statement' => 'string',
        'image_url' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'academic_honor_category_type' => 'academicHonorCategoryType',
        'honor_description' => 'honorDescription',
        'honor_award_date' => 'honorAwardDate',
        'honor_award_expires_date' => 'honorAwardExpiresDate',
        'achievement_title' => 'achievementTitle',
        'achievement_category_descriptor' => 'achievementCategoryDescriptor',
        'achievement_category_system' => 'achievementCategorySystem',
        'issuer_name' => 'issuerName',
        'issuer_origin_url' => 'issuerOriginURL',
        'criteria' => 'criteria',
        'criteria_url' => 'criteriaURL',
        'evidence_statement' => 'evidenceStatement',
        'image_url' => 'imageURL'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'academic_honor_category_type' => 'setAcademicHonorCategoryType',
        'honor_description' => 'setHonorDescription',
        'honor_award_date' => 'setHonorAwardDate',
        'honor_award_expires_date' => 'setHonorAwardExpiresDate',
        'achievement_title' => 'setAchievementTitle',
        'achievement_category_descriptor' => 'setAchievementCategoryDescriptor',
        'achievement_category_system' => 'setAchievementCategorySystem',
        'issuer_name' => 'setIssuerName',
        'issuer_origin_url' => 'setIssuerOriginUrl',
        'criteria' => 'setCriteria',
        'criteria_url' => 'setCriteriaUrl',
        'evidence_statement' => 'setEvidenceStatement',
        'image_url' => 'setImageUrl'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'academic_honor_category_type' => 'getAcademicHonorCategoryType',
        'honor_description' => 'getHonorDescription',
        'honor_award_date' => 'getHonorAwardDate',
        'honor_award_expires_date' => 'getHonorAwardExpiresDate',
        'achievement_title' => 'getAchievementTitle',
        'achievement_category_descriptor' => 'getAchievementCategoryDescriptor',
        'achievement_category_system' => 'getAchievementCategorySystem',
        'issuer_name' => 'getIssuerName',
        'issuer_origin_url' => 'getIssuerOriginUrl',
        'criteria' => 'getCriteria',
        'criteria_url' => 'getCriteriaUrl',
        'evidence_statement' => 'getEvidenceStatement',
        'image_url' => 'getImageUrl'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $academic_honor_category_type A designation of the type of academic distinctions earned by or awarded to the student.
      * @var string
      */
    protected $academic_honor_category_type;
    
    /**
      * $honor_description A description of the type of academic distinctions earned by or awarded to the individual.
      * @var string
      */
    protected $honor_description;
    
    /**
      * $honor_award_date The date the honor was awarded or earned.
      * @var \\DateTime
      */
    protected $honor_award_date;
    
    /**
      * $honor_award_expires_date Date on which the award expires.
      * @var \\DateTime
      */
    protected $honor_award_expires_date;
    
    /**
      * $achievement_title The title assigned to the achievement.
      * @var string
      */
    protected $achievement_title;
    
    /**
      * $achievement_category_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $achievement_category_descriptor;
    
    /**
      * $achievement_category_system The system that defines the categories by which an achievement is attributed to the learner.
      * @var string
      */
    protected $achievement_category_system;
    
    /**
      * $issuer_name The name of the agent issuing the award.
      * @var string
      */
    protected $issuer_name;
    
    /**
      * $issuer_origin_url The Uniform Resource Locator (URL) from which the award was issued.
      * @var string
      */
    protected $issuer_origin_url;
    
    /**
      * $criteria The criteria for competency-based completion of the achievement/award.
      * @var string
      */
    protected $criteria;
    
    /**
      * $criteria_url The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
      * @var string
      */
    protected $criteria_url;
    
    /**
      * $evidence_statement A statement or reference describing the evidence that the learner met the criteria for attainment of the achievement.
      * @var string
      */
    protected $evidence_statement;
    
    /**
      * $image_url The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the achievement.
      * @var string
      */
    protected $image_url;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->academic_honor_category_type = $data["academic_honor_category_type"];
            $this->honor_description = $data["honor_description"];
            $this->honor_award_date = $data["honor_award_date"];
            $this->honor_award_expires_date = $data["honor_award_expires_date"];
            $this->achievement_title = $data["achievement_title"];
            $this->achievement_category_descriptor = $data["achievement_category_descriptor"];
            $this->achievement_category_system = $data["achievement_category_system"];
            $this->issuer_name = $data["issuer_name"];
            $this->issuer_origin_url = $data["issuer_origin_url"];
            $this->criteria = $data["criteria"];
            $this->criteria_url = $data["criteria_url"];
            $this->evidence_statement = $data["evidence_statement"];
            $this->image_url = $data["image_url"];
        }
    }
    
    /**
     * Gets academic_honor_category_type
     * @return string
     */
    public function getAcademicHonorCategoryType()
    {
        return $this->academic_honor_category_type;
    }
  
    /**
     * Sets academic_honor_category_type
     * @param string $academic_honor_category_type A designation of the type of academic distinctions earned by or awarded to the student.
     * @return $this
     */
    public function setAcademicHonorCategoryType($academic_honor_category_type)
    {
        
        $this->academic_honor_category_type = $academic_honor_category_type;
        return $this;
    }
    
    /**
     * Gets honor_description
     * @return string
     */
    public function getHonorDescription()
    {
        return $this->honor_description;
    }
  
    /**
     * Sets honor_description
     * @param string $honor_description A description of the type of academic distinctions earned by or awarded to the individual.
     * @return $this
     */
    public function setHonorDescription($honor_description)
    {
        
        $this->honor_description = $honor_description;
        return $this;
    }
    
    /**
     * Gets honor_award_date
     * @return \\DateTime
     */
    public function getHonorAwardDate()
    {
        return $this->honor_award_date;
    }
  
    /**
     * Sets honor_award_date
     * @param \\DateTime $honor_award_date The date the honor was awarded or earned.
     * @return $this
     */
    public function setHonorAwardDate($honor_award_date)
    {
        
        $this->honor_award_date = $honor_award_date;
        return $this;
    }
    
    /**
     * Gets honor_award_expires_date
     * @return \\DateTime
     */
    public function getHonorAwardExpiresDate()
    {
        return $this->honor_award_expires_date;
    }
  
    /**
     * Sets honor_award_expires_date
     * @param \\DateTime $honor_award_expires_date Date on which the award expires.
     * @return $this
     */
    public function setHonorAwardExpiresDate($honor_award_expires_date)
    {
        
        $this->honor_award_expires_date = $honor_award_expires_date;
        return $this;
    }
    
    /**
     * Gets achievement_title
     * @return string
     */
    public function getAchievementTitle()
    {
        return $this->achievement_title;
    }
  
    /**
     * Sets achievement_title
     * @param string $achievement_title The title assigned to the achievement.
     * @return $this
     */
    public function setAchievementTitle($achievement_title)
    {
        
        $this->achievement_title = $achievement_title;
        return $this;
    }
    
    /**
     * Gets achievement_category_descriptor
     * @return string
     */
    public function getAchievementCategoryDescriptor()
    {
        return $this->achievement_category_descriptor;
    }
  
    /**
     * Sets achievement_category_descriptor
     * @param string $achievement_category_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setAchievementCategoryDescriptor($achievement_category_descriptor)
    {
        
        $this->achievement_category_descriptor = $achievement_category_descriptor;
        return $this;
    }
    
    /**
     * Gets achievement_category_system
     * @return string
     */
    public function getAchievementCategorySystem()
    {
        return $this->achievement_category_system;
    }
  
    /**
     * Sets achievement_category_system
     * @param string $achievement_category_system The system that defines the categories by which an achievement is attributed to the learner.
     * @return $this
     */
    public function setAchievementCategorySystem($achievement_category_system)
    {
        
        $this->achievement_category_system = $achievement_category_system;
        return $this;
    }
    
    /**
     * Gets issuer_name
     * @return string
     */
    public function getIssuerName()
    {
        return $this->issuer_name;
    }
  
    /**
     * Sets issuer_name
     * @param string $issuer_name The name of the agent issuing the award.
     * @return $this
     */
    public function setIssuerName($issuer_name)
    {
        
        $this->issuer_name = $issuer_name;
        return $this;
    }
    
    /**
     * Gets issuer_origin_url
     * @return string
     */
    public function getIssuerOriginUrl()
    {
        return $this->issuer_origin_url;
    }
  
    /**
     * Sets issuer_origin_url
     * @param string $issuer_origin_url The Uniform Resource Locator (URL) from which the award was issued.
     * @return $this
     */
    public function setIssuerOriginUrl($issuer_origin_url)
    {
        
        $this->issuer_origin_url = $issuer_origin_url;
        return $this;
    }
    
    /**
     * Gets criteria
     * @return string
     */
    public function getCriteria()
    {
        return $this->criteria;
    }
  
    /**
     * Sets criteria
     * @param string $criteria The criteria for competency-based completion of the achievement/award.
     * @return $this
     */
    public function setCriteria($criteria)
    {
        
        $this->criteria = $criteria;
        return $this;
    }
    
    /**
     * Gets criteria_url
     * @return string
     */
    public function getCriteriaUrl()
    {
        return $this->criteria_url;
    }
  
    /**
     * Sets criteria_url
     * @param string $criteria_url The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
     * @return $this
     */
    public function setCriteriaUrl($criteria_url)
    {
        
        $this->criteria_url = $criteria_url;
        return $this;
    }
    
    /**
     * Gets evidence_statement
     * @return string
     */
    public function getEvidenceStatement()
    {
        return $this->evidence_statement;
    }
  
    /**
     * Sets evidence_statement
     * @param string $evidence_statement A statement or reference describing the evidence that the learner met the criteria for attainment of the achievement.
     * @return $this
     */
    public function setEvidenceStatement($evidence_statement)
    {
        
        $this->evidence_statement = $evidence_statement;
        return $this;
    }
    
    /**
     * Gets image_url
     * @return string
     */
    public function getImageUrl()
    {
        return $this->image_url;
    }
  
    /**
     * Sets image_url
     * @param string $image_url The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the achievement.
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        
        $this->image_url = $image_url;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
