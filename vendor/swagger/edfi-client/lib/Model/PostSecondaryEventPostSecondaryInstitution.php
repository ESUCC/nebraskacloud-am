<?php
/**
 * PostSecondaryEventPostSecondaryInstitution
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * PostSecondaryEventPostSecondaryInstitution Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PostSecondaryEventPostSecondaryInstitution implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'name_of_institution' => 'string',
        'post_secondary_institution_id' => 'string',
        'post_secondary_institution_level_type' => 'string',
        'administrative_funding_control_descriptor' => 'string',
        'identification_codes' => '\Swagger\Client\Model\PostSecondaryEventPostSecondaryInstitutionIdentificationCode[]',
        'medium_of_instructions' => '\Swagger\Client\Model\PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'name_of_institution' => 'nameOfInstitution',
        'post_secondary_institution_id' => 'postSecondaryInstitutionId',
        'post_secondary_institution_level_type' => 'postSecondaryInstitutionLevelType',
        'administrative_funding_control_descriptor' => 'administrativeFundingControlDescriptor',
        'identification_codes' => 'identificationCodes',
        'medium_of_instructions' => 'mediumOfInstructions'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'name_of_institution' => 'setNameOfInstitution',
        'post_secondary_institution_id' => 'setPostSecondaryInstitutionId',
        'post_secondary_institution_level_type' => 'setPostSecondaryInstitutionLevelType',
        'administrative_funding_control_descriptor' => 'setAdministrativeFundingControlDescriptor',
        'identification_codes' => 'setIdentificationCodes',
        'medium_of_instructions' => 'setMediumOfInstructions'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'name_of_institution' => 'getNameOfInstitution',
        'post_secondary_institution_id' => 'getPostSecondaryInstitutionId',
        'post_secondary_institution_level_type' => 'getPostSecondaryInstitutionLevelType',
        'administrative_funding_control_descriptor' => 'getAdministrativeFundingControlDescriptor',
        'identification_codes' => 'getIdentificationCodes',
        'medium_of_instructions' => 'getMediumOfInstructions'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $name_of_institution The full, legally accepted name of the institution.
      * @var string
      */
    protected $name_of_institution;
    
    /**
      * $post_secondary_institution_id A unique number or alphanumeric code assigned to the postsecondary organization.
      * @var string
      */
    protected $post_secondary_institution_id;
    
    /**
      * $post_secondary_institution_level_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $post_secondary_institution_level_type;
    
    /**
      * $administrative_funding_control_descriptor Key for AdministrationFundingControl
      * @var string
      */
    protected $administrative_funding_control_descriptor;
    
    /**
      * $identification_codes An unordered collection of postSecondaryEventPostSecondaryInstitutionIdentificationCodes.  A unique number or alphanumeric code assigned to an education organization by a school, school system, state or other agency or entity.
      * @var \Swagger\Client\Model\PostSecondaryEventPostSecondaryInstitutionIdentificationCode[]
      */
    protected $identification_codes;
    
    /**
      * $medium_of_instructions An unordered collection of postSecondaryEventPostSecondaryInstitutionMediumOfInstructions.  The categories in which an institution serves the students.
      * @var \Swagger\Client\Model\PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction[]
      */
    protected $medium_of_instructions;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->name_of_institution = $data["name_of_institution"];
            $this->post_secondary_institution_id = $data["post_secondary_institution_id"];
            $this->post_secondary_institution_level_type = $data["post_secondary_institution_level_type"];
            $this->administrative_funding_control_descriptor = $data["administrative_funding_control_descriptor"];
            $this->identification_codes = $data["identification_codes"];
            $this->medium_of_instructions = $data["medium_of_instructions"];
        }
    }
    
    /**
     * Gets name_of_institution
     * @return string
     */
    public function getNameOfInstitution()
    {
        return $this->name_of_institution;
    }
  
    /**
     * Sets name_of_institution
     * @param string $name_of_institution The full, legally accepted name of the institution.
     * @return $this
     */
    public function setNameOfInstitution($name_of_institution)
    {
        
        $this->name_of_institution = $name_of_institution;
        return $this;
    }
    
    /**
     * Gets post_secondary_institution_id
     * @return string
     */
    public function getPostSecondaryInstitutionId()
    {
        return $this->post_secondary_institution_id;
    }
  
    /**
     * Sets post_secondary_institution_id
     * @param string $post_secondary_institution_id A unique number or alphanumeric code assigned to the postsecondary organization.
     * @return $this
     */
    public function setPostSecondaryInstitutionId($post_secondary_institution_id)
    {
        
        $this->post_secondary_institution_id = $post_secondary_institution_id;
        return $this;
    }
    
    /**
     * Gets post_secondary_institution_level_type
     * @return string
     */
    public function getPostSecondaryInstitutionLevelType()
    {
        return $this->post_secondary_institution_level_type;
    }
  
    /**
     * Sets post_secondary_institution_level_type
     * @param string $post_secondary_institution_level_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setPostSecondaryInstitutionLevelType($post_secondary_institution_level_type)
    {
        
        $this->post_secondary_institution_level_type = $post_secondary_institution_level_type;
        return $this;
    }
    
    /**
     * Gets administrative_funding_control_descriptor
     * @return string
     */
    public function getAdministrativeFundingControlDescriptor()
    {
        return $this->administrative_funding_control_descriptor;
    }
  
    /**
     * Sets administrative_funding_control_descriptor
     * @param string $administrative_funding_control_descriptor Key for AdministrationFundingControl
     * @return $this
     */
    public function setAdministrativeFundingControlDescriptor($administrative_funding_control_descriptor)
    {
        
        $this->administrative_funding_control_descriptor = $administrative_funding_control_descriptor;
        return $this;
    }
    
    /**
     * Gets identification_codes
     * @return \Swagger\Client\Model\PostSecondaryEventPostSecondaryInstitutionIdentificationCode[]
     */
    public function getIdentificationCodes()
    {
        return $this->identification_codes;
    }
  
    /**
     * Sets identification_codes
     * @param \Swagger\Client\Model\PostSecondaryEventPostSecondaryInstitutionIdentificationCode[] $identification_codes An unordered collection of postSecondaryEventPostSecondaryInstitutionIdentificationCodes.  A unique number or alphanumeric code assigned to an education organization by a school, school system, state or other agency or entity.
     * @return $this
     */
    public function setIdentificationCodes($identification_codes)
    {
        
        $this->identification_codes = $identification_codes;
        return $this;
    }
    
    /**
     * Gets medium_of_instructions
     * @return \Swagger\Client\Model\PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction[]
     */
    public function getMediumOfInstructions()
    {
        return $this->medium_of_instructions;
    }
  
    /**
     * Sets medium_of_instructions
     * @param \Swagger\Client\Model\PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction[] $medium_of_instructions An unordered collection of postSecondaryEventPostSecondaryInstitutionMediumOfInstructions.  The categories in which an institution serves the students.
     * @return $this
     */
    public function setMediumOfInstructions($medium_of_instructions)
    {
        
        $this->medium_of_instructions = $medium_of_instructions;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
