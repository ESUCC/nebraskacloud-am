<?php
/**
 * StudentInterventionAssociationInterventionEffectiveness
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * StudentInterventionAssociationInterventionEffectiveness Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StudentInterventionAssociationInterventionEffectiveness implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'diagnosis_descriptor' => 'string',
        'population_served_type' => 'string',
        'grade_level_descriptor' => 'string',
        'improvement_index' => 'int',
        'intervention_effectiveness_rating_type' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'diagnosis_descriptor' => 'diagnosisDescriptor',
        'population_served_type' => 'populationServedType',
        'grade_level_descriptor' => 'gradeLevelDescriptor',
        'improvement_index' => 'improvementIndex',
        'intervention_effectiveness_rating_type' => 'interventionEffectivenessRatingType'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'diagnosis_descriptor' => 'setDiagnosisDescriptor',
        'population_served_type' => 'setPopulationServedType',
        'grade_level_descriptor' => 'setGradeLevelDescriptor',
        'improvement_index' => 'setImprovementIndex',
        'intervention_effectiveness_rating_type' => 'setInterventionEffectivenessRatingType'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'diagnosis_descriptor' => 'getDiagnosisDescriptor',
        'population_served_type' => 'getPopulationServedType',
        'grade_level_descriptor' => 'getGradeLevelDescriptor',
        'improvement_index' => 'getImprovementIndex',
        'intervention_effectiveness_rating_type' => 'getInterventionEffectivenessRatingType'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $diagnosis_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $diagnosis_descriptor;
    
    /**
      * $population_served_type Key for PopulationServed
      * @var string
      */
    protected $population_served_type;
    
    /**
      * $grade_level_descriptor Key for GradeLevel
      * @var string
      */
    protected $grade_level_descriptor;
    
    /**
      * $improvement_index Along a percentile distribution of students, the improvement index represents the change in an average student's percentile rank that is considered to be due to the intervention.
      * @var int
      */
    protected $improvement_index;
    
    /**
      * $intervention_effectiveness_rating_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $intervention_effectiveness_rating_type;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->diagnosis_descriptor = $data["diagnosis_descriptor"];
            $this->population_served_type = $data["population_served_type"];
            $this->grade_level_descriptor = $data["grade_level_descriptor"];
            $this->improvement_index = $data["improvement_index"];
            $this->intervention_effectiveness_rating_type = $data["intervention_effectiveness_rating_type"];
        }
    }
    
    /**
     * Gets diagnosis_descriptor
     * @return string
     */
    public function getDiagnosisDescriptor()
    {
        return $this->diagnosis_descriptor;
    }
  
    /**
     * Sets diagnosis_descriptor
     * @param string $diagnosis_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setDiagnosisDescriptor($diagnosis_descriptor)
    {
        
        $this->diagnosis_descriptor = $diagnosis_descriptor;
        return $this;
    }
    
    /**
     * Gets population_served_type
     * @return string
     */
    public function getPopulationServedType()
    {
        return $this->population_served_type;
    }
  
    /**
     * Sets population_served_type
     * @param string $population_served_type Key for PopulationServed
     * @return $this
     */
    public function setPopulationServedType($population_served_type)
    {
        
        $this->population_served_type = $population_served_type;
        return $this;
    }
    
    /**
     * Gets grade_level_descriptor
     * @return string
     */
    public function getGradeLevelDescriptor()
    {
        return $this->grade_level_descriptor;
    }
  
    /**
     * Sets grade_level_descriptor
     * @param string $grade_level_descriptor Key for GradeLevel
     * @return $this
     */
    public function setGradeLevelDescriptor($grade_level_descriptor)
    {
        
        $this->grade_level_descriptor = $grade_level_descriptor;
        return $this;
    }
    
    /**
     * Gets improvement_index
     * @return int
     */
    public function getImprovementIndex()
    {
        return $this->improvement_index;
    }
  
    /**
     * Sets improvement_index
     * @param int $improvement_index Along a percentile distribution of students, the improvement index represents the change in an average student's percentile rank that is considered to be due to the intervention.
     * @return $this
     */
    public function setImprovementIndex($improvement_index)
    {
        
        $this->improvement_index = $improvement_index;
        return $this;
    }
    
    /**
     * Gets intervention_effectiveness_rating_type
     * @return string
     */
    public function getInterventionEffectivenessRatingType()
    {
        return $this->intervention_effectiveness_rating_type;
    }
  
    /**
     * Sets intervention_effectiveness_rating_type
     * @param string $intervention_effectiveness_rating_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setInterventionEffectivenessRatingType($intervention_effectiveness_rating_type)
    {
        
        $this->intervention_effectiveness_rating_type = $intervention_effectiveness_rating_type;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
