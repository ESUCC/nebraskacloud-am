<?php
/**
 * StudentAcademicRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * StudentAcademicRecord Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StudentAcademicRecord implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'education_organization_reference' => '\Swagger\Client\Model\EducationOrganizationReference',
        'school_year_type_reference' => '\Swagger\Client\Model\SchoolYearTypeReference',
        'student_reference' => '\Swagger\Client\Model\StudentReference',
        'term_descriptor' => 'string',
        'cumulative_earned_credit_type' => 'string',
        'cumulative_earned_credit_conversion' => 'Number',
        'cumulative_earned_credits' => 'Number',
        'cumulative_attempted_credit_type' => 'string',
        'cumulative_attempted_credit_conversion' => 'Number',
        'cumulative_attempted_credits' => 'Number',
        'cumulative_grade_points_earned' => 'Number',
        'cumulative_grade_point_average' => 'Number',
        'grade_value_qualifier' => 'string',
        'projected_graduation_date' => '\\DateTime',
        'session_earned_credit_type' => 'string',
        'session_earned_credit_conversion' => 'Number',
        'session_earned_credits' => 'Number',
        'session_attempted_credit_type' => 'string',
        'session_attempted_credit_conversion' => 'Number',
        'session_attempted_credits' => 'Number',
        'session_grade_points_earned' => 'Number',
        'session_grade_point_average' => 'Number',
        'class_ranking' => '\Swagger\Client\Model\StudentAcademicRecordClassRanking',
        'academic_honors' => '\Swagger\Client\Model\StudentAcademicRecordAcademicHonor[]',
        'diplomas' => '\Swagger\Client\Model\StudentAcademicRecordDiploma[]',
        'recognitions' => '\Swagger\Client\Model\StudentAcademicRecordRecognition[]',
        'report_cards' => '\Swagger\Client\Model\StudentAcademicRecordReportCard[]',
        '_etag' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'education_organization_reference' => 'educationOrganizationReference',
        'school_year_type_reference' => 'schoolYearTypeReference',
        'student_reference' => 'studentReference',
        'term_descriptor' => 'termDescriptor',
        'cumulative_earned_credit_type' => 'cumulativeEarnedCreditType',
        'cumulative_earned_credit_conversion' => 'cumulativeEarnedCreditConversion',
        'cumulative_earned_credits' => 'cumulativeEarnedCredits',
        'cumulative_attempted_credit_type' => 'cumulativeAttemptedCreditType',
        'cumulative_attempted_credit_conversion' => 'cumulativeAttemptedCreditConversion',
        'cumulative_attempted_credits' => 'cumulativeAttemptedCredits',
        'cumulative_grade_points_earned' => 'cumulativeGradePointsEarned',
        'cumulative_grade_point_average' => 'cumulativeGradePointAverage',
        'grade_value_qualifier' => 'gradeValueQualifier',
        'projected_graduation_date' => 'projectedGraduationDate',
        'session_earned_credit_type' => 'sessionEarnedCreditType',
        'session_earned_credit_conversion' => 'sessionEarnedCreditConversion',
        'session_earned_credits' => 'sessionEarnedCredits',
        'session_attempted_credit_type' => 'sessionAttemptedCreditType',
        'session_attempted_credit_conversion' => 'sessionAttemptedCreditConversion',
        'session_attempted_credits' => 'sessionAttemptedCredits',
        'session_grade_points_earned' => 'sessionGradePointsEarned',
        'session_grade_point_average' => 'sessionGradePointAverage',
        'class_ranking' => 'classRanking',
        'academic_honors' => 'academicHonors',
        'diplomas' => 'diplomas',
        'recognitions' => 'recognitions',
        'report_cards' => 'reportCards',
        '_etag' => '_etag'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'school_year_type_reference' => 'setSchoolYearTypeReference',
        'student_reference' => 'setStudentReference',
        'term_descriptor' => 'setTermDescriptor',
        'cumulative_earned_credit_type' => 'setCumulativeEarnedCreditType',
        'cumulative_earned_credit_conversion' => 'setCumulativeEarnedCreditConversion',
        'cumulative_earned_credits' => 'setCumulativeEarnedCredits',
        'cumulative_attempted_credit_type' => 'setCumulativeAttemptedCreditType',
        'cumulative_attempted_credit_conversion' => 'setCumulativeAttemptedCreditConversion',
        'cumulative_attempted_credits' => 'setCumulativeAttemptedCredits',
        'cumulative_grade_points_earned' => 'setCumulativeGradePointsEarned',
        'cumulative_grade_point_average' => 'setCumulativeGradePointAverage',
        'grade_value_qualifier' => 'setGradeValueQualifier',
        'projected_graduation_date' => 'setProjectedGraduationDate',
        'session_earned_credit_type' => 'setSessionEarnedCreditType',
        'session_earned_credit_conversion' => 'setSessionEarnedCreditConversion',
        'session_earned_credits' => 'setSessionEarnedCredits',
        'session_attempted_credit_type' => 'setSessionAttemptedCreditType',
        'session_attempted_credit_conversion' => 'setSessionAttemptedCreditConversion',
        'session_attempted_credits' => 'setSessionAttemptedCredits',
        'session_grade_points_earned' => 'setSessionGradePointsEarned',
        'session_grade_point_average' => 'setSessionGradePointAverage',
        'class_ranking' => 'setClassRanking',
        'academic_honors' => 'setAcademicHonors',
        'diplomas' => 'setDiplomas',
        'recognitions' => 'setRecognitions',
        'report_cards' => 'setReportCards',
        '_etag' => 'setEtag'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'school_year_type_reference' => 'getSchoolYearTypeReference',
        'student_reference' => 'getStudentReference',
        'term_descriptor' => 'getTermDescriptor',
        'cumulative_earned_credit_type' => 'getCumulativeEarnedCreditType',
        'cumulative_earned_credit_conversion' => 'getCumulativeEarnedCreditConversion',
        'cumulative_earned_credits' => 'getCumulativeEarnedCredits',
        'cumulative_attempted_credit_type' => 'getCumulativeAttemptedCreditType',
        'cumulative_attempted_credit_conversion' => 'getCumulativeAttemptedCreditConversion',
        'cumulative_attempted_credits' => 'getCumulativeAttemptedCredits',
        'cumulative_grade_points_earned' => 'getCumulativeGradePointsEarned',
        'cumulative_grade_point_average' => 'getCumulativeGradePointAverage',
        'grade_value_qualifier' => 'getGradeValueQualifier',
        'projected_graduation_date' => 'getProjectedGraduationDate',
        'session_earned_credit_type' => 'getSessionEarnedCreditType',
        'session_earned_credit_conversion' => 'getSessionEarnedCreditConversion',
        'session_earned_credits' => 'getSessionEarnedCredits',
        'session_attempted_credit_type' => 'getSessionAttemptedCreditType',
        'session_attempted_credit_conversion' => 'getSessionAttemptedCreditConversion',
        'session_attempted_credits' => 'getSessionAttemptedCredits',
        'session_grade_points_earned' => 'getSessionGradePointsEarned',
        'session_grade_point_average' => 'getSessionGradePointAverage',
        'class_ranking' => 'getClassRanking',
        'academic_honors' => 'getAcademicHonors',
        'diplomas' => 'getDiplomas',
        'recognitions' => 'getRecognitions',
        'report_cards' => 'getReportCards',
        '_etag' => 'getEtag'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $education_organization_reference A reference to the related EducationOrganization resource.
      * @var \Swagger\Client\Model\EducationOrganizationReference
      */
    protected $education_organization_reference;
    
    /**
      * $school_year_type_reference A reference to the related SchoolYearType resource.
      * @var \Swagger\Client\Model\SchoolYearTypeReference
      */
    protected $school_year_type_reference;
    
    /**
      * $student_reference A reference to the related Student resource.
      * @var \Swagger\Client\Model\StudentReference
      */
    protected $student_reference;
    
    /**
      * $term_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $term_descriptor;
    
    /**
      * $cumulative_earned_credit_type Key for Credit
      * @var string
      */
    protected $cumulative_earned_credit_type;
    
    /**
      * $cumulative_earned_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
      * @var Number
      */
    protected $cumulative_earned_credit_conversion;
    
    /**
      * $cumulative_earned_credits The cumulative number of credits an individual earns by completing courses or examinations during his or her enrollment in the current school as well as those credits transferred from schools in which the individual had been previously enrolled.
      * @var Number
      */
    protected $cumulative_earned_credits;
    
    /**
      * $cumulative_attempted_credit_type Key for Credit
      * @var string
      */
    protected $cumulative_attempted_credit_type;
    
    /**
      * $cumulative_attempted_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
      * @var Number
      */
    protected $cumulative_attempted_credit_conversion;
    
    /**
      * $cumulative_attempted_credits The cumulative number of credits an individual attempts to earn by taking courses during his or her enrollment in the current school as well as those credits transferred from schools in which the individual had been previously enrolled.
      * @var Number
      */
    protected $cumulative_attempted_credits;
    
    /**
      * $cumulative_grade_points_earned The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.
      * @var Number
      */
    protected $cumulative_grade_points_earned;
    
    /**
      * $cumulative_grade_point_average A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.
      * @var Number
      */
    protected $cumulative_grade_point_average;
    
    /**
      * $grade_value_qualifier The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student's Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.).
      * @var string
      */
    protected $grade_value_qualifier;
    
    /**
      * $projected_graduation_date The month and year the student is projected to graduate.
      * @var \\DateTime
      */
    protected $projected_graduation_date;
    
    /**
      * $session_earned_credit_type Key for Credit
      * @var string
      */
    protected $session_earned_credit_type;
    
    /**
      * $session_earned_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
      * @var Number
      */
    protected $session_earned_credit_conversion;
    
    /**
      * $session_earned_credits The number of an credits an individual earned in this session.
      * @var Number
      */
    protected $session_earned_credits;
    
    /**
      * $session_attempted_credit_type Key for Credit
      * @var string
      */
    protected $session_attempted_credit_type;
    
    /**
      * $session_attempted_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
      * @var Number
      */
    protected $session_attempted_credit_conversion;
    
    /**
      * $session_attempted_credits The number of an credits an individual attempted to earn in this session.
      * @var Number
      */
    protected $session_attempted_credits;
    
    /**
      * $session_grade_points_earned The number of grade points an individual earned for this session.
      * @var Number
      */
    protected $session_grade_points_earned;
    
    /**
      * $session_grade_point_average The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.
      * @var Number
      */
    protected $session_grade_point_average;
    
    /**
      * $class_ranking The academic rank information of a student in relation to his or her graduating class
      * @var \Swagger\Client\Model\StudentAcademicRecordClassRanking
      */
    protected $class_ranking;
    
    /**
      * $academic_honors An unordered collection of studentAcademicRecordAcademicHonors.  
      * @var \Swagger\Client\Model\StudentAcademicRecordAcademicHonor[]
      */
    protected $academic_honors;
    
    /**
      * $diplomas An unordered collection of studentAcademicRecordDiplomas.  This educational entity represents the conferring or certification by an educational organization that the student has successfully completed a particular course of study. It represents the electronic version of its physical document counterpart.
      * @var \Swagger\Client\Model\StudentAcademicRecordDiploma[]
      */
    protected $diplomas;
    
    /**
      * $recognitions An unordered collection of studentAcademicRecordRecognitions.  Recognition given to the student for accomplishments in a co-curricular or extra-curricular activity.
      * @var \Swagger\Client\Model\StudentAcademicRecordRecognition[]
      */
    protected $recognitions;
    
    /**
      * $report_cards An unordered collection of studentAcademicRecordReportCards.  Report cards for the student.
      * @var \Swagger\Client\Model\StudentAcademicRecordReportCard[]
      */
    protected $report_cards;
    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->education_organization_reference = $data["education_organization_reference"];
            $this->school_year_type_reference = $data["school_year_type_reference"];
            $this->student_reference = $data["student_reference"];
            $this->term_descriptor = $data["term_descriptor"];
            $this->cumulative_earned_credit_type = $data["cumulative_earned_credit_type"];
            $this->cumulative_earned_credit_conversion = $data["cumulative_earned_credit_conversion"];
            $this->cumulative_earned_credits = $data["cumulative_earned_credits"];
            $this->cumulative_attempted_credit_type = $data["cumulative_attempted_credit_type"];
            $this->cumulative_attempted_credit_conversion = $data["cumulative_attempted_credit_conversion"];
            $this->cumulative_attempted_credits = $data["cumulative_attempted_credits"];
            $this->cumulative_grade_points_earned = $data["cumulative_grade_points_earned"];
            $this->cumulative_grade_point_average = $data["cumulative_grade_point_average"];
            $this->grade_value_qualifier = $data["grade_value_qualifier"];
            $this->projected_graduation_date = $data["projected_graduation_date"];
            $this->session_earned_credit_type = $data["session_earned_credit_type"];
            $this->session_earned_credit_conversion = $data["session_earned_credit_conversion"];
            $this->session_earned_credits = $data["session_earned_credits"];
            $this->session_attempted_credit_type = $data["session_attempted_credit_type"];
            $this->session_attempted_credit_conversion = $data["session_attempted_credit_conversion"];
            $this->session_attempted_credits = $data["session_attempted_credits"];
            $this->session_grade_points_earned = $data["session_grade_points_earned"];
            $this->session_grade_point_average = $data["session_grade_point_average"];
            $this->class_ranking = $data["class_ranking"];
            $this->academic_honors = $data["academic_honors"];
            $this->diplomas = $data["diplomas"];
            $this->recognitions = $data["recognitions"];
            $this->report_cards = $data["report_cards"];
            $this->_etag = $data["_etag"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets education_organization_reference
     * @return \Swagger\Client\Model\EducationOrganizationReference
     */
    public function getEducationOrganizationReference()
    {
        return $this->education_organization_reference;
    }
  
    /**
     * Sets education_organization_reference
     * @param \Swagger\Client\Model\EducationOrganizationReference $education_organization_reference A reference to the related EducationOrganization resource.
     * @return $this
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        
        $this->education_organization_reference = $education_organization_reference;
        return $this;
    }
    
    /**
     * Gets school_year_type_reference
     * @return \Swagger\Client\Model\SchoolYearTypeReference
     */
    public function getSchoolYearTypeReference()
    {
        return $this->school_year_type_reference;
    }
  
    /**
     * Sets school_year_type_reference
     * @param \Swagger\Client\Model\SchoolYearTypeReference $school_year_type_reference A reference to the related SchoolYearType resource.
     * @return $this
     */
    public function setSchoolYearTypeReference($school_year_type_reference)
    {
        
        $this->school_year_type_reference = $school_year_type_reference;
        return $this;
    }
    
    /**
     * Gets student_reference
     * @return \Swagger\Client\Model\StudentReference
     */
    public function getStudentReference()
    {
        return $this->student_reference;
    }
  
    /**
     * Sets student_reference
     * @param \Swagger\Client\Model\StudentReference $student_reference A reference to the related Student resource.
     * @return $this
     */
    public function setStudentReference($student_reference)
    {
        
        $this->student_reference = $student_reference;
        return $this;
    }
    
    /**
     * Gets term_descriptor
     * @return string
     */
    public function getTermDescriptor()
    {
        return $this->term_descriptor;
    }
  
    /**
     * Sets term_descriptor
     * @param string $term_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setTermDescriptor($term_descriptor)
    {
        
        $this->term_descriptor = $term_descriptor;
        return $this;
    }
    
    /**
     * Gets cumulative_earned_credit_type
     * @return string
     */
    public function getCumulativeEarnedCreditType()
    {
        return $this->cumulative_earned_credit_type;
    }
  
    /**
     * Sets cumulative_earned_credit_type
     * @param string $cumulative_earned_credit_type Key for Credit
     * @return $this
     */
    public function setCumulativeEarnedCreditType($cumulative_earned_credit_type)
    {
        
        $this->cumulative_earned_credit_type = $cumulative_earned_credit_type;
        return $this;
    }
    
    /**
     * Gets cumulative_earned_credit_conversion
     * @return Number
     */
    public function getCumulativeEarnedCreditConversion()
    {
        return $this->cumulative_earned_credit_conversion;
    }
  
    /**
     * Sets cumulative_earned_credit_conversion
     * @param Number $cumulative_earned_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     * @return $this
     */
    public function setCumulativeEarnedCreditConversion($cumulative_earned_credit_conversion)
    {
        
        $this->cumulative_earned_credit_conversion = $cumulative_earned_credit_conversion;
        return $this;
    }
    
    /**
     * Gets cumulative_earned_credits
     * @return Number
     */
    public function getCumulativeEarnedCredits()
    {
        return $this->cumulative_earned_credits;
    }
  
    /**
     * Sets cumulative_earned_credits
     * @param Number $cumulative_earned_credits The cumulative number of credits an individual earns by completing courses or examinations during his or her enrollment in the current school as well as those credits transferred from schools in which the individual had been previously enrolled.
     * @return $this
     */
    public function setCumulativeEarnedCredits($cumulative_earned_credits)
    {
        
        $this->cumulative_earned_credits = $cumulative_earned_credits;
        return $this;
    }
    
    /**
     * Gets cumulative_attempted_credit_type
     * @return string
     */
    public function getCumulativeAttemptedCreditType()
    {
        return $this->cumulative_attempted_credit_type;
    }
  
    /**
     * Sets cumulative_attempted_credit_type
     * @param string $cumulative_attempted_credit_type Key for Credit
     * @return $this
     */
    public function setCumulativeAttemptedCreditType($cumulative_attempted_credit_type)
    {
        
        $this->cumulative_attempted_credit_type = $cumulative_attempted_credit_type;
        return $this;
    }
    
    /**
     * Gets cumulative_attempted_credit_conversion
     * @return Number
     */
    public function getCumulativeAttemptedCreditConversion()
    {
        return $this->cumulative_attempted_credit_conversion;
    }
  
    /**
     * Sets cumulative_attempted_credit_conversion
     * @param Number $cumulative_attempted_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     * @return $this
     */
    public function setCumulativeAttemptedCreditConversion($cumulative_attempted_credit_conversion)
    {
        
        $this->cumulative_attempted_credit_conversion = $cumulative_attempted_credit_conversion;
        return $this;
    }
    
    /**
     * Gets cumulative_attempted_credits
     * @return Number
     */
    public function getCumulativeAttemptedCredits()
    {
        return $this->cumulative_attempted_credits;
    }
  
    /**
     * Sets cumulative_attempted_credits
     * @param Number $cumulative_attempted_credits The cumulative number of credits an individual attempts to earn by taking courses during his or her enrollment in the current school as well as those credits transferred from schools in which the individual had been previously enrolled.
     * @return $this
     */
    public function setCumulativeAttemptedCredits($cumulative_attempted_credits)
    {
        
        $this->cumulative_attempted_credits = $cumulative_attempted_credits;
        return $this;
    }
    
    /**
     * Gets cumulative_grade_points_earned
     * @return Number
     */
    public function getCumulativeGradePointsEarned()
    {
        return $this->cumulative_grade_points_earned;
    }
  
    /**
     * Sets cumulative_grade_points_earned
     * @param Number $cumulative_grade_points_earned The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.
     * @return $this
     */
    public function setCumulativeGradePointsEarned($cumulative_grade_points_earned)
    {
        
        $this->cumulative_grade_points_earned = $cumulative_grade_points_earned;
        return $this;
    }
    
    /**
     * Gets cumulative_grade_point_average
     * @return Number
     */
    public function getCumulativeGradePointAverage()
    {
        return $this->cumulative_grade_point_average;
    }
  
    /**
     * Sets cumulative_grade_point_average
     * @param Number $cumulative_grade_point_average A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.
     * @return $this
     */
    public function setCumulativeGradePointAverage($cumulative_grade_point_average)
    {
        
        $this->cumulative_grade_point_average = $cumulative_grade_point_average;
        return $this;
    }
    
    /**
     * Gets grade_value_qualifier
     * @return string
     */
    public function getGradeValueQualifier()
    {
        return $this->grade_value_qualifier;
    }
  
    /**
     * Sets grade_value_qualifier
     * @param string $grade_value_qualifier The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student's Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.).
     * @return $this
     */
    public function setGradeValueQualifier($grade_value_qualifier)
    {
        
        $this->grade_value_qualifier = $grade_value_qualifier;
        return $this;
    }
    
    /**
     * Gets projected_graduation_date
     * @return \\DateTime
     */
    public function getProjectedGraduationDate()
    {
        return $this->projected_graduation_date;
    }
  
    /**
     * Sets projected_graduation_date
     * @param \\DateTime $projected_graduation_date The month and year the student is projected to graduate.
     * @return $this
     */
    public function setProjectedGraduationDate($projected_graduation_date)
    {
        
        $this->projected_graduation_date = $projected_graduation_date;
        return $this;
    }
    
    /**
     * Gets session_earned_credit_type
     * @return string
     */
    public function getSessionEarnedCreditType()
    {
        return $this->session_earned_credit_type;
    }
  
    /**
     * Sets session_earned_credit_type
     * @param string $session_earned_credit_type Key for Credit
     * @return $this
     */
    public function setSessionEarnedCreditType($session_earned_credit_type)
    {
        
        $this->session_earned_credit_type = $session_earned_credit_type;
        return $this;
    }
    
    /**
     * Gets session_earned_credit_conversion
     * @return Number
     */
    public function getSessionEarnedCreditConversion()
    {
        return $this->session_earned_credit_conversion;
    }
  
    /**
     * Sets session_earned_credit_conversion
     * @param Number $session_earned_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     * @return $this
     */
    public function setSessionEarnedCreditConversion($session_earned_credit_conversion)
    {
        
        $this->session_earned_credit_conversion = $session_earned_credit_conversion;
        return $this;
    }
    
    /**
     * Gets session_earned_credits
     * @return Number
     */
    public function getSessionEarnedCredits()
    {
        return $this->session_earned_credits;
    }
  
    /**
     * Sets session_earned_credits
     * @param Number $session_earned_credits The number of an credits an individual earned in this session.
     * @return $this
     */
    public function setSessionEarnedCredits($session_earned_credits)
    {
        
        $this->session_earned_credits = $session_earned_credits;
        return $this;
    }
    
    /**
     * Gets session_attempted_credit_type
     * @return string
     */
    public function getSessionAttemptedCreditType()
    {
        return $this->session_attempted_credit_type;
    }
  
    /**
     * Sets session_attempted_credit_type
     * @param string $session_attempted_credit_type Key for Credit
     * @return $this
     */
    public function setSessionAttemptedCreditType($session_attempted_credit_type)
    {
        
        $this->session_attempted_credit_type = $session_attempted_credit_type;
        return $this;
    }
    
    /**
     * Gets session_attempted_credit_conversion
     * @return Number
     */
    public function getSessionAttemptedCreditConversion()
    {
        return $this->session_attempted_credit_conversion;
    }
  
    /**
     * Sets session_attempted_credit_conversion
     * @param Number $session_attempted_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     * @return $this
     */
    public function setSessionAttemptedCreditConversion($session_attempted_credit_conversion)
    {
        
        $this->session_attempted_credit_conversion = $session_attempted_credit_conversion;
        return $this;
    }
    
    /**
     * Gets session_attempted_credits
     * @return Number
     */
    public function getSessionAttemptedCredits()
    {
        return $this->session_attempted_credits;
    }
  
    /**
     * Sets session_attempted_credits
     * @param Number $session_attempted_credits The number of an credits an individual attempted to earn in this session.
     * @return $this
     */
    public function setSessionAttemptedCredits($session_attempted_credits)
    {
        
        $this->session_attempted_credits = $session_attempted_credits;
        return $this;
    }
    
    /**
     * Gets session_grade_points_earned
     * @return Number
     */
    public function getSessionGradePointsEarned()
    {
        return $this->session_grade_points_earned;
    }
  
    /**
     * Sets session_grade_points_earned
     * @param Number $session_grade_points_earned The number of grade points an individual earned for this session.
     * @return $this
     */
    public function setSessionGradePointsEarned($session_grade_points_earned)
    {
        
        $this->session_grade_points_earned = $session_grade_points_earned;
        return $this;
    }
    
    /**
     * Gets session_grade_point_average
     * @return Number
     */
    public function getSessionGradePointAverage()
    {
        return $this->session_grade_point_average;
    }
  
    /**
     * Sets session_grade_point_average
     * @param Number $session_grade_point_average The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.
     * @return $this
     */
    public function setSessionGradePointAverage($session_grade_point_average)
    {
        
        $this->session_grade_point_average = $session_grade_point_average;
        return $this;
    }
    
    /**
     * Gets class_ranking
     * @return \Swagger\Client\Model\StudentAcademicRecordClassRanking
     */
    public function getClassRanking()
    {
        return $this->class_ranking;
    }
  
    /**
     * Sets class_ranking
     * @param \Swagger\Client\Model\StudentAcademicRecordClassRanking $class_ranking The academic rank information of a student in relation to his or her graduating class
     * @return $this
     */
    public function setClassRanking($class_ranking)
    {
        
        $this->class_ranking = $class_ranking;
        return $this;
    }
    
    /**
     * Gets academic_honors
     * @return \Swagger\Client\Model\StudentAcademicRecordAcademicHonor[]
     */
    public function getAcademicHonors()
    {
        return $this->academic_honors;
    }
  
    /**
     * Sets academic_honors
     * @param \Swagger\Client\Model\StudentAcademicRecordAcademicHonor[] $academic_honors An unordered collection of studentAcademicRecordAcademicHonors.  
     * @return $this
     */
    public function setAcademicHonors($academic_honors)
    {
        
        $this->academic_honors = $academic_honors;
        return $this;
    }
    
    /**
     * Gets diplomas
     * @return \Swagger\Client\Model\StudentAcademicRecordDiploma[]
     */
    public function getDiplomas()
    {
        return $this->diplomas;
    }
  
    /**
     * Sets diplomas
     * @param \Swagger\Client\Model\StudentAcademicRecordDiploma[] $diplomas An unordered collection of studentAcademicRecordDiplomas.  This educational entity represents the conferring or certification by an educational organization that the student has successfully completed a particular course of study. It represents the electronic version of its physical document counterpart.
     * @return $this
     */
    public function setDiplomas($diplomas)
    {
        
        $this->diplomas = $diplomas;
        return $this;
    }
    
    /**
     * Gets recognitions
     * @return \Swagger\Client\Model\StudentAcademicRecordRecognition[]
     */
    public function getRecognitions()
    {
        return $this->recognitions;
    }
  
    /**
     * Sets recognitions
     * @param \Swagger\Client\Model\StudentAcademicRecordRecognition[] $recognitions An unordered collection of studentAcademicRecordRecognitions.  Recognition given to the student for accomplishments in a co-curricular or extra-curricular activity.
     * @return $this
     */
    public function setRecognitions($recognitions)
    {
        
        $this->recognitions = $recognitions;
        return $this;
    }
    
    /**
     * Gets report_cards
     * @return \Swagger\Client\Model\StudentAcademicRecordReportCard[]
     */
    public function getReportCards()
    {
        return $this->report_cards;
    }
  
    /**
     * Sets report_cards
     * @param \Swagger\Client\Model\StudentAcademicRecordReportCard[] $report_cards An unordered collection of studentAcademicRecordReportCards.  Report cards for the student.
     * @return $this
     */
    public function setReportCards($report_cards)
    {
        
        $this->report_cards = $report_cards;
        return $this;
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
