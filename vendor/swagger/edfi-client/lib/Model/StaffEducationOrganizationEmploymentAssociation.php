<?php
/**
 * StaffEducationOrganizationEmploymentAssociation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * StaffEducationOrganizationEmploymentAssociation Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StaffEducationOrganizationEmploymentAssociation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'education_organization_reference' => '\Swagger\Client\Model\EducationOrganizationReference',
        'staff_reference' => '\Swagger\Client\Model\StaffReference',
        'employment_status_descriptor' => 'string',
        'hire_date' => '\\DateTime',
        'end_date' => '\\DateTime',
        'separation_type' => 'string',
        'separation_reason_descriptor' => 'string',
        'department' => 'string',
        'full_time_equivalency' => 'Number',
        'offer_date' => '\\DateTime',
        'hourly_wage' => 'Number',
        '_etag' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'education_organization_reference' => 'educationOrganizationReference',
        'staff_reference' => 'staffReference',
        'employment_status_descriptor' => 'employmentStatusDescriptor',
        'hire_date' => 'hireDate',
        'end_date' => 'endDate',
        'separation_type' => 'separationType',
        'separation_reason_descriptor' => 'separationReasonDescriptor',
        'department' => 'department',
        'full_time_equivalency' => 'fullTimeEquivalency',
        'offer_date' => 'offerDate',
        'hourly_wage' => 'hourlyWage',
        '_etag' => '_etag'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'staff_reference' => 'setStaffReference',
        'employment_status_descriptor' => 'setEmploymentStatusDescriptor',
        'hire_date' => 'setHireDate',
        'end_date' => 'setEndDate',
        'separation_type' => 'setSeparationType',
        'separation_reason_descriptor' => 'setSeparationReasonDescriptor',
        'department' => 'setDepartment',
        'full_time_equivalency' => 'setFullTimeEquivalency',
        'offer_date' => 'setOfferDate',
        'hourly_wage' => 'setHourlyWage',
        '_etag' => 'setEtag'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'staff_reference' => 'getStaffReference',
        'employment_status_descriptor' => 'getEmploymentStatusDescriptor',
        'hire_date' => 'getHireDate',
        'end_date' => 'getEndDate',
        'separation_type' => 'getSeparationType',
        'separation_reason_descriptor' => 'getSeparationReasonDescriptor',
        'department' => 'getDepartment',
        'full_time_equivalency' => 'getFullTimeEquivalency',
        'offer_date' => 'getOfferDate',
        'hourly_wage' => 'getHourlyWage',
        '_etag' => 'getEtag'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $education_organization_reference A reference to the related EducationOrganization resource.
      * @var \Swagger\Client\Model\EducationOrganizationReference
      */
    protected $education_organization_reference;
    
    /**
      * $staff_reference A reference to the related Staff resource.
      * @var \Swagger\Client\Model\StaffReference
      */
    protected $staff_reference;
    
    /**
      * $employment_status_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $employment_status_descriptor;
    
    /**
      * $hire_date The month, day, and year on which an individual was hired for a position.
      * @var \\DateTime
      */
    protected $hire_date;
    
    /**
      * $end_date The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).
      * @var \\DateTime
      */
    protected $end_date;
    
    /**
      * $separation_type Type of employment separation; for example:  Voluntary separation  Involuntary separation  Mutual agreement  Other
      * @var string
      */
    protected $separation_type;
    
    /**
      * $separation_reason_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $separation_reason_descriptor;
    
    /**
      * $department The department or suborganization the employee/contractor is associated with in the Education Organization.
      * @var string
      */
    protected $department;
    
    /**
      * $full_time_equivalency The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.
      * @var Number
      */
    protected $full_time_equivalency;
    
    /**
      * $offer_date Date at which the staff member was made an official offer for this employment.
      * @var \\DateTime
      */
    protected $offer_date;
    
    /**
      * $hourly_wage Hourly wage associated with the employment position being reported.
      * @var Number
      */
    protected $hourly_wage;
    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->education_organization_reference = $data["education_organization_reference"];
            $this->staff_reference = $data["staff_reference"];
            $this->employment_status_descriptor = $data["employment_status_descriptor"];
            $this->hire_date = $data["hire_date"];
            $this->end_date = $data["end_date"];
            $this->separation_type = $data["separation_type"];
            $this->separation_reason_descriptor = $data["separation_reason_descriptor"];
            $this->department = $data["department"];
            $this->full_time_equivalency = $data["full_time_equivalency"];
            $this->offer_date = $data["offer_date"];
            $this->hourly_wage = $data["hourly_wage"];
            $this->_etag = $data["_etag"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets education_organization_reference
     * @return \Swagger\Client\Model\EducationOrganizationReference
     */
    public function getEducationOrganizationReference()
    {
        return $this->education_organization_reference;
    }
  
    /**
     * Sets education_organization_reference
     * @param \Swagger\Client\Model\EducationOrganizationReference $education_organization_reference A reference to the related EducationOrganization resource.
     * @return $this
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        
        $this->education_organization_reference = $education_organization_reference;
        return $this;
    }
    
    /**
     * Gets staff_reference
     * @return \Swagger\Client\Model\StaffReference
     */
    public function getStaffReference()
    {
        return $this->staff_reference;
    }
  
    /**
     * Sets staff_reference
     * @param \Swagger\Client\Model\StaffReference $staff_reference A reference to the related Staff resource.
     * @return $this
     */
    public function setStaffReference($staff_reference)
    {
        
        $this->staff_reference = $staff_reference;
        return $this;
    }
    
    /**
     * Gets employment_status_descriptor
     * @return string
     */
    public function getEmploymentStatusDescriptor()
    {
        return $this->employment_status_descriptor;
    }
  
    /**
     * Sets employment_status_descriptor
     * @param string $employment_status_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setEmploymentStatusDescriptor($employment_status_descriptor)
    {
        
        $this->employment_status_descriptor = $employment_status_descriptor;
        return $this;
    }
    
    /**
     * Gets hire_date
     * @return \\DateTime
     */
    public function getHireDate()
    {
        return $this->hire_date;
    }
  
    /**
     * Sets hire_date
     * @param \\DateTime $hire_date The month, day, and year on which an individual was hired for a position.
     * @return $this
     */
    public function setHireDate($hire_date)
    {
        
        $this->hire_date = $hire_date;
        return $this;
    }
    
    /**
     * Gets end_date
     * @return \\DateTime
     */
    public function getEndDate()
    {
        return $this->end_date;
    }
  
    /**
     * Sets end_date
     * @param \\DateTime $end_date The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).
     * @return $this
     */
    public function setEndDate($end_date)
    {
        
        $this->end_date = $end_date;
        return $this;
    }
    
    /**
     * Gets separation_type
     * @return string
     */
    public function getSeparationType()
    {
        return $this->separation_type;
    }
  
    /**
     * Sets separation_type
     * @param string $separation_type Type of employment separation; for example:  Voluntary separation  Involuntary separation  Mutual agreement  Other
     * @return $this
     */
    public function setSeparationType($separation_type)
    {
        
        $this->separation_type = $separation_type;
        return $this;
    }
    
    /**
     * Gets separation_reason_descriptor
     * @return string
     */
    public function getSeparationReasonDescriptor()
    {
        return $this->separation_reason_descriptor;
    }
  
    /**
     * Sets separation_reason_descriptor
     * @param string $separation_reason_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setSeparationReasonDescriptor($separation_reason_descriptor)
    {
        
        $this->separation_reason_descriptor = $separation_reason_descriptor;
        return $this;
    }
    
    /**
     * Gets department
     * @return string
     */
    public function getDepartment()
    {
        return $this->department;
    }
  
    /**
     * Sets department
     * @param string $department The department or suborganization the employee/contractor is associated with in the Education Organization.
     * @return $this
     */
    public function setDepartment($department)
    {
        
        $this->department = $department;
        return $this;
    }
    
    /**
     * Gets full_time_equivalency
     * @return Number
     */
    public function getFullTimeEquivalency()
    {
        return $this->full_time_equivalency;
    }
  
    /**
     * Sets full_time_equivalency
     * @param Number $full_time_equivalency The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.
     * @return $this
     */
    public function setFullTimeEquivalency($full_time_equivalency)
    {
        
        $this->full_time_equivalency = $full_time_equivalency;
        return $this;
    }
    
    /**
     * Gets offer_date
     * @return \\DateTime
     */
    public function getOfferDate()
    {
        return $this->offer_date;
    }
  
    /**
     * Sets offer_date
     * @param \\DateTime $offer_date Date at which the staff member was made an official offer for this employment.
     * @return $this
     */
    public function setOfferDate($offer_date)
    {
        
        $this->offer_date = $offer_date;
        return $this;
    }
    
    /**
     * Gets hourly_wage
     * @return Number
     */
    public function getHourlyWage()
    {
        return $this->hourly_wage;
    }
  
    /**
     * Sets hourly_wage
     * @param Number $hourly_wage Hourly wage associated with the employment position being reported.
     * @return $this
     */
    public function setHourlyWage($hourly_wage)
    {
        
        $this->hourly_wage = $hourly_wage;
        return $this;
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
