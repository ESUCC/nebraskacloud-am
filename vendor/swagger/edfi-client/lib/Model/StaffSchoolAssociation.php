<?php
/**
 * StaffSchoolAssociation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * StaffSchoolAssociation Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StaffSchoolAssociation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'school_reference' => '\Swagger\Client\Model\SchoolReference',
        'staff_reference' => '\Swagger\Client\Model\StaffReference',
        'program_assignment_descriptor' => 'string',
        'school_year' => 'int',
        'academic_subjects' => '\Swagger\Client\Model\StaffSchoolAssociationAcademicSubject[]',
        'grade_levels' => '\Swagger\Client\Model\StaffSchoolAssociationGradeLevel[]',
        '_etag' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'school_reference' => 'schoolReference',
        'staff_reference' => 'staffReference',
        'program_assignment_descriptor' => 'programAssignmentDescriptor',
        'school_year' => 'schoolYear',
        'academic_subjects' => 'academicSubjects',
        'grade_levels' => 'gradeLevels',
        '_etag' => '_etag'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'school_reference' => 'setSchoolReference',
        'staff_reference' => 'setStaffReference',
        'program_assignment_descriptor' => 'setProgramAssignmentDescriptor',
        'school_year' => 'setSchoolYear',
        'academic_subjects' => 'setAcademicSubjects',
        'grade_levels' => 'setGradeLevels',
        '_etag' => 'setEtag'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'school_reference' => 'getSchoolReference',
        'staff_reference' => 'getStaffReference',
        'program_assignment_descriptor' => 'getProgramAssignmentDescriptor',
        'school_year' => 'getSchoolYear',
        'academic_subjects' => 'getAcademicSubjects',
        'grade_levels' => 'getGradeLevels',
        '_etag' => 'getEtag'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $school_reference A reference to the related School resource.
      * @var \Swagger\Client\Model\SchoolReference
      */
    protected $school_reference;
    
    /**
      * $staff_reference A reference to the related Staff resource.
      * @var \Swagger\Client\Model\StaffReference
      */
    protected $staff_reference;
    
    /**
      * $program_assignment_descriptor The name of the program for which the individual is assigned; for example:  Regular education  Title I-Academic  Title I-Non-Academic  Special Education  Bilingual/English as a Second Language  NEDM: Program Assignment
      * @var string
      */
    protected $program_assignment_descriptor;
    
    /**
      * $school_year The identifier for the school year.
      * @var int
      */
    protected $school_year;
    
    /**
      * $academic_subjects An unordered collection of staffSchoolAssociationAcademicSubjects.  The teaching field taught by an individual: for example: English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
      * @var \Swagger\Client\Model\StaffSchoolAssociationAcademicSubject[]
      */
    protected $academic_subjects;
    
    /**
      * $grade_levels An unordered collection of staffSchoolAssociationGradeLevels.  The set of grade levels for which the individual's assignment is responsible.
      * @var \Swagger\Client\Model\StaffSchoolAssociationGradeLevel[]
      */
    protected $grade_levels;
    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->school_reference = $data["school_reference"];
            $this->staff_reference = $data["staff_reference"];
            $this->program_assignment_descriptor = $data["program_assignment_descriptor"];
            $this->school_year = $data["school_year"];
            $this->academic_subjects = $data["academic_subjects"];
            $this->grade_levels = $data["grade_levels"];
            $this->_etag = $data["_etag"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets school_reference
     * @return \Swagger\Client\Model\SchoolReference
     */
    public function getSchoolReference()
    {
        return $this->school_reference;
    }
  
    /**
     * Sets school_reference
     * @param \Swagger\Client\Model\SchoolReference $school_reference A reference to the related School resource.
     * @return $this
     */
    public function setSchoolReference($school_reference)
    {
        
        $this->school_reference = $school_reference;
        return $this;
    }
    
    /**
     * Gets staff_reference
     * @return \Swagger\Client\Model\StaffReference
     */
    public function getStaffReference()
    {
        return $this->staff_reference;
    }
  
    /**
     * Sets staff_reference
     * @param \Swagger\Client\Model\StaffReference $staff_reference A reference to the related Staff resource.
     * @return $this
     */
    public function setStaffReference($staff_reference)
    {
        
        $this->staff_reference = $staff_reference;
        return $this;
    }
    
    /**
     * Gets program_assignment_descriptor
     * @return string
     */
    public function getProgramAssignmentDescriptor()
    {
        return $this->program_assignment_descriptor;
    }
  
    /**
     * Sets program_assignment_descriptor
     * @param string $program_assignment_descriptor The name of the program for which the individual is assigned; for example:  Regular education  Title I-Academic  Title I-Non-Academic  Special Education  Bilingual/English as a Second Language  NEDM: Program Assignment
     * @return $this
     */
    public function setProgramAssignmentDescriptor($program_assignment_descriptor)
    {
        
        $this->program_assignment_descriptor = $program_assignment_descriptor;
        return $this;
    }
    
    /**
     * Gets school_year
     * @return int
     */
    public function getSchoolYear()
    {
        return $this->school_year;
    }
  
    /**
     * Sets school_year
     * @param int $school_year The identifier for the school year.
     * @return $this
     */
    public function setSchoolYear($school_year)
    {
        
        $this->school_year = $school_year;
        return $this;
    }
    
    /**
     * Gets academic_subjects
     * @return \Swagger\Client\Model\StaffSchoolAssociationAcademicSubject[]
     */
    public function getAcademicSubjects()
    {
        return $this->academic_subjects;
    }
  
    /**
     * Sets academic_subjects
     * @param \Swagger\Client\Model\StaffSchoolAssociationAcademicSubject[] $academic_subjects An unordered collection of staffSchoolAssociationAcademicSubjects.  The teaching field taught by an individual: for example: English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
     * @return $this
     */
    public function setAcademicSubjects($academic_subjects)
    {
        
        $this->academic_subjects = $academic_subjects;
        return $this;
    }
    
    /**
     * Gets grade_levels
     * @return \Swagger\Client\Model\StaffSchoolAssociationGradeLevel[]
     */
    public function getGradeLevels()
    {
        return $this->grade_levels;
    }
  
    /**
     * Sets grade_levels
     * @param \Swagger\Client\Model\StaffSchoolAssociationGradeLevel[] $grade_levels An unordered collection of staffSchoolAssociationGradeLevels.  The set of grade levels for which the individual's assignment is responsible.
     * @return $this
     */
    public function setGradeLevels($grade_levels)
    {
        
        $this->grade_levels = $grade_levels;
        return $this;
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
