<?php
/**
 * EventLogEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * EventLogEntry Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EventLogEntry implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'event_name' => 'string',
        'http_method' => 'string',
        'uri' => 'string',
        'message' => 'string',
        'aggregate_name' => 'string',
        'aggregate_key' => 'string',
        'application_key' => 'string',
        'e_tag' => 'string',
        'timestamp' => '\Swagger\Client\Model\DateTimeOffset'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'event_name' => 'eventName',
        'http_method' => 'httpMethod',
        'uri' => 'uri',
        'message' => 'message',
        'aggregate_name' => 'aggregateName',
        'aggregate_key' => 'aggregateKey',
        'application_key' => 'applicationKey',
        'e_tag' => 'eTag',
        'timestamp' => 'timestamp'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'event_name' => 'setEventName',
        'http_method' => 'setHttpMethod',
        'uri' => 'setUri',
        'message' => 'setMessage',
        'aggregate_name' => 'setAggregateName',
        'aggregate_key' => 'setAggregateKey',
        'application_key' => 'setApplicationKey',
        'e_tag' => 'setETag',
        'timestamp' => 'setTimestamp'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'event_name' => 'getEventName',
        'http_method' => 'getHttpMethod',
        'uri' => 'getUri',
        'message' => 'getMessage',
        'aggregate_name' => 'getAggregateName',
        'aggregate_key' => 'getAggregateKey',
        'application_key' => 'getApplicationKey',
        'e_tag' => 'getETag',
        'timestamp' => 'getTimestamp'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $event_name 
      * @var string
      */
    protected $event_name;
    
    /**
      * $http_method 
      * @var string
      */
    protected $http_method;
    
    /**
      * $uri 
      * @var string
      */
    protected $uri;
    
    /**
      * $message 
      * @var string
      */
    protected $message;
    
    /**
      * $aggregate_name 
      * @var string
      */
    protected $aggregate_name;
    
    /**
      * $aggregate_key 
      * @var string
      */
    protected $aggregate_key;
    
    /**
      * $application_key 
      * @var string
      */
    protected $application_key;
    
    /**
      * $e_tag 
      * @var string
      */
    protected $e_tag;
    
    /**
      * $timestamp 
      * @var \Swagger\Client\Model\DateTimeOffset
      */
    protected $timestamp;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->event_name = $data["event_name"];
            $this->http_method = $data["http_method"];
            $this->uri = $data["uri"];
            $this->message = $data["message"];
            $this->aggregate_name = $data["aggregate_name"];
            $this->aggregate_key = $data["aggregate_key"];
            $this->application_key = $data["application_key"];
            $this->e_tag = $data["e_tag"];
            $this->timestamp = $data["timestamp"];
        }
    }
    
    /**
     * Gets event_name
     * @return string
     */
    public function getEventName()
    {
        return $this->event_name;
    }
  
    /**
     * Sets event_name
     * @param string $event_name 
     * @return $this
     */
    public function setEventName($event_name)
    {
        
        $this->event_name = $event_name;
        return $this;
    }
    
    /**
     * Gets http_method
     * @return string
     */
    public function getHttpMethod()
    {
        return $this->http_method;
    }
  
    /**
     * Sets http_method
     * @param string $http_method 
     * @return $this
     */
    public function setHttpMethod($http_method)
    {
        
        $this->http_method = $http_method;
        return $this;
    }
    
    /**
     * Gets uri
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }
  
    /**
     * Sets uri
     * @param string $uri 
     * @return $this
     */
    public function setUri($uri)
    {
        
        $this->uri = $uri;
        return $this;
    }
    
    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->message;
    }
  
    /**
     * Sets message
     * @param string $message 
     * @return $this
     */
    public function setMessage($message)
    {
        
        $this->message = $message;
        return $this;
    }
    
    /**
     * Gets aggregate_name
     * @return string
     */
    public function getAggregateName()
    {
        return $this->aggregate_name;
    }
  
    /**
     * Sets aggregate_name
     * @param string $aggregate_name 
     * @return $this
     */
    public function setAggregateName($aggregate_name)
    {
        
        $this->aggregate_name = $aggregate_name;
        return $this;
    }
    
    /**
     * Gets aggregate_key
     * @return string
     */
    public function getAggregateKey()
    {
        return $this->aggregate_key;
    }
  
    /**
     * Sets aggregate_key
     * @param string $aggregate_key 
     * @return $this
     */
    public function setAggregateKey($aggregate_key)
    {
        
        $this->aggregate_key = $aggregate_key;
        return $this;
    }
    
    /**
     * Gets application_key
     * @return string
     */
    public function getApplicationKey()
    {
        return $this->application_key;
    }
  
    /**
     * Sets application_key
     * @param string $application_key 
     * @return $this
     */
    public function setApplicationKey($application_key)
    {
        
        $this->application_key = $application_key;
        return $this;
    }
    
    /**
     * Gets e_tag
     * @return string
     */
    public function getETag()
    {
        return $this->e_tag;
    }
  
    /**
     * Sets e_tag
     * @param string $e_tag 
     * @return $this
     */
    public function setETag($e_tag)
    {
        
        $this->e_tag = $e_tag;
        return $this;
    }
    
    /**
     * Gets timestamp
     * @return \Swagger\Client\Model\DateTimeOffset
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }
  
    /**
     * Sets timestamp
     * @param \Swagger\Client\Model\DateTimeOffset $timestamp 
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        
        $this->timestamp = $timestamp;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
