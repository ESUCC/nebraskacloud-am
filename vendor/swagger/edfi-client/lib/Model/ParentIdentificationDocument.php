<?php
/**
 * ParentIdentificationDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * ParentIdentificationDocument Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ParentIdentificationDocument implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'personal_information_verification_type' => 'string',
        'identification_document_use_type' => 'string',
        'document_title' => 'string',
        'document_expiration_date' => '\\DateTime',
        'issuer_document_identification_code' => 'string',
        'issuer_name' => 'string',
        'issuer_country_descriptor' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'personal_information_verification_type' => 'personalInformationVerificationType',
        'identification_document_use_type' => 'identificationDocumentUseType',
        'document_title' => 'documentTitle',
        'document_expiration_date' => 'documentExpirationDate',
        'issuer_document_identification_code' => 'issuerDocumentIdentificationCode',
        'issuer_name' => 'issuerName',
        'issuer_country_descriptor' => 'issuerCountryDescriptor'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'personal_information_verification_type' => 'setPersonalInformationVerificationType',
        'identification_document_use_type' => 'setIdentificationDocumentUseType',
        'document_title' => 'setDocumentTitle',
        'document_expiration_date' => 'setDocumentExpirationDate',
        'issuer_document_identification_code' => 'setIssuerDocumentIdentificationCode',
        'issuer_name' => 'setIssuerName',
        'issuer_country_descriptor' => 'setIssuerCountryDescriptor'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'personal_information_verification_type' => 'getPersonalInformationVerificationType',
        'identification_document_use_type' => 'getIdentificationDocumentUseType',
        'document_title' => 'getDocumentTitle',
        'document_expiration_date' => 'getDocumentExpirationDate',
        'issuer_document_identification_code' => 'getIssuerDocumentIdentificationCode',
        'issuer_name' => 'getIssuerName',
        'issuer_country_descriptor' => 'getIssuerCountryDescriptor'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $personal_information_verification_type Key for PersonalInformationVerification
      * @var string
      */
    protected $personal_information_verification_type;
    
    /**
      * $identification_document_use_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $identification_document_use_type;
    
    /**
      * $document_title The title of the document given by the issuer.
      * @var string
      */
    protected $document_title;
    
    /**
      * $document_expiration_date The day when the document  expires, if null then never expires.
      * @var \\DateTime
      */
    protected $document_expiration_date;
    
    /**
      * $issuer_document_identification_code The unique identifier on the issuer's identification system.
      * @var string
      */
    protected $issuer_document_identification_code;
    
    /**
      * $issuer_name Name of the entity or institution that issued the document.
      * @var string
      */
    protected $issuer_name;
    
    /**
      * $issuer_country_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $issuer_country_descriptor;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->personal_information_verification_type = $data["personal_information_verification_type"];
            $this->identification_document_use_type = $data["identification_document_use_type"];
            $this->document_title = $data["document_title"];
            $this->document_expiration_date = $data["document_expiration_date"];
            $this->issuer_document_identification_code = $data["issuer_document_identification_code"];
            $this->issuer_name = $data["issuer_name"];
            $this->issuer_country_descriptor = $data["issuer_country_descriptor"];
        }
    }
    
    /**
     * Gets personal_information_verification_type
     * @return string
     */
    public function getPersonalInformationVerificationType()
    {
        return $this->personal_information_verification_type;
    }
  
    /**
     * Sets personal_information_verification_type
     * @param string $personal_information_verification_type Key for PersonalInformationVerification
     * @return $this
     */
    public function setPersonalInformationVerificationType($personal_information_verification_type)
    {
        
        $this->personal_information_verification_type = $personal_information_verification_type;
        return $this;
    }
    
    /**
     * Gets identification_document_use_type
     * @return string
     */
    public function getIdentificationDocumentUseType()
    {
        return $this->identification_document_use_type;
    }
  
    /**
     * Sets identification_document_use_type
     * @param string $identification_document_use_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setIdentificationDocumentUseType($identification_document_use_type)
    {
        
        $this->identification_document_use_type = $identification_document_use_type;
        return $this;
    }
    
    /**
     * Gets document_title
     * @return string
     */
    public function getDocumentTitle()
    {
        return $this->document_title;
    }
  
    /**
     * Sets document_title
     * @param string $document_title The title of the document given by the issuer.
     * @return $this
     */
    public function setDocumentTitle($document_title)
    {
        
        $this->document_title = $document_title;
        return $this;
    }
    
    /**
     * Gets document_expiration_date
     * @return \\DateTime
     */
    public function getDocumentExpirationDate()
    {
        return $this->document_expiration_date;
    }
  
    /**
     * Sets document_expiration_date
     * @param \\DateTime $document_expiration_date The day when the document  expires, if null then never expires.
     * @return $this
     */
    public function setDocumentExpirationDate($document_expiration_date)
    {
        
        $this->document_expiration_date = $document_expiration_date;
        return $this;
    }
    
    /**
     * Gets issuer_document_identification_code
     * @return string
     */
    public function getIssuerDocumentIdentificationCode()
    {
        return $this->issuer_document_identification_code;
    }
  
    /**
     * Sets issuer_document_identification_code
     * @param string $issuer_document_identification_code The unique identifier on the issuer's identification system.
     * @return $this
     */
    public function setIssuerDocumentIdentificationCode($issuer_document_identification_code)
    {
        
        $this->issuer_document_identification_code = $issuer_document_identification_code;
        return $this;
    }
    
    /**
     * Gets issuer_name
     * @return string
     */
    public function getIssuerName()
    {
        return $this->issuer_name;
    }
  
    /**
     * Sets issuer_name
     * @param string $issuer_name Name of the entity or institution that issued the document.
     * @return $this
     */
    public function setIssuerName($issuer_name)
    {
        
        $this->issuer_name = $issuer_name;
        return $this;
    }
    
    /**
     * Gets issuer_country_descriptor
     * @return string
     */
    public function getIssuerCountryDescriptor()
    {
        return $this->issuer_country_descriptor;
    }
  
    /**
     * Sets issuer_country_descriptor
     * @param string $issuer_country_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setIssuerCountryDescriptor($issuer_country_descriptor)
    {
        
        $this->issuer_country_descriptor = $issuer_country_descriptor;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
