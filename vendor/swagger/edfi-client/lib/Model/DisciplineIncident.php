<?php
/**
 * DisciplineIncident
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * DisciplineIncident Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DisciplineIncident implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'school_reference' => '\Swagger\Client\Model\SchoolReference',
        'staff_reference' => '\Swagger\Client\Model\StaffReference',
        'incident_identifier' => 'string',
        'incident_date' => '\\DateTime',
        'incident_time' => 'string',
        'incident_location_type' => 'string',
        'incident_description' => 'string',
        'reporter_description_descriptor' => 'string',
        'reporter_name' => 'string',
        'reported_to_law_enforcement' => 'bool',
        'case_number' => 'string',
        'incident_cost' => 'Number',
        'behaviors' => '\Swagger\Client\Model\DisciplineIncidentBehavior[]',
        'weapons' => '\Swagger\Client\Model\DisciplineIncidentWeapon[]',
        '_etag' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'school_reference' => 'schoolReference',
        'staff_reference' => 'staffReference',
        'incident_identifier' => 'incidentIdentifier',
        'incident_date' => 'incidentDate',
        'incident_time' => 'incidentTime',
        'incident_location_type' => 'incidentLocationType',
        'incident_description' => 'incidentDescription',
        'reporter_description_descriptor' => 'reporterDescriptionDescriptor',
        'reporter_name' => 'reporterName',
        'reported_to_law_enforcement' => 'reportedToLawEnforcement',
        'case_number' => 'caseNumber',
        'incident_cost' => 'incidentCost',
        'behaviors' => 'behaviors',
        'weapons' => 'weapons',
        '_etag' => '_etag'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'school_reference' => 'setSchoolReference',
        'staff_reference' => 'setStaffReference',
        'incident_identifier' => 'setIncidentIdentifier',
        'incident_date' => 'setIncidentDate',
        'incident_time' => 'setIncidentTime',
        'incident_location_type' => 'setIncidentLocationType',
        'incident_description' => 'setIncidentDescription',
        'reporter_description_descriptor' => 'setReporterDescriptionDescriptor',
        'reporter_name' => 'setReporterName',
        'reported_to_law_enforcement' => 'setReportedToLawEnforcement',
        'case_number' => 'setCaseNumber',
        'incident_cost' => 'setIncidentCost',
        'behaviors' => 'setBehaviors',
        'weapons' => 'setWeapons',
        '_etag' => 'setEtag'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'school_reference' => 'getSchoolReference',
        'staff_reference' => 'getStaffReference',
        'incident_identifier' => 'getIncidentIdentifier',
        'incident_date' => 'getIncidentDate',
        'incident_time' => 'getIncidentTime',
        'incident_location_type' => 'getIncidentLocationType',
        'incident_description' => 'getIncidentDescription',
        'reporter_description_descriptor' => 'getReporterDescriptionDescriptor',
        'reporter_name' => 'getReporterName',
        'reported_to_law_enforcement' => 'getReportedToLawEnforcement',
        'case_number' => 'getCaseNumber',
        'incident_cost' => 'getIncidentCost',
        'behaviors' => 'getBehaviors',
        'weapons' => 'getWeapons',
        '_etag' => 'getEtag'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;
    
    /**
      * $school_reference A reference to the related School resource.
      * @var \Swagger\Client\Model\SchoolReference
      */
    protected $school_reference;
    
    /**
      * $staff_reference A reference to the related Staff resource.
      * @var \Swagger\Client\Model\StaffReference
      */
    protected $staff_reference;
    
    /**
      * $incident_identifier A locally assigned unique identifier (within the school or school district) to identify each specific incident or occurrence. The same identifier should be used to document the entire incident even if it included multiple offenses and multiple offenders.
      * @var string
      */
    protected $incident_identifier;
    
    /**
      * $incident_date The month, day, and year on which the DisciplineIncident occurred.
      * @var \\DateTime
      */
    protected $incident_date;
    
    /**
      * $incident_time An indication of the time of day the incident took place.
      * @var string
      */
    protected $incident_time;
    
    /**
      * $incident_location_type Identifies where the incident occurred and whether or not it occurred on campus, for example:  On campus  Administrative offices area  Cafeteria area  Classroom  Hallway or stairs  ...
      * @var string
      */
    protected $incident_location_type;
    
    /**
      * $incident_description The description for an incident.
      * @var string
      */
    protected $incident_description;
    
    /**
      * $reporter_description_descriptor Information on the type of individual who reported the incident. When known and/or if useful, use a more specific option code (e.g., \"Counselor\" rather than \"Professional Staff\"); for example:Student  Parent/guardian  Law enforcement officer  Nonschool personnel  Representative of visiting school  ...
      * @var string
      */
    protected $reporter_description_descriptor;
    
    /**
      * $reporter_name Identifies the reporter of the incident by name.
      * @var string
      */
    protected $reporter_name;
    
    /**
      * $reported_to_law_enforcement Indicator of whether the incident was reported to law enforcement.
      * @var bool
      */
    protected $reported_to_law_enforcement;
    
    /**
      * $case_number The case number assigned to the incident by law enforcement or other organization.
      * @var string
      */
    protected $case_number;
    
    /**
      * $incident_cost The value of any quantifiable monetary loss directly resulting from the DisciplineIncident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.
      * @var Number
      */
    protected $incident_cost;
    
    /**
      * $behaviors An unordered collection of disciplineIncidentBehaviors.  The categories of behavior describing a discipline incident.
      * @var \Swagger\Client\Model\DisciplineIncidentBehavior[]
      */
    protected $behaviors;
    
    /**
      * $weapons An unordered collection of disciplineIncidentWeapons.  Identifies the type of weapon used during an incident.
      * @var \Swagger\Client\Model\DisciplineIncidentWeapon[]
      */
    protected $weapons;
    
    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->school_reference = $data["school_reference"];
            $this->staff_reference = $data["staff_reference"];
            $this->incident_identifier = $data["incident_identifier"];
            $this->incident_date = $data["incident_date"];
            $this->incident_time = $data["incident_time"];
            $this->incident_location_type = $data["incident_location_type"];
            $this->incident_description = $data["incident_description"];
            $this->reporter_description_descriptor = $data["reporter_description_descriptor"];
            $this->reporter_name = $data["reporter_name"];
            $this->reported_to_law_enforcement = $data["reported_to_law_enforcement"];
            $this->case_number = $data["case_number"];
            $this->incident_cost = $data["incident_cost"];
            $this->behaviors = $data["behaviors"];
            $this->weapons = $data["weapons"];
            $this->_etag = $data["_etag"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets school_reference
     * @return \Swagger\Client\Model\SchoolReference
     */
    public function getSchoolReference()
    {
        return $this->school_reference;
    }
  
    /**
     * Sets school_reference
     * @param \Swagger\Client\Model\SchoolReference $school_reference A reference to the related School resource.
     * @return $this
     */
    public function setSchoolReference($school_reference)
    {
        
        $this->school_reference = $school_reference;
        return $this;
    }
    
    /**
     * Gets staff_reference
     * @return \Swagger\Client\Model\StaffReference
     */
    public function getStaffReference()
    {
        return $this->staff_reference;
    }
  
    /**
     * Sets staff_reference
     * @param \Swagger\Client\Model\StaffReference $staff_reference A reference to the related Staff resource.
     * @return $this
     */
    public function setStaffReference($staff_reference)
    {
        
        $this->staff_reference = $staff_reference;
        return $this;
    }
    
    /**
     * Gets incident_identifier
     * @return string
     */
    public function getIncidentIdentifier()
    {
        return $this->incident_identifier;
    }
  
    /**
     * Sets incident_identifier
     * @param string $incident_identifier A locally assigned unique identifier (within the school or school district) to identify each specific incident or occurrence. The same identifier should be used to document the entire incident even if it included multiple offenses and multiple offenders.
     * @return $this
     */
    public function setIncidentIdentifier($incident_identifier)
    {
        
        $this->incident_identifier = $incident_identifier;
        return $this;
    }
    
    /**
     * Gets incident_date
     * @return \\DateTime
     */
    public function getIncidentDate()
    {
        return $this->incident_date;
    }
  
    /**
     * Sets incident_date
     * @param \\DateTime $incident_date The month, day, and year on which the DisciplineIncident occurred.
     * @return $this
     */
    public function setIncidentDate($incident_date)
    {
        
        $this->incident_date = $incident_date;
        return $this;
    }
    
    /**
     * Gets incident_time
     * @return string
     */
    public function getIncidentTime()
    {
        return $this->incident_time;
    }
  
    /**
     * Sets incident_time
     * @param string $incident_time An indication of the time of day the incident took place.
     * @return $this
     */
    public function setIncidentTime($incident_time)
    {
        
        $this->incident_time = $incident_time;
        return $this;
    }
    
    /**
     * Gets incident_location_type
     * @return string
     */
    public function getIncidentLocationType()
    {
        return $this->incident_location_type;
    }
  
    /**
     * Sets incident_location_type
     * @param string $incident_location_type Identifies where the incident occurred and whether or not it occurred on campus, for example:  On campus  Administrative offices area  Cafeteria area  Classroom  Hallway or stairs  ...
     * @return $this
     */
    public function setIncidentLocationType($incident_location_type)
    {
        
        $this->incident_location_type = $incident_location_type;
        return $this;
    }
    
    /**
     * Gets incident_description
     * @return string
     */
    public function getIncidentDescription()
    {
        return $this->incident_description;
    }
  
    /**
     * Sets incident_description
     * @param string $incident_description The description for an incident.
     * @return $this
     */
    public function setIncidentDescription($incident_description)
    {
        
        $this->incident_description = $incident_description;
        return $this;
    }
    
    /**
     * Gets reporter_description_descriptor
     * @return string
     */
    public function getReporterDescriptionDescriptor()
    {
        return $this->reporter_description_descriptor;
    }
  
    /**
     * Sets reporter_description_descriptor
     * @param string $reporter_description_descriptor Information on the type of individual who reported the incident. When known and/or if useful, use a more specific option code (e.g., \"Counselor\" rather than \"Professional Staff\"); for example:Student  Parent/guardian  Law enforcement officer  Nonschool personnel  Representative of visiting school  ...
     * @return $this
     */
    public function setReporterDescriptionDescriptor($reporter_description_descriptor)
    {
        
        $this->reporter_description_descriptor = $reporter_description_descriptor;
        return $this;
    }
    
    /**
     * Gets reporter_name
     * @return string
     */
    public function getReporterName()
    {
        return $this->reporter_name;
    }
  
    /**
     * Sets reporter_name
     * @param string $reporter_name Identifies the reporter of the incident by name.
     * @return $this
     */
    public function setReporterName($reporter_name)
    {
        
        $this->reporter_name = $reporter_name;
        return $this;
    }
    
    /**
     * Gets reported_to_law_enforcement
     * @return bool
     */
    public function getReportedToLawEnforcement()
    {
        return $this->reported_to_law_enforcement;
    }
  
    /**
     * Sets reported_to_law_enforcement
     * @param bool $reported_to_law_enforcement Indicator of whether the incident was reported to law enforcement.
     * @return $this
     */
    public function setReportedToLawEnforcement($reported_to_law_enforcement)
    {
        
        $this->reported_to_law_enforcement = $reported_to_law_enforcement;
        return $this;
    }
    
    /**
     * Gets case_number
     * @return string
     */
    public function getCaseNumber()
    {
        return $this->case_number;
    }
  
    /**
     * Sets case_number
     * @param string $case_number The case number assigned to the incident by law enforcement or other organization.
     * @return $this
     */
    public function setCaseNumber($case_number)
    {
        
        $this->case_number = $case_number;
        return $this;
    }
    
    /**
     * Gets incident_cost
     * @return Number
     */
    public function getIncidentCost()
    {
        return $this->incident_cost;
    }
  
    /**
     * Sets incident_cost
     * @param Number $incident_cost The value of any quantifiable monetary loss directly resulting from the DisciplineIncident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.
     * @return $this
     */
    public function setIncidentCost($incident_cost)
    {
        
        $this->incident_cost = $incident_cost;
        return $this;
    }
    
    /**
     * Gets behaviors
     * @return \Swagger\Client\Model\DisciplineIncidentBehavior[]
     */
    public function getBehaviors()
    {
        return $this->behaviors;
    }
  
    /**
     * Sets behaviors
     * @param \Swagger\Client\Model\DisciplineIncidentBehavior[] $behaviors An unordered collection of disciplineIncidentBehaviors.  The categories of behavior describing a discipline incident.
     * @return $this
     */
    public function setBehaviors($behaviors)
    {
        
        $this->behaviors = $behaviors;
        return $this;
    }
    
    /**
     * Gets weapons
     * @return \Swagger\Client\Model\DisciplineIncidentWeapon[]
     */
    public function getWeapons()
    {
        return $this->weapons;
    }
  
    /**
     * Sets weapons
     * @param \Swagger\Client\Model\DisciplineIncidentWeapon[] $weapons An unordered collection of disciplineIncidentWeapons.  Identifies the type of weapon used during an incident.
     * @return $this
     */
    public function setWeapons($weapons)
    {
        
        $this->weapons = $weapons;
        return $this;
    }
    
    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }
  
    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {
        
        $this->_etag = $_etag;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
