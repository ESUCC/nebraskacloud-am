<?php
/**
 * Student
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Student Class Doc Comment
 *
 * @category    Class
 * @description
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Student implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'student_unique_id' => 'string',
        'personal_title_prefix' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_surname' => 'string',
        'generation_code_suffix' => 'string',
        'maiden_name' => 'string',
        'sex_type' => 'string',
        'birth_date' => '\\DateTime',
        'birth_city' => 'string',
        'birth_state_abbreviation_type' => 'string',
        'date_entered_us' => '\\DateTime',
        'multiple_birth_status' => 'bool',
        'profile_thumbnail' => 'string',
        'hispanic_latino_ethnicity' => 'bool',
        'old_ethnicity_type' => 'string',
        'economic_disadvantaged' => 'bool',
        'school_food_services_eligibility_descriptor' => 'string',
        'limited_english_proficiency_descriptor' => 'string',
        'displacement_status' => 'string',
        'login_id' => 'string',
        'birth_international_province' => 'string',
        'citizenship_status_type' => 'string',
        'birth_country_descriptor' => 'string',
        'learning_style' => '\Swagger\Client\Model\StudentLearningStyle',
        'addresses' => '\Swagger\Client\Model\StudentAddress[]',
        'characteristics' => '\Swagger\Client\Model\StudentCharacteristic[]',
        'cohort_years' => '\Swagger\Client\Model\StudentCohortYear[]',
        'disabilities' => '\Swagger\Client\Model\StudentDisability[]',
        'electronic_mails' => '\Swagger\Client\Model\StudentElectronicMail[]',
        'identification_codes' => '\Swagger\Client\Model\StudentIdentificationCode[]',
        'identification_documents' => '\Swagger\Client\Model\StudentIdentificationDocument[]',
        'indicators' => '\Swagger\Client\Model\StudentIndicator[]',
        'international_addresses' => '\Swagger\Client\Model\StudentInternationalAddress[]',
        'languages' => '\Swagger\Client\Model\StudentLanguage[]',
        'other_names' => '\Swagger\Client\Model\StudentOtherName[]',
        'program_participations' => '\Swagger\Client\Model\StudentProgramParticipation[]',
        'races' => '\Swagger\Client\Model\StudentRace[]',
        'telephones' => '\Swagger\Client\Model\StudentTelephone[]',
        'visas' => '\Swagger\Client\Model\StudentVisa[]',
        '_etag' => 'string'
    );

    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[]
      */
    static $attributeMap = array(
        'id' => 'id',
        'student_unique_id' => 'studentUniqueId',
        'personal_title_prefix' => 'personalTitlePrefix',
        'first_name' => 'firstName',
        'middle_name' => 'middleName',
        'last_surname' => 'lastSurname',
        'generation_code_suffix' => 'generationCodeSuffix',
        'maiden_name' => 'maidenName',
        'sex_type' => 'sexType',
        'birth_date' => 'birthDate',
        'birth_city' => 'birthCity',
        'birth_state_abbreviation_type' => 'birthStateAbbreviationType',
        'date_entered_us' => 'dateEnteredUS',
        'multiple_birth_status' => 'multipleBirthStatus',
        'profile_thumbnail' => 'profileThumbnail',
        'hispanic_latino_ethnicity' => 'hispanicLatinoEthnicity',
        'old_ethnicity_type' => 'oldEthnicityType',
        'economic_disadvantaged' => 'economicDisadvantaged',
        'school_food_services_eligibility_descriptor' => 'schoolFoodServicesEligibilityDescriptor',
        'limited_english_proficiency_descriptor' => 'limitedEnglishProficiencyDescriptor',
        'displacement_status' => 'displacementStatus',
        'login_id' => 'loginId',
        'birth_international_province' => 'birthInternationalProvince',
        'citizenship_status_type' => 'citizenshipStatusType',
        'birth_country_descriptor' => 'birthCountryDescriptor',
        'learning_style' => 'learningStyle',
        'addresses' => 'addresses',
        'characteristics' => 'characteristics',
        'cohort_years' => 'cohortYears',
        'disabilities' => 'disabilities',
        'electronic_mails' => 'electronicMails',
        'identification_codes' => 'identificationCodes',
        'identification_documents' => 'identificationDocuments',
        'indicators' => 'indicators',
        'international_addresses' => 'internationalAddresses',
        'languages' => 'languages',
        'other_names' => 'otherNames',
        'program_participations' => 'programParticipations',
        'races' => 'races',
        'telephones' => 'telephones',
        'visas' => 'visas',
        '_etag' => '_etag'
    );

    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'student_unique_id' => 'setStudentUniqueId',
        'personal_title_prefix' => 'setPersonalTitlePrefix',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_surname' => 'setLastSurname',
        'generation_code_suffix' => 'setGenerationCodeSuffix',
        'maiden_name' => 'setMaidenName',
        'sex_type' => 'setSexType',
        'birth_date' => 'setBirthDate',
        'birth_city' => 'setBirthCity',
        'birth_state_abbreviation_type' => 'setBirthStateAbbreviationType',
        'date_entered_us' => 'setDateEnteredUs',
        'multiple_birth_status' => 'setMultipleBirthStatus',
        'profile_thumbnail' => 'setProfileThumbnail',
        'hispanic_latino_ethnicity' => 'setHispanicLatinoEthnicity',
        'old_ethnicity_type' => 'setOldEthnicityType',
        'economic_disadvantaged' => 'setEconomicDisadvantaged',
        'school_food_services_eligibility_descriptor' => 'setSchoolFoodServicesEligibilityDescriptor',
        'limited_english_proficiency_descriptor' => 'setLimitedEnglishProficiencyDescriptor',
        'displacement_status' => 'setDisplacementStatus',
        'login_id' => 'setLoginId',
        'birth_international_province' => 'setBirthInternationalProvince',
        'citizenship_status_type' => 'setCitizenshipStatusType',
        'birth_country_descriptor' => 'setBirthCountryDescriptor',
        'learning_style' => 'setLearningStyle',
        'addresses' => 'setAddresses',
        'characteristics' => 'setCharacteristics',
        'cohort_years' => 'setCohortYears',
        'disabilities' => 'setDisabilities',
        'electronic_mails' => 'setElectronicMails',
        'identification_codes' => 'setIdentificationCodes',
        'identification_documents' => 'setIdentificationDocuments',
        'indicators' => 'setIndicators',
        'international_addresses' => 'setInternationalAddresses',
        'languages' => 'setLanguages',
        'other_names' => 'setOtherNames',
        'program_participations' => 'setProgramParticipations',
        'races' => 'setRaces',
        'telephones' => 'setTelephones',
        'visas' => 'setVisas',
        '_etag' => 'setEtag'
    );

    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'student_unique_id' => 'getStudentUniqueId',
        'personal_title_prefix' => 'getPersonalTitlePrefix',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_surname' => 'getLastSurname',
        'generation_code_suffix' => 'getGenerationCodeSuffix',
        'maiden_name' => 'getMaidenName',
        'sex_type' => 'getSexType',
        'birth_date' => 'getBirthDate',
        'birth_city' => 'getBirthCity',
        'birth_state_abbreviation_type' => 'getBirthStateAbbreviationType',
        'date_entered_us' => 'getDateEnteredUs',
        'multiple_birth_status' => 'getMultipleBirthStatus',
        'profile_thumbnail' => 'getProfileThumbnail',
        'hispanic_latino_ethnicity' => 'getHispanicLatinoEthnicity',
        'old_ethnicity_type' => 'getOldEthnicityType',
        'economic_disadvantaged' => 'getEconomicDisadvantaged',
        'school_food_services_eligibility_descriptor' => 'getSchoolFoodServicesEligibilityDescriptor',
        'limited_english_proficiency_descriptor' => 'getLimitedEnglishProficiencyDescriptor',
        'displacement_status' => 'getDisplacementStatus',
        'login_id' => 'getLoginId',
        'birth_international_province' => 'getBirthInternationalProvince',
        'citizenship_status_type' => 'getCitizenshipStatusType',
        'birth_country_descriptor' => 'getBirthCountryDescriptor',
        'learning_style' => 'getLearningStyle',
        'addresses' => 'getAddresses',
        'characteristics' => 'getCharacteristics',
        'cohort_years' => 'getCohortYears',
        'disabilities' => 'getDisabilities',
        'electronic_mails' => 'getElectronicMails',
        'identification_codes' => 'getIdentificationCodes',
        'identification_documents' => 'getIdentificationDocuments',
        'indicators' => 'getIndicators',
        'international_addresses' => 'getInternationalAddresses',
        'languages' => 'getLanguages',
        'other_names' => 'getOtherNames',
        'program_participations' => 'getProgramParticipations',
        'races' => 'getRaces',
        'telephones' => 'getTelephones',
        'visas' => 'getVisas',
        '_etag' => 'getEtag'
    );

    static function getters() {
        return self::$getters;
    }


    /**
      * $id The unique identifier of the resource.
      * @var string
      */
    protected $id;

    /**
      * $student_unique_id A unique alphanumeric code assigned to a student.
      * @var string
      */
    protected $student_unique_id;

    /**
      * $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the person.
      * @var string
      */
    protected $personal_title_prefix;

    /**
      * $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
      * @var string
      */
    protected $first_name;

    /**
      * $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony.
      * @var string
      */
    protected $middle_name;

    /**
      * $last_surname The name borne in common by members of a family.
      * @var string
      */
    protected $last_surname;

    /**
      * $generation_code_suffix An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
      * @var string
      */
    protected $generation_code_suffix;

    /**
      * $maiden_name The person's maiden name.
      * @var string
      */
    protected $maiden_name;

    /**
      * $sex_type A person''s gender.
      * @var string
      */
    protected $sex_type;

    /**
      * $birth_date The month, day, and year on which an individual was born.
      * @var \\DateTime
      */
    protected $birth_date;

    /**
      * $birth_city The set of elements that capture relevant data regarding a person's birth, including birth date and place of birth.
      * @var string
      */
    protected $birth_city;

    /**
      * $birth_state_abbreviation_type The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
      * @var string
      */
    protected $birth_state_abbreviation_type;

    /**
      * $date_entered_us For students born outside of the U.S., the date the student entered the U.S.
      * @var \\DateTime
      */
    protected $date_entered_us;

    /**
      * $multiple_birth_status Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
      * @var bool
      */
    protected $multiple_birth_status;

    /**
      * $profile_thumbnail ProfileThumbnail.
      * @var string
      */
    protected $profile_thumbnail;

    /**
      * $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
      * @var bool
      */
    protected $hispanic_latino_ethnicity;

    /**
      * $old_ethnicity_type Previous definition of Ethnicity combining Hispanic/latino and race:  1 - American Indian or Alaskan Native  2 - Asian or Pacific Islander  3 - Black, not of Hispanic origin  4 - Hispanic  5 - White, not of Hispanic origin
      * @var string
      */
    protected $old_ethnicity_type;

    /**
      * $economic_disadvantaged An indication of inadequate financial condition of an individual's family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
      * @var bool
      */
    protected $economic_disadvantaged;

    /**
      * $school_food_services_eligibility_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $school_food_services_eligibility_descriptor;

    /**
      * $limited_english_proficiency_descriptor An indication that the student has sufficient difficulty speaking, reading, writing, or understanding the English language, as to require special English Language services.
      * @var string
      */
    protected $limited_english_proficiency_descriptor;

    /**
      * $displacement_status Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.
      * @var string
      */
    protected $displacement_status;

    /**
      * $login_id The login ID for the user; used for security access control interface.
      * @var string
      */
    protected $login_id;

    /**
      * $birth_international_province For students born outside of the US, the Province or jurisdiction in which an individual is born.
      * @var string
      */
    protected $birth_international_province;

    /**
      * $citizenship_status_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $citizenship_status_type;

    /**
      * $birth_country_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
      * @var string
      */
    protected $birth_country_descriptor;

    /**
      * $learning_style The student's relative preference to visual, auditory and tactile learning expressed as percentages.
      * @var \Swagger\Client\Model\StudentLearningStyle
      */
    protected $learning_style;

    /**
      * $addresses An unordered collection of studentAddresses.  The set of elements that describes an address, including the street address, city, state, and ZIP code.
      * @var \Swagger\Client\Model\StudentAddress[]
      */
    protected $addresses;

    /**
      * $characteristics An unordered collection of studentCharacteristics.  Reflects important characteristics of the student's home situation: Displaced Homemaker, Homeless, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, Unaccompanied Youth.
      * @var \Swagger\Client\Model\StudentCharacteristic[]
      */
    protected $characteristics;

    /**
      * $cohort_years An unordered collection of studentCohortYears.  The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.
      * @var \Swagger\Client\Model\StudentCohortYear[]
      */
    protected $cohort_years;

    /**
      * $disabilities An unordered collection of studentDisabilities.  This type represents an impairment of body structure or function, a limitation in activities or a restriction in participation, as ordered by severity of impairment.
      * @var \Swagger\Client\Model\StudentDisability[]
      */
    protected $disabilities;

    /**
      * $electronic_mails An unordered collection of studentElectronicMails.
      * @var \Swagger\Client\Model\StudentElectronicMail[]
      */
    protected $electronic_mails;

    /**
      * $identification_codes An unordered collection of studentIdentificationCodes.  A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a student.
      * @var \Swagger\Client\Model\StudentIdentificationCode[]
      */
    protected $identification_codes;

    /**
      * $identification_documents An unordered collection of studentIdentificationDocuments.  Represents the valid document that a person uses for identification.
      * @var \Swagger\Client\Model\StudentIdentificationDocument[]
      */
    protected $identification_documents;

    /**
      * $indicators An unordered collection of studentIndicators.  An indicator or metric computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.
      * @var \Swagger\Client\Model\StudentIndicator[]
      */
    protected $indicators;

    /**
      * $international_addresses An unordered collection of studentInternationalAddresses.  The set of elements that describes an address, including the street address and country for international students.
      * @var \Swagger\Client\Model\StudentInternationalAddress[]
      */
    protected $international_addresses;

    /**
      * $languages An unordered collection of studentLanguages.  Language(s) the individual uses to communicate.
      * @var \Swagger\Client\Model\StudentLanguage[]
      */
    protected $languages;

    /**
      * $other_names An unordered collection of studentOtherNames.  Other names (e.g., alias, nickname, previous legal name) associated with a person.
      * @var \Swagger\Client\Model\StudentOtherName[]
      */
    protected $other_names;

    /**
      * $program_participations An unordered collection of studentProgramParticipations.  Key programs the student is participating in or receives services from.
      * @var \Swagger\Client\Model\StudentProgramParticipation[]
      */
    protected $program_participations;

    /**
      * $races An unordered collection of studentRaces.  The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
      * @var \Swagger\Client\Model\StudentRace[]
      */
    protected $races;

    /**
      * $telephones An unordered collection of studentTelephones.  The 10-digit telephone number, including the area code, for the person.
      * @var \Swagger\Client\Model\StudentTelephone[]
      */
    protected $telephones;

    /**
      * $visas An unordered collection of studentVisas.  Describe the types of Visa that a non-U.S. citizen student holds.
      * @var \Swagger\Client\Model\StudentVisa[]
      */
    protected $visas;

    /**
      * $_etag A unique system-generated value that identifies the version of the resource.
      * @var string
      */
    protected $_etag;


    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {

        if ($data != null) {
            $this->id = $data["id"];
            $this->student_unique_id = $data["student_unique_id"];
            $this->personal_title_prefix = $data["personal_title_prefix"];
            $this->first_name = $data["first_name"];
            $this->middle_name = $data["middle_name"];
            $this->last_surname = $data["last_surname"];
            $this->generation_code_suffix = $data["generation_code_suffix"];
            $this->maiden_name = $data["maiden_name"];
            $this->sex_type = $data["sex_type"];
            $this->birth_date = $data["birth_date"];
            $this->birth_city = $data["birth_city"];
            $this->birth_state_abbreviation_type = $data["birth_state_abbreviation_type"];
            $this->date_entered_us = $data["date_entered_us"];
            $this->multiple_birth_status = $data["multiple_birth_status"];
            $this->profile_thumbnail = $data["profile_thumbnail"];
            $this->hispanic_latino_ethnicity = $data["hispanic_latino_ethnicity"];
            $this->old_ethnicity_type = $data["old_ethnicity_type"];
            $this->economic_disadvantaged = $data["economic_disadvantaged"];
            $this->school_food_services_eligibility_descriptor = $data["school_food_services_eligibility_descriptor"];
            $this->limited_english_proficiency_descriptor = $data["limited_english_proficiency_descriptor"];
            $this->displacement_status = $data["displacement_status"];
            $this->login_id = $data["login_id"];
            $this->birth_international_province = $data["birth_international_province"];
            $this->citizenship_status_type = $data["citizenship_status_type"];
            $this->birth_country_descriptor = $data["birth_country_descriptor"];
            $this->learning_style = $data["learning_style"];
            $this->addresses = $data["addresses"];
            $this->characteristics = $data["characteristics"];
            $this->cohort_years = $data["cohort_years"];
            $this->disabilities = $data["disabilities"];
            $this->electronic_mails = $data["electronic_mails"];
            $this->identification_codes = $data["identification_codes"];
            $this->identification_documents = $data["identification_documents"];
            $this->indicators = $data["indicators"];
            $this->international_addresses = $data["international_addresses"];
            $this->languages = $data["languages"];
            $this->other_names = $data["other_names"];
            $this->program_participations = $data["program_participations"];
            $this->races = $data["races"];
            $this->telephones = $data["telephones"];
            $this->visas = $data["visas"];
            $this->_etag = $data["_etag"];
        }
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id
     * @param string $id The unique identifier of the resource.
     * @return $this
     */
    public function setId($id)
    {

        $this->id = $id;
        return $this;
    }

    /**
     * Gets student_unique_id
     * @return string
     */
    public function getStudentUniqueId()
    {
        return $this->student_unique_id;
    }

    /**
     * Sets student_unique_id
     * @param string $student_unique_id A unique alphanumeric code assigned to a student.
     * @return $this
     */
    public function setStudentUniqueId($student_unique_id)
    {

        $this->student_unique_id = $student_unique_id;
        return $this;
    }

    /**
     * Gets personal_title_prefix
     * @return string
     */
    public function getPersonalTitlePrefix()
    {
        return $this->personal_title_prefix;
    }

    /**
     * Sets personal_title_prefix
     * @param string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the person.
     * @return $this
     */
    public function setPersonalTitlePrefix($personal_title_prefix)
    {

        $this->personal_title_prefix = $personal_title_prefix;
        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }

    /**
     * Sets first_name
     * @param string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
     * @return $this
     */
    public function setFirstName($first_name)
    {

        $this->first_name = $first_name;
        return $this;
    }

    /**
     * Gets middle_name
     * @return string
     */
    public function getMiddleName()
    {
        return $this->middle_name;
    }

    /**
     * Sets middle_name
     * @param string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony.
     * @return $this
     */
    public function setMiddleName($middle_name)
    {

        $this->middle_name = $middle_name;
        return $this;
    }

    /**
     * Gets last_surname
     * @return string
     */
    public function getLastSurname()
    {
        return $this->last_surname;
    }

    /**
     * Sets last_surname
     * @param string $last_surname The name borne in common by members of a family.
     * @return $this
     */
    public function setLastSurname($last_surname)
    {

        $this->last_surname = $last_surname;
        return $this;
    }

    /**
     * Gets generation_code_suffix
     * @return string
     */
    public function getGenerationCodeSuffix()
    {
        return $this->generation_code_suffix;
    }

    /**
     * Sets generation_code_suffix
     * @param string $generation_code_suffix An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
     * @return $this
     */
    public function setGenerationCodeSuffix($generation_code_suffix)
    {

        $this->generation_code_suffix = $generation_code_suffix;
        return $this;
    }

    /**
     * Gets maiden_name
     * @return string
     */
    public function getMaidenName()
    {
        return $this->maiden_name;
    }

    /**
     * Sets maiden_name
     * @param string $maiden_name The person's maiden name.
     * @return $this
     */
    public function setMaidenName($maiden_name)
    {

        $this->maiden_name = $maiden_name;
        return $this;
    }

    /**
     * Gets sex_type
     * @return string
     */
    public function getSexType()
    {
        return $this->sex_type;
    }

    /**
     * Sets sex_type
     * @param string $sex_type A person''s gender.
     * @return $this
     */
    public function setSexType($sex_type)
    {

        $this->sex_type = $sex_type;
        return $this;
    }

    /**
     * Gets birth_date
     * @return \\DateTime
     */
    public function getBirthDate()
    {
        return $this->birth_date;
    }

    /**
     * Sets birth_date
     * @param \\DateTime $birth_date The month, day, and year on which an individual was born.
     * @return $this
     */
    public function setBirthDate($birth_date)
    {

        $this->birth_date = $birth_date;
        return $this;
    }

    /**
     * Gets birth_city
     * @return string
     */
    public function getBirthCity()
    {
        return $this->birth_city;
    }

    /**
     * Sets birth_city
     * @param string $birth_city The set of elements that capture relevant data regarding a person's birth, including birth date and place of birth.
     * @return $this
     */
    public function setBirthCity($birth_city)
    {

        $this->birth_city = $birth_city;
        return $this;
    }

    /**
     * Gets birth_state_abbreviation_type
     * @return string
     */
    public function getBirthStateAbbreviationType()
    {
        return $this->birth_state_abbreviation_type;
    }

    /**
     * Sets birth_state_abbreviation_type
     * @param string $birth_state_abbreviation_type The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
     * @return $this
     */
    public function setBirthStateAbbreviationType($birth_state_abbreviation_type)
    {

        $this->birth_state_abbreviation_type = $birth_state_abbreviation_type;
        return $this;
    }

    /**
     * Gets date_entered_us
     * @return \\DateTime
     */
    public function getDateEnteredUs()
    {
        return $this->date_entered_us;
    }

    /**
     * Sets date_entered_us
     * @param \\DateTime $date_entered_us For students born outside of the U.S., the date the student entered the U.S.
     * @return $this
     */
    public function setDateEnteredUs($date_entered_us)
    {

        $this->date_entered_us = $date_entered_us;
        return $this;
    }

    /**
     * Gets multiple_birth_status
     * @return bool
     */
    public function getMultipleBirthStatus()
    {
        return $this->multiple_birth_status;
    }

    /**
     * Sets multiple_birth_status
     * @param bool $multiple_birth_status Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
     * @return $this
     */
    public function setMultipleBirthStatus($multiple_birth_status)
    {

        $this->multiple_birth_status = $multiple_birth_status;
        return $this;
    }

    /**
     * Gets profile_thumbnail
     * @return string
     */
    public function getProfileThumbnail()
    {
        return $this->profile_thumbnail;
    }

    /**
     * Sets profile_thumbnail
     * @param string $profile_thumbnail ProfileThumbnail.
     * @return $this
     */
    public function setProfileThumbnail($profile_thumbnail)
    {

        $this->profile_thumbnail = $profile_thumbnail;
        return $this;
    }

    /**
     * Gets hispanic_latino_ethnicity
     * @return bool
     */
    public function getHispanicLatinoEthnicity()
    {
        return $this->hispanic_latino_ethnicity;
    }

    /**
     * Sets hispanic_latino_ethnicity
     * @param bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
     * @return $this
     */
    public function setHispanicLatinoEthnicity($hispanic_latino_ethnicity)
    {

        $this->hispanic_latino_ethnicity = $hispanic_latino_ethnicity;
        return $this;
    }

    /**
     * Gets old_ethnicity_type
     * @return string
     */
    public function getOldEthnicityType()
    {
        return $this->old_ethnicity_type;
    }

    /**
     * Sets old_ethnicity_type
     * @param string $old_ethnicity_type Previous definition of Ethnicity combining Hispanic/latino and race:  1 - American Indian or Alaskan Native  2 - Asian or Pacific Islander  3 - Black, not of Hispanic origin  4 - Hispanic  5 - White, not of Hispanic origin
     * @return $this
     */
    public function setOldEthnicityType($old_ethnicity_type)
    {

        $this->old_ethnicity_type = $old_ethnicity_type;
        return $this;
    }

    /**
     * Gets economic_disadvantaged
     * @return bool
     */
    public function getEconomicDisadvantaged()
    {
        return $this->economic_disadvantaged;
    }

    /**
     * Sets economic_disadvantaged
     * @param bool $economic_disadvantaged An indication of inadequate financial condition of an individual's family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
     * @return $this
     */
    public function setEconomicDisadvantaged($economic_disadvantaged)
    {

        $this->economic_disadvantaged = $economic_disadvantaged;
        return $this;
    }

    /**
     * Gets school_food_services_eligibility_descriptor
     * @return string
     */
    public function getSchoolFoodServicesEligibilityDescriptor()
    {
        return $this->school_food_services_eligibility_descriptor;
    }

    /**
     * Sets school_food_services_eligibility_descriptor
     * @param string $school_food_services_eligibility_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setSchoolFoodServicesEligibilityDescriptor($school_food_services_eligibility_descriptor)
    {

        $this->school_food_services_eligibility_descriptor = $school_food_services_eligibility_descriptor;
        return $this;
    }

    /**
     * Gets limited_english_proficiency_descriptor
     * @return string
     */
    public function getLimitedEnglishProficiencyDescriptor()
    {
        return $this->limited_english_proficiency_descriptor;
    }

    /**
     * Sets limited_english_proficiency_descriptor
     * @param string $limited_english_proficiency_descriptor An indication that the student has sufficient difficulty speaking, reading, writing, or understanding the English language, as to require special English Language services.
     * @return $this
     */
    public function setLimitedEnglishProficiencyDescriptor($limited_english_proficiency_descriptor)
    {

        $this->limited_english_proficiency_descriptor = $limited_english_proficiency_descriptor;
        return $this;
    }

    /**
     * Gets displacement_status
     * @return string
     */
    public function getDisplacementStatus()
    {
        return $this->displacement_status;
    }

    /**
     * Sets displacement_status
     * @param string $displacement_status Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.
     * @return $this
     */
    public function setDisplacementStatus($displacement_status)
    {

        $this->displacement_status = $displacement_status;
        return $this;
    }

    /**
     * Gets login_id
     * @return string
     */
    public function getLoginId()
    {
        return $this->login_id;
    }

    /**
     * Sets login_id
     * @param string $login_id The login ID for the user; used for security access control interface.
     * @return $this
     */
    public function setLoginId($login_id)
    {

        $this->login_id = $login_id;
        return $this;
    }

    /**
     * Gets birth_international_province
     * @return string
     */
    public function getBirthInternationalProvince()
    {
        return $this->birth_international_province;
    }

    /**
     * Sets birth_international_province
     * @param string $birth_international_province For students born outside of the US, the Province or jurisdiction in which an individual is born.
     * @return $this
     */
    public function setBirthInternationalProvince($birth_international_province)
    {

        $this->birth_international_province = $birth_international_province;
        return $this;
    }

    /**
     * Gets citizenship_status_type
     * @return string
     */
    public function getCitizenshipStatusType()
    {
        return $this->citizenship_status_type;
    }

    /**
     * Sets citizenship_status_type
     * @param string $citizenship_status_type A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setCitizenshipStatusType($citizenship_status_type)
    {

        $this->citizenship_status_type = $citizenship_status_type;
        return $this;
    }

    /**
     * Gets birth_country_descriptor
     * @return string
     */
    public function getBirthCountryDescriptor()
    {
        return $this->birth_country_descriptor;
    }

    /**
     * Sets birth_country_descriptor
     * @param string $birth_country_descriptor A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
     * @return $this
     */
    public function setBirthCountryDescriptor($birth_country_descriptor)
    {

        $this->birth_country_descriptor = $birth_country_descriptor;
        return $this;
    }

    /**
     * Gets learning_style
     * @return \Swagger\Client\Model\StudentLearningStyle
     */
    public function getLearningStyle()
    {
        return $this->learning_style;
    }

    /**
     * Sets learning_style
     * @param \Swagger\Client\Model\StudentLearningStyle $learning_style The student's relative preference to visual, auditory and tactile learning expressed as percentages.
     * @return $this
     */
    public function setLearningStyle($learning_style)
    {

        $this->learning_style = $learning_style;
        return $this;
    }

    /**
     * Gets addresses
     * @return \Swagger\Client\Model\StudentAddress[]
     */
    public function getAddresses()
    {
        return $this->addresses;
    }

    /**
     * Sets addresses
     * @param \Swagger\Client\Model\StudentAddress[] $addresses An unordered collection of studentAddresses.  The set of elements that describes an address, including the street address, city, state, and ZIP code.
     * @return $this
     */
    public function setAddresses($addresses)
    {

        $this->addresses = $addresses;
        return $this;
    }

    /**
     * Gets characteristics
     * @return \Swagger\Client\Model\StudentCharacteristic[]
     */
    public function getCharacteristics()
    {
        return $this->characteristics;
    }

    /**
     * Sets characteristics
     * @param \Swagger\Client\Model\StudentCharacteristic[] $characteristics An unordered collection of studentCharacteristics.  Reflects important characteristics of the student's home situation: Displaced Homemaker, Homeless, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, Unaccompanied Youth.
     * @return $this
     */
    public function setCharacteristics($characteristics)
    {

        $this->characteristics = $characteristics;
        return $this;
    }

    /**
     * Gets cohort_years
     * @return \Swagger\Client\Model\StudentCohortYear[]
     */
    public function getCohortYears()
    {
        return $this->cohort_years;
    }

    /**
     * Sets cohort_years
     * @param \Swagger\Client\Model\StudentCohortYear[] $cohort_years An unordered collection of studentCohortYears.  The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.
     * @return $this
     */
    public function setCohortYears($cohort_years)
    {

        $this->cohort_years = $cohort_years;
        return $this;
    }

    /**
     * Gets disabilities
     * @return \Swagger\Client\Model\StudentDisability[]
     */
    public function getDisabilities()
    {
        return $this->disabilities;
    }

    /**
     * Sets disabilities
     * @param \Swagger\Client\Model\StudentDisability[] $disabilities An unordered collection of studentDisabilities.  This type represents an impairment of body structure or function, a limitation in activities or a restriction in participation, as ordered by severity of impairment.
     * @return $this
     */
    public function setDisabilities($disabilities)
    {

        $this->disabilities = $disabilities;
        return $this;
    }

    /**
     * Gets electronic_mails
     * @return \Swagger\Client\Model\StudentElectronicMail[]
     */
    public function getElectronicMails()
    {
        return $this->electronic_mails;
    }

    /**
     * Sets electronic_mails
     * @param \Swagger\Client\Model\StudentElectronicMail[] $electronic_mails An unordered collection of studentElectronicMails.
     * @return $this
     */
    public function setElectronicMails($electronic_mails)
    {

        $this->electronic_mails = $electronic_mails;
        return $this;
    }

    /**
     * Gets identification_codes
     * @return \Swagger\Client\Model\StudentIdentificationCode[]
     */
    public function getIdentificationCodes()
    {
        return $this->identification_codes;
    }

    /**
     * Sets identification_codes
     * @param \Swagger\Client\Model\StudentIdentificationCode[] $identification_codes An unordered collection of studentIdentificationCodes.  A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a student.
     * @return $this
     */
    public function setIdentificationCodes($identification_codes)
    {

        $this->identification_codes = $identification_codes;
        return $this;
    }

    /**
     * Gets identification_documents
     * @return \Swagger\Client\Model\StudentIdentificationDocument[]
     */
    public function getIdentificationDocuments()
    {
        return $this->identification_documents;
    }

    /**
     * Sets identification_documents
     * @param \Swagger\Client\Model\StudentIdentificationDocument[] $identification_documents An unordered collection of studentIdentificationDocuments.  Represents the valid document that a person uses for identification.
     * @return $this
     */
    public function setIdentificationDocuments($identification_documents)
    {

        $this->identification_documents = $identification_documents;
        return $this;
    }

    /**
     * Gets indicators
     * @return \Swagger\Client\Model\StudentIndicator[]
     */
    public function getIndicators()
    {
        return $this->indicators;
    }

    /**
     * Sets indicators
     * @param \Swagger\Client\Model\StudentIndicator[] $indicators An unordered collection of studentIndicators.  An indicator or metric computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.
     * @return $this
     */
    public function setIndicators($indicators)
    {

        $this->indicators = $indicators;
        return $this;
    }

    /**
     * Gets international_addresses
     * @return \Swagger\Client\Model\StudentInternationalAddress[]
     */
    public function getInternationalAddresses()
    {
        return $this->international_addresses;
    }

    /**
     * Sets international_addresses
     * @param \Swagger\Client\Model\StudentInternationalAddress[] $international_addresses An unordered collection of studentInternationalAddresses.  The set of elements that describes an address, including the street address and country for international students.
     * @return $this
     */
    public function setInternationalAddresses($international_addresses)
    {

        $this->international_addresses = $international_addresses;
        return $this;
    }

    /**
     * Gets languages
     * @return \Swagger\Client\Model\StudentLanguage[]
     */
    public function getLanguages()
    {
        return $this->languages;
    }

    /**
     * Sets languages
     * @param \Swagger\Client\Model\StudentLanguage[] $languages An unordered collection of studentLanguages.  Language(s) the individual uses to communicate.
     * @return $this
     */
    public function setLanguages($languages)
    {

        $this->languages = $languages;
        return $this;
    }

    /**
     * Gets other_names
     * @return \Swagger\Client\Model\StudentOtherName[]
     */
    public function getOtherNames()
    {
        return $this->other_names;
    }

    /**
     * Sets other_names
     * @param \Swagger\Client\Model\StudentOtherName[] $other_names An unordered collection of studentOtherNames.  Other names (e.g., alias, nickname, previous legal name) associated with a person.
     * @return $this
     */
    public function setOtherNames($other_names)
    {

        $this->other_names = $other_names;
        return $this;
    }

    /**
     * Gets program_participations
     * @return \Swagger\Client\Model\StudentProgramParticipation[]
     */
    public function getProgramParticipations()
    {
        return $this->program_participations;
    }

    /**
     * Sets program_participations
     * @param \Swagger\Client\Model\StudentProgramParticipation[] $program_participations An unordered collection of studentProgramParticipations.  Key programs the student is participating in or receives services from.
     * @return $this
     */
    public function setProgramParticipations($program_participations)
    {

        $this->program_participations = $program_participations;
        return $this;
    }

    /**
     * Gets races
     * @return \Swagger\Client\Model\StudentRace[]
     */
    public function getRaces()
    {
        return $this->races;
    }

    /**
     * Sets races
     * @param \Swagger\Client\Model\StudentRace[] $races An unordered collection of studentRaces.  The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
     * @return $this
     */
    public function setRaces($races)
    {

        $this->races = $races;
        return $this;
    }

    /**
     * Gets telephones
     * @return \Swagger\Client\Model\StudentTelephone[]
     */
    public function getTelephones()
    {
        return $this->telephones;
    }

    /**
     * Sets telephones
     * @param \Swagger\Client\Model\StudentTelephone[] $telephones An unordered collection of studentTelephones.  The 10-digit telephone number, including the area code, for the person.
     * @return $this
     */
    public function setTelephones($telephones)
    {

        $this->telephones = $telephones;
        return $this;
    }

    /**
     * Gets visas
     * @return \Swagger\Client\Model\StudentVisa[]
     */
    public function getVisas()
    {
        return $this->visas;
    }

    /**
     * Sets visas
     * @param \Swagger\Client\Model\StudentVisa[] $visas An unordered collection of studentVisas.  Describe the types of Visa that a non-U.S. citizen student holds.
     * @return $this
     */
    public function setVisas($visas)
    {

        $this->visas = $visas;
        return $this;
    }

    /**
     * Gets _etag
     * @return string
     */
    public function getEtag()
    {
        return $this->_etag;
    }

    /**
     * Sets _etag
     * @param string $_etag A unique system-generated value that identifies the version of the resource.
     * @return $this
     */
    public function setEtag($_etag)
    {

        $this->_etag = $_etag;
        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
